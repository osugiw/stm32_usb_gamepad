
USB_Gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800b200  0800b200  0000c200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b2fc  0800b2fc  0000c2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b300  0800b300  0000c300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000010c  20000008  0800b304  0000d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000768  20000114  0800b410  0000d114  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000087c  0800b410  0000d87c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000d114  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b736  00000000  00000000  0000d144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f28  00000000  00000000  0002887a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d60  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001650  00000000  00000000  0002e508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025df5  00000000  00000000  0002fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c4e8  00000000  00000000  0005594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000edd42  00000000  00000000  00071e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015fb77  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007bf8  00000000  00000000  0015fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001677b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000114 	.word	0x20000114
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b1e8 	.word	0x0800b1e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000118 	.word	0x20000118
 8000178:	0800b1e8 	.word	0x0800b1e8

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	joystick_X = (int8_t)rawADC[0] - 128;
 80001e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3b80      	subs	r3, #128	@ 0x80
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 80001f2:	701a      	strb	r2, [r3, #0]
	joystick_Y = (int8_t)rawADC[1] - 128;
 80001f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	3b80      	subs	r3, #128	@ 0x80
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b0b      	ldr	r3, [pc, #44]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 80001fe:	701a      	strb	r2, [r3, #0]
	joystick_RX = (int8_t)rawADC[2] - 128;
 8000200:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 8000202:	789b      	ldrb	r3, [r3, #2]
 8000204:	3b80      	subs	r3, #128	@ 0x80
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <HAL_ADC_ConvCpltCallback+0x50>)
 800020a:	701a      	strb	r2, [r3, #0]
	joystick_RY = (int8_t)rawADC[3] - 128;
 800020c:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 800020e:	78db      	ldrb	r3, [r3, #3]
 8000210:	3b80      	subs	r3, #128	@ 0x80
 8000212:	b2da      	uxtb	r2, r3
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <HAL_ADC_ConvCpltCallback+0x54>)
 8000216:	701a      	strb	r2, [r3, #0]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	20000248 	.word	0x20000248
 8000228:	20000244 	.word	0x20000244
 800022c:	20000245 	.word	0x20000245
 8000230:	20000246 	.word	0x20000246
 8000234:	20000247 	.word	0x20000247

08000238 <controlButtonState>:
 * 		debounceDelay		button delay read
 * 		returnState			State to change when the button is pressed
 * @retval None
**/
void controlButtonState(button_t *button, uint32_t debounceDelay, bool *returnState)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	// Ignoring noise or accidentally pressed
	if(button->currentState != button->lastState)
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	785a      	ldrb	r2, [r3, #1]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d004      	beq.n	800025a <controlButtonState+0x22>
		button->lastDebounceTime = HAL_GetTick();
 8000250:	f000 fccc 	bl	8000bec <HAL_GetTick>
 8000254:	4602      	mov	r2, r0
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	605a      	str	r2, [r3, #4]

	// Read the actual state from the button
	if((HAL_GetTick() - button->lastDebounceTime) > debounceDelay){
 800025a:	f000 fcc7 	bl	8000bec <HAL_GetTick>
 800025e:	4602      	mov	r2, r0
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	68ba      	ldr	r2, [r7, #8]
 8000268:	429a      	cmp	r2, r3
 800026a:	d210      	bcs.n	800028e <controlButtonState+0x56>
		if(button->readState != button->currentState){
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	781a      	ldrb	r2, [r3, #0]
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	429a      	cmp	r2, r3
 8000276:	d00a      	beq.n	800028e <controlButtonState+0x56>
			button->currentState = button->readState;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	705a      	strb	r2, [r3, #1]
			if(button->currentState == GPIO_PIN_RESET){
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	785b      	ldrb	r3, [r3, #1]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <controlButtonState+0x56>
				*returnState = true;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b092      	sub	sp, #72	@ 0x48
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  button_t bt_leftJS		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 800029e:	4a56      	ldr	r2, [pc, #344]	@ (80003f8 <main+0x160>)
 80002a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a8:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_rightJS		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002ac:	4a52      	ldr	r2, [pc, #328]	@ (80003f8 <main+0x160>)
 80002ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002b6:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_a 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002ba:	4a4f      	ldr	r2, [pc, #316]	@ (80003f8 <main+0x160>)
 80002bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80002c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c4:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_b 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002c8:	4a4b      	ldr	r2, [pc, #300]	@ (80003f8 <main+0x160>)
 80002ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t arrButtons[4] 	= {bt_leftJS, bt_rightJS, bt_a, bt_b};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80002dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80002fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000300:	e883 0003 	stmia.w	r3, {r0, r1}
 8000304:	f107 031c 	add.w	r3, r7, #28
 8000308:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800030c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000310:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fbfc 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f87e 	bl	8000418 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031c:	f000 f8e8 	bl	80004f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 fa14 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000324:	f000 fa00 	bl	8000728 <MX_DMA_Init>
  MX_ADC1_Init();
 8000328:	f000 f914 	bl	8000554 <MX_ADC1_Init>
  MX_USB_Device_Init();
 800032c:	f00a fae6 	bl	800a8fc <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000330:	f000 f9a6 	bl	8000680 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rawADC, 4);
 8000334:	2204      	movs	r2, #4
 8000336:	4931      	ldr	r1, [pc, #196]	@ (80003fc <main+0x164>)
 8000338:	4831      	ldr	r0, [pc, #196]	@ (8000400 <main+0x168>)
 800033a:	f000 ffb7 	bl	80012ac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 800033e:	4831      	ldr	r0, [pc, #196]	@ (8000404 <main+0x16c>)
 8000340:	f005 fdc8 	bl	8005ed4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  arrButtons[0].readState	= HAL_GPIO_ReadPin(joystick_sw_GPIO_Port, joystick_sw_Pin);
 8000344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000348:	482f      	ldr	r0, [pc, #188]	@ (8000408 <main+0x170>)
 800034a:	f002 fa0f 	bl	800276c <HAL_GPIO_ReadPin>
 800034e:	4603      	mov	r3, r0
 8000350:	713b      	strb	r3, [r7, #4]
	  arrButtons[1].readState 	= HAL_GPIO_ReadPin(joystick_rsw_GPIO_Port, joystick_rsw_Pin);
 8000352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035a:	f002 fa07 	bl	800276c <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	733b      	strb	r3, [r7, #12]
	  controlButtonState(&arrButtons[0], 20, &bt_states.leftJS_isPressed);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4a29      	ldr	r2, [pc, #164]	@ (800040c <main+0x174>)
 8000366:	2114      	movs	r1, #20
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff65 	bl	8000238 <controlButtonState>
	  controlButtonState(&arrButtons[1], 20, &bt_states.rightJS_isPressed);
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	3308      	adds	r3, #8
 8000372:	4a27      	ldr	r2, [pc, #156]	@ (8000410 <main+0x178>)
 8000374:	2114      	movs	r1, #20
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff5e 	bl	8000238 <controlButtonState>

	  // Save the reading for the next iteration
	  for(uint8_t i=0; i<4; i++)
 800037c:	2300      	movs	r3, #0
 800037e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000382:	e013      	b.n	80003ac <main+0x114>
		  arrButtons[i].lastState	= arrButtons[i].readState;
 8000384:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000388:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	3348      	adds	r3, #72	@ 0x48
 8000390:	443b      	add	r3, r7
 8000392:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 8000396:	00d3      	lsls	r3, r2, #3
 8000398:	3348      	adds	r3, #72	@ 0x48
 800039a:	443b      	add	r3, r7
 800039c:	460a      	mov	r2, r1
 800039e:	f803 2c42 	strb.w	r2, [r3, #-66]
	  for(uint8_t i=0; i<4; i++)
 80003a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80003a6:	3301      	adds	r3, #1
 80003a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80003ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d9e7      	bls.n	8000384 <main+0xec>

	  JoystickControl();
 80003b4:	f00a fa22 	bl	800a7fc <JoystickControl>

	  // Normalize state
	  if(HAL_GetTick() - prevTime >= 200){
 80003b8:	f000 fc18 	bl	8000bec <HAL_GetTick>
 80003bc:	4602      	mov	r2, r0
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <main+0x17c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80003c6:	d913      	bls.n	80003f0 <main+0x158>
		  prevTime = HAL_GetTick();
 80003c8:	f000 fc10 	bl	8000bec <HAL_GetTick>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a11      	ldr	r2, [pc, #68]	@ (8000414 <main+0x17c>)
 80003d0:	6013      	str	r3, [r2, #0]
		  if(bt_states.leftJS_isPressed)
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <main+0x174>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d003      	beq.n	80003e2 <main+0x14a>
			  bt_states.leftJS_isPressed = false;
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <main+0x174>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
 80003e0:	e006      	b.n	80003f0 <main+0x158>
		  else if(bt_states.rightJS_isPressed)
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <main+0x174>)
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <main+0x158>
			  bt_states.rightJS_isPressed = false;
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <main+0x174>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	705a      	strb	r2, [r3, #1]
	  }

	  HAL_Delay(10);
 80003f0:	200a      	movs	r0, #10
 80003f2:	f000 fc13 	bl	8000c1c <HAL_Delay>
	  arrButtons[0].readState	= HAL_GPIO_ReadPin(joystick_sw_GPIO_Port, joystick_sw_Pin);
 80003f6:	e7a5      	b.n	8000344 <main+0xac>
 80003f8:	0800b200 	.word	0x0800b200
 80003fc:	20000248 	.word	0x20000248
 8000400:	20000130 	.word	0x20000130
 8000404:	200001f4 	.word	0x200001f4
 8000408:	48000800 	.word	0x48000800
 800040c:	20000240 	.word	0x20000240
 8000410:	20000241 	.word	0x20000241
 8000414:	2000024c 	.word	0x2000024c

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09a      	sub	sp, #104	@ 0x68
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0320 	add.w	r3, r7, #32
 8000422:	2248      	movs	r2, #72	@ 0x48
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f00a feb2 	bl	800b190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800043e:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <SystemClock_Config+0xd4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000446:	4a29      	ldr	r2, [pc, #164]	@ (80004ec <SystemClock_Config+0xd4>)
 8000448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <SystemClock_Config+0xd4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800045a:	2326      	movs	r3, #38	@ 0x26
 800045c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800045e:	2300      	movs	r3, #0
 8000460:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046c:	2340      	movs	r3, #64	@ 0x40
 800046e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000470:	2300      	movs	r3, #0
 8000472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000474:	2360      	movs	r3, #96	@ 0x60
 8000476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	2302      	movs	r3, #2
 800047a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800047c:	2301      	movs	r3, #1
 800047e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000484:	2320      	movs	r3, #32
 8000486:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800048c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000492:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000498:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	f107 0320 	add.w	r3, r7, #32
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 fa40 	bl	8004924 <HAL_RCC_OscConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004aa:	f000 f97f 	bl	80007ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80004ae:	236f      	movs	r3, #111	@ 0x6f
 80004b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b2:	2303      	movs	r3, #3
 80004b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2103      	movs	r1, #3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 fd9c 	bl	800500c <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004da:	f000 f967 	bl	80007ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80004de:	f005 fb50 	bl	8005b82 <HAL_RCCEx_EnableMSIPLLMode>
}
 80004e2:	bf00      	nop
 80004e4:	3768      	adds	r7, #104	@ 0x68
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	58000400 	.word	0x58000400

080004f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	@ 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2250      	movs	r2, #80	@ 0x50
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f00a fe47 	bl	800b190 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000502:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8000506:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000508:	2318      	movs	r3, #24
 800050a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800050c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000518:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800051c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800051e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000522:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000524:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000528:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800052a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800052e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000530:	2300      	movs	r3, #0
 8000532:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000534:	2300      	movs	r3, #0
 8000536:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4618      	mov	r0, r3
 800053c:	f005 f9ab 	bl	8005896 <HAL_RCCEx_PeriphCLKConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000546:	f000 f931 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800054a:	bf00      	nop
 800054c:	3750      	adds	r7, #80	@ 0x50
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055a:	463b      	mov	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <MX_ADC1_Init+0x114>)
 800056c:	4a3f      	ldr	r2, [pc, #252]	@ (800066c <MX_ADC1_Init+0x118>)
 800056e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000570:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000572:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000576:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000578:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x114>)
 800057a:	2210      	movs	r2, #16
 800057c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057e:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000584:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000586:	2201      	movs	r2, #1
 8000588:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800058a:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <MX_ADC1_Init+0x114>)
 800058c:	2208      	movs	r2, #8
 800058e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000592:	2200      	movs	r2, #0
 8000594:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000596:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000598:	2200      	movs	r2, #0
 800059a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800059c:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_ADC1_Init+0x114>)
 800059e:	2204      	movs	r2, #4
 80005a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80005aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005ac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80005b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005bc:	2201      	movs	r2, #1
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4825      	ldr	r0, [pc, #148]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005d2:	f000 fd1f 	bl	8001014 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005dc:	f000 f8e6 	bl	80007ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_ADC1_Init+0x11c>)
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e4:	2306      	movs	r3, #6
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005e8:	2307      	movs	r3, #7
 80005ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ec:	237f      	movs	r3, #127	@ 0x7f
 80005ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f0:	2304      	movs	r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x114>)
 80005fe:	f000 feed 	bl	80013dc <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000608:	f000 f8d0 	bl	80007ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x120>)
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000610:	230c      	movs	r3, #12
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <MX_ADC1_Init+0x114>)
 800061a:	f000 fedf 	bl	80013dc <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000624:	f000 f8c2 	bl	80007ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000628:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <MX_ADC1_Init+0x124>)
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800062c:	2312      	movs	r3, #18
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000636:	f000 fed1 	bl	80013dc <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000640:	f000 f8b4 	bl	80007ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <MX_ADC1_Init+0x128>)
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000648:	2318      	movs	r3, #24
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x114>)
 8000652:	f000 fec3 	bl	80013dc <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 800065c:	f000 f8a6 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000130 	.word	0x20000130
 800066c:	50040000 	.word	0x50040000
 8000670:	04300002 	.word	0x04300002
 8000674:	08600004 	.word	0x08600004
 8000678:	19200040 	.word	0x19200040
 800067c:	14f00020 	.word	0x14f00020

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069e:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006a0:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <MX_TIM1_Init+0xa4>)
 80006a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006a6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80006aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006b4:	2263      	movs	r2, #99	@ 0x63
 80006b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006be:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006cc:	f005 fbab 	bl	8005e26 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f869 	bl	80007ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <MX_TIM1_Init+0xa0>)
 80006e8:	f005 fd41 	bl	800616e <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006f2:	f000 f85b 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006f6:	2320      	movs	r3, #32
 80006f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	@ (8000720 <MX_TIM1_Init+0xa0>)
 8000708:	f005 ff38 	bl	800657c <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000712:	f000 f84b 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001f4 	.word	0x200001f4
 8000724:	40012c00 	.word	0x40012c00

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800072c:	2004      	movs	r0, #4
 800072e:	f7ff fd25 	bl	800017c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fd22 	bl	800017c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	200b      	movs	r0, #11
 800073e:	f001 fbfc 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000742:	200b      	movs	r0, #11
 8000744:	f001 fc13 	bl	8001f6e <HAL_NVIC_EnableIRQ>

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000760:	2004      	movs	r0, #4
 8000762:	f7ff fd24 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff fd21 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : joystick_sw_Pin */
  GPIO_InitStruct.Pin = joystick_sw_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_sw_GPIO_Port, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <MX_GPIO_Init+0x5c>)
 8000780:	f001 fe84 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : joystick_rsw_Pin */
  GPIO_InitStruct.Pin = joystick_rsw_Pin;
 8000784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000788:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_rsw_GPIO_Port, &GPIO_InitStruct);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f001 fe77 	bl	800248c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	48000800 	.word	0x48000800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <LL_AHB2_GRP1_EnableClock>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007dc:	68fb      	ldr	r3, [r7, #12]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80007f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000806:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a29      	ldr	r2, [pc, #164]	@ (80008f0 <HAL_ADC_MspInit+0xc4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d14c      	bne.n	80008e8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800084e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000852:	f7ff ffb1 	bl	80007b8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff ffae 	bl	80007b8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ffab 	bl	80007b8 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = joystick_x_Pin|joystick_y_Pin;
 8000862:	2303      	movs	r3, #3
 8000864:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <HAL_ADC_MspInit+0xc8>)
 8000876:	f001 fe09 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joystick_ry_Pin|joystick_rx_Pin;
 800087a:	2303      	movs	r3, #3
 800087c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000890:	f001 fdfc 	bl	800248c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 8000896:	4a19      	ldr	r2, [pc, #100]	@ (80008fc <HAL_ADC_MspInit+0xd0>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 800089c:	2205      	movs	r2, #5
 800089e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008c0:	2220      	movs	r2, #32
 80008c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008cc:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008ce:	f001 fb69 	bl	8001fa4 <HAL_DMA_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80008d8:	f7ff ff68 	bl	80007ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <HAL_ADC_MspInit+0xcc>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	50040000 	.word	0x50040000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	20000194 	.word	0x20000194
 80008fc:	40020008 	.word	0x40020008

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <HAL_TIM_Base_MspInit+0x44>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d113      	bne.n	800093a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000912:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000916:	f7ff ff68 	bl	80007ea <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2019      	movs	r0, #25
 8000920:	f001 fb0b 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000924:	2019      	movs	r0, #25
 8000926:	f001 fb22 	bl	8001f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	201a      	movs	r0, #26
 8000930:	f001 fb03 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000934:	201a      	movs	r0, #26
 8000936:	f001 fb1a 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40012c00 	.word	0x40012c00

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f000 f911 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <DMA1_Channel1_IRQHandler+0x10>)
 80009ae:	f001 fc1c 	bl	80021ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000194 	.word	0x20000194

080009bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USB_LP_IRQHandler+0x10>)
 80009c2:	f001 ffdb 	bl	800297c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000058c 	.word	0x2000058c

080009d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009d6:	f005 fac3 	bl	8005f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001f4 	.word	0x200001f4

080009e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80009ea:	f005 fab9 	bl	8005f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001f4 	.word	0x200001f4

080009f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80009fc:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <SystemInit+0x98>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a23      	ldr	r2, [pc, #140]	@ (8000a90 <SystemInit+0x98>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a20:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000a24:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <SystemInit+0x9c>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a42:	f023 0305 	bic.w	r3, r3, #5
 8000a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000a52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a62:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <SystemInit+0xa0>)
 8000a64:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <SystemInit+0xa0>)
 8000a6c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	faf6fefb 	.word	0xfaf6fefb
 8000a98:	22041000 	.word	0x22041000

08000a9c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000a9c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa0:	3304      	adds	r3, #4

08000aa2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000aa6:	d3f9      	bcc.n	8000a9c <CopyDataInit>
  bx lr
 8000aa8:	4770      	bx	lr

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000aaa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000aac:	3004      	adds	r0, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000aae:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>
  bx lr
 8000ab2:	4770      	bx	lr

08000ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab8:	f7ff ff9e 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000abc:	480b      	ldr	r0, [pc, #44]	@ (8000aec <LoopForever+0x6>)
 8000abe:	490c      	ldr	r1, [pc, #48]	@ (8000af0 <LoopForever+0xa>)
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <LoopForever+0xe>)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f7ff ffed 	bl	8000aa2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <LoopForever+0x12>)
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <LoopForever+0x16>)
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <LoopForever+0x1a>)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f7ff ffe7 	bl	8000aa2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <LoopForever+0x1e>)
 8000ad6:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <LoopForever+0x22>)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f7ff ffe8 	bl	8000aae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f00a fb5f 	bl	800b1a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ae2:	f7ff fbd9 	bl	8000298 <main>

08000ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000114 	.word	0x20000114
 8000af4:	0800b304 	.word	0x0800b304
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000af8:	20030000 	.word	0x20030000
 8000afc:	20030000 	.word	0x20030000
 8000b00:	0800b410 	.word	0x0800b410
  INIT_BSS _sbss, _ebss
 8000b04:	20000114 	.word	0x20000114
 8000b08:	2000087c 	.word	0x2000087c

08000b0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_Init+0x3c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <HAL_Init+0x3c>)
 8000b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f001 f9fc 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f80f 	bl	8000b50 <HAL_InitTick>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	e001      	b.n	8000b42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b3e:	f7ff fe6d 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58004000 	.word	0x58004000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_InitTick+0x6c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d024      	beq.n	8000bae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b64:	f004 fbfe 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_InitTick+0x6c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b74:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fa04 	bl	8001f8a <HAL_SYSTICK_Config>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d10f      	bne.n	8000ba8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d809      	bhi.n	8000ba2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f04f 30ff 	mov.w	r0, #4294967295
 8000b96:	f001 f9d0 	bl	8001f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9a:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <HAL_InitTick+0x70>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e007      	b.n	8000bb2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e004      	b.n	8000bb2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000010 	.word	0x20000010
 8000bc0:	2000000c 	.word	0x2000000c

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000010 	.word	0x20000010
 8000be8:	20000250 	.word	0x20000250

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000250 	.word	0x20000250

08000c04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTickPrio+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffe2 	bl	8000bec <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffd2 	bl	8000bec <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000010 	.word	0x20000010

08000c64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_ResumeTick+0x1c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <HAL_ResumeTick+0x1c>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3360      	adds	r3, #96	@ 0x60
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <LL_ADC_SetOffset+0x44>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d24:	bf00      	nop
 8000d26:	371c      	adds	r7, #28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	03fff000 	.word	0x03fff000

08000d34 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3360      	adds	r3, #96	@ 0x60
 8000d42:	461a      	mov	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3360      	adds	r3, #96	@ 0x60
 8000d70:	461a      	mov	r2, r3
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d8a:	bf00      	nop
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dae:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3330      	adds	r3, #48	@ 0x30
 8000dcc:	461a      	mov	r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	211f      	movs	r1, #31
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	0e9b      	lsrs	r3, r3, #26
 8000df4:	f003 011f 	and.w	r1, r3, #31
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	431a      	orrs	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000e08:	bf00      	nop
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3314      	adds	r3, #20
 8000e24:	461a      	mov	r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	0e5b      	lsrs	r3, r3, #25
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	0d1b      	lsrs	r3, r3, #20
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	2107      	movs	r1, #7
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	401a      	ands	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	0d1b      	lsrs	r3, r3, #20
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e84:	43db      	mvns	r3, r3
 8000e86:	401a      	ands	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0318 	and.w	r3, r3, #24
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e90:	40d9      	lsrs	r1, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	400b      	ands	r3, r1
 8000e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	0007ffff 	.word	0x0007ffff

08000eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6093      	str	r3, [r2, #8]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000eec:	d101      	bne.n	8000ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f3c:	d101      	bne.n	8000f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <LL_ADC_IsEnabled+0x18>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <LL_ADC_IsEnabled+0x1a>
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb2:	f043 0204 	orr.w	r2, r3, #4
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d101      	bne.n	8000fde <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d101      	bne.n	8001004 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e12e      	b.n	8001290 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fbf3 	bl	800082c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff3d 	bl	8000ed8 <LL_ADC_IsDeepPowerDownEnabled>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff23 	bl	8000eb4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff58 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d115      	bne.n	80010aa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff3c 	bl	8000f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001088:	4b83      	ldr	r3, [pc, #524]	@ (8001298 <HAL_ADC_Init+0x284>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	099b      	lsrs	r3, r3, #6
 800108e:	4a83      	ldr	r2, [pc, #524]	@ (800129c <HAL_ADC_Init+0x288>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	099b      	lsrs	r3, r3, #6
 8001096:	3301      	adds	r3, #1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800109c:	e002      	b.n	80010a4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f9      	bne.n	800109e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff3a 	bl	8000f28 <LL_ADC_IsInternalRegulatorEnabled>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010be:	f043 0210 	orr.w	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff73 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80010e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 80c7 	bne.w	800127e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 80c3 	bne.w	800127e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001100:	f043 0202 	orr.w	r2, r3, #2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff33 	bl	8000f78 <LL_ADC_IsEnabled>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001118:	4861      	ldr	r0, [pc, #388]	@ (80012a0 <HAL_ADC_Init+0x28c>)
 800111a:	f7ff ff2d 	bl	8000f78 <LL_ADC_IsEnabled>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4619      	mov	r1, r3
 800112a:	485e      	ldr	r0, [pc, #376]	@ (80012a4 <HAL_ADC_Init+0x290>)
 800112c:	f7ff fdaa 	bl	8000c84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e5b      	ldrb	r3, [r3, #25]
 8001134:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001140:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001146:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001150:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	3b01      	subs	r3, #1
 8001168:	045b      	lsls	r3, r3, #17
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b45      	ldr	r3, [pc, #276]	@ (80012a8 <HAL_ADC_Init+0x294>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	430b      	orrs	r3, r1
 800119e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff0e 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80011aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff1b 	bl	8000fec <LL_ADC_INJ_IsConversionOngoing>
 80011b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d13d      	bne.n	800123a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d13a      	bne.n	800123a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011e0:	f023 0302 	bic.w	r3, r3, #2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	69b9      	ldr	r1, [r7, #24]
 80011ea:	430b      	orrs	r3, r1
 80011ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d118      	bne.n	800122a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800120e:	4311      	orrs	r1, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001214:	4311      	orrs	r1, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800121a:	430a      	orrs	r2, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	e007      	b.n	800123a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10c      	bne.n	800125c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	f023 010f 	bic.w	r1, r3, #15
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	631a      	str	r2, [r3, #48]	@ 0x30
 800125a:	e007      	b.n	800126c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 020f 	bic.w	r2, r2, #15
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001270:	f023 0303 	bic.w	r3, r3, #3
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	655a      	str	r2, [r3, #84]	@ 0x54
 800127c:	e007      	b.n	800128e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800128e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000008 	.word	0x20000008
 800129c:	053e2d63 	.word	0x053e2d63
 80012a0:	50040000 	.word	0x50040000
 80012a4:	50040300 	.word	0x50040300
 80012a8:	fff0c007 	.word	0xfff0c007

080012ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe82 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d167      	bne.n	8001398 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Start_DMA+0x2a>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e063      	b.n	800139e <HAL_ADC_Start_DMA+0xf2>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fc42 	bl	8001b68 <ADC_Enable>
 80012e4:	4603      	mov	r3, r0
 80012e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d14f      	bne.n	800138e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001312:	f023 0206 	bic.w	r2, r3, #6
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	659a      	str	r2, [r3, #88]	@ 0x58
 800131a:	e002      	b.n	8001322 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <HAL_ADC_Start_DMA+0xfc>)
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <HAL_ADC_Start_DMA+0x100>)
 8001330:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_ADC_Start_DMA+0x104>)
 8001338:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	221c      	movs	r2, #28
 8001340:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0210 	orr.w	r2, r2, #16
 8001358:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3340      	adds	r3, #64	@ 0x40
 8001374:	4619      	mov	r1, r3
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f000 febb 	bl	80020f4 <HAL_DMA_Start_IT>
 800137e:	4603      	mov	r3, r0
 8001380:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fe09 	bl	8000f9e <LL_ADC_REG_StartConversion>
 800138c:	e006      	b.n	800139c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001396:	e001      	b.n	800139c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001398:	2302      	movs	r3, #2
 800139a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	08001c5d 	.word	0x08001c5d
 80013ac:	08001d35 	.word	0x08001d35
 80013b0:	08001d51 	.word	0x08001d51

080013b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0b6      	sub	sp, #216	@ 0xd8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x22>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e39f      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x762>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fddb 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 8384 	bne.w	8001b20 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	f7ff fcc9 	bl	8000dbc <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fdc9 	bl	8000fc6 <LL_ADC_REG_IsConversionOngoing>
 8001434:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fdd5 	bl	8000fec <LL_ADC_INJ_IsConversionOngoing>
 8001442:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001446:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 81a6 	bne.w	800179c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 81a1 	bne.w	800179c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	461a      	mov	r2, r3
 8001468:	f7ff fcd4 	bl	8000e14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00a      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800149e:	f7ff fc25 	bl	8000cec <LL_ADC_SetOffset>
 80014a2:	e17b      	b.n	800179c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc42 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0xf4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc37 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	0e9b      	lsrs	r3, r3, #26
 80014ca:	f003 021f 	and.w	r2, r3, #31
 80014ce:	e01e      	b.n	800150e <HAL_ADC_ConfigChannel+0x132>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc2c 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80014fe:	2320      	movs	r3, #32
 8001500:	e004      	b.n	800150c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x14a>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0e9b      	lsrs	r3, r3, #26
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	e018      	b.n	8001558 <HAL_ADC_ConfigChannel+0x17c>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800153a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800153e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800154a:	2320      	movs	r3, #32
 800154c:	e004      	b.n	8001558 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800154e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbfb 	bl	8000d60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fbdf 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x1ba>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fbd4 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	e01e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1f8>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fbc9 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80015b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80015bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e004      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80015c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x210>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	e018      	b.n	800161e <HAL_ADC_ConfigChannel+0x242>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001608:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	e004      	b.n	800161e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	429a      	cmp	r2, r3
 8001620:	d106      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	2101      	movs	r1, #1
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb98 	bl	8000d60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fb7c 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10a      	bne.n	800165c <HAL_ADC_ConfigChannel+0x280>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb71 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	0e9b      	lsrs	r3, r3, #26
 8001656:	f003 021f 	and.w	r2, r3, #31
 800165a:	e01e      	b.n	800169a <HAL_ADC_ConfigChannel+0x2be>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2102      	movs	r1, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb66 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800167a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800168a:	2320      	movs	r3, #32
 800168c:	e004      	b.n	8001698 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800168e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x2d6>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	e016      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x304>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80016c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80016c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80016ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e004      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80016d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d106      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fb37 	bl	8000d60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2103      	movs	r1, #3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fb1b 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10a      	bne.n	800171e <HAL_ADC_ConfigChannel+0x342>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2103      	movs	r1, #3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fb10 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	0e9b      	lsrs	r3, r3, #26
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	e017      	b.n	800174e <HAL_ADC_ConfigChannel+0x372>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2103      	movs	r1, #3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb05 	bl	8000d34 <LL_ADC_GetOffsetChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001738:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800173a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x38a>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	e011      	b.n	800178a <HAL_ADC_ConfigChannel+0x3ae>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001776:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800177e:	2320      	movs	r3, #32
 8001780:	e003      	b.n	800178a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	429a      	cmp	r2, r3
 800178c:	d106      	bne.n	800179c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	2103      	movs	r1, #3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fae2 	bl	8000d60 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fbe9 	bl	8000f78 <LL_ADC_IsEnabled>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 81c2 	bne.w	8001b32 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f7ff fb56 	bl	8000e6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001a00 <HAL_ADC_ConfigChannel+0x624>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	f040 8130 	bne.w	8001a2c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10b      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x418>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	3301      	adds	r3, #1
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	bf94      	ite	ls
 80017ec:	2301      	movls	r3, #1
 80017ee:	2300      	movhi	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e019      	b.n	8001828 <HAL_ADC_ConfigChannel+0x44c>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001804:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800180c:	2320      	movs	r3, #32
 800180e:	e003      	b.n	8001818 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b09      	cmp	r3, #9
 8001820:	bf94      	ite	ls
 8001822:	2301      	movls	r3, #1
 8001824:	2300      	movhi	r3, #0
 8001826:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001828:	2b00      	cmp	r3, #0
 800182a:	d079      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x46c>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	3301      	adds	r3, #1
 8001840:	069b      	lsls	r3, r3, #26
 8001842:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001846:	e015      	b.n	8001874 <HAL_ADC_ConfigChannel+0x498>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001858:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800185a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e003      	b.n	800186c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	069b      	lsls	r3, r3, #26
 8001870:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x4b8>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	3301      	adds	r3, #1
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	e017      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x4e8>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80018a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80018a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e003      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80018b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	ea42 0103 	orr.w	r1, r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x50e>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	3301      	adds	r3, #1
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	051b      	lsls	r3, r3, #20
 80018e8:	e018      	b.n	800191c <HAL_ADC_ConfigChannel+0x540>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80018fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001902:	2320      	movs	r3, #32
 8001904:	e003      	b.n	800190e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3301      	adds	r3, #1
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800191c:	430b      	orrs	r3, r1
 800191e:	e080      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_ADC_ConfigChannel+0x560>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	3301      	adds	r3, #1
 8001934:	069b      	lsls	r3, r3, #26
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800193a:	e015      	b.n	8001968 <HAL_ADC_ConfigChannel+0x58c>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800194a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800194e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e003      	b.n	8001960 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x5ac>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	3301      	adds	r3, #1
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	e017      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x5dc>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	61fb      	str	r3, [r7, #28]
  return result;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80019a0:	2320      	movs	r3, #32
 80019a2:	e003      	b.n	80019ac <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	ea42 0103 	orr.w	r1, r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10d      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x608>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0e9b      	lsrs	r3, r3, #26
 80019ce:	3301      	adds	r3, #1
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	3b1e      	subs	r3, #30
 80019dc:	051b      	lsls	r3, r3, #20
 80019de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	e01d      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x644>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	613b      	str	r3, [r7, #16]
  return result;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e005      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x630>
 8001a00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3b1e      	subs	r3, #30
 8001a1a:	051b      	lsls	r3, r3, #20
 8001a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a20:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f9f4 	bl	8000e14 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <HAL_ADC_ConfigChannel+0x76c>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d07c      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a38:	4844      	ldr	r0, [pc, #272]	@ (8001b4c <HAL_ADC_ConfigChannel+0x770>)
 8001a3a:	f7ff f949 	bl	8000cd0 <LL_ADC_GetCommonPathInternalCh>
 8001a3e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a42:	4843      	ldr	r0, [pc, #268]	@ (8001b50 <HAL_ADC_ConfigChannel+0x774>)
 8001a44:	f7ff fa98 	bl	8000f78 <LL_ADC_IsEnabled>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d15e      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a40      	ldr	r2, [pc, #256]	@ (8001b54 <HAL_ADC_ConfigChannel+0x778>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d127      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x6cc>
 8001a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d121      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a39      	ldr	r2, [pc, #228]	@ (8001b50 <HAL_ADC_ConfigChannel+0x774>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d161      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a76:	4619      	mov	r1, r3
 8001a78:	4834      	ldr	r0, [pc, #208]	@ (8001b4c <HAL_ADC_ConfigChannel+0x770>)
 8001a7a:	f7ff f916 	bl	8000caa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a7e:	4b36      	ldr	r3, [pc, #216]	@ (8001b58 <HAL_ADC_ConfigChannel+0x77c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	4a35      	ldr	r2, [pc, #212]	@ (8001b5c <HAL_ADC_ConfigChannel+0x780>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001aa6:	e044      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2c      	ldr	r2, [pc, #176]	@ (8001b60 <HAL_ADC_ConfigChannel+0x784>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x6fe>
 8001ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <HAL_ADC_ConfigChannel+0x774>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d134      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001acc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481e      	ldr	r0, [pc, #120]	@ (8001b4c <HAL_ADC_ConfigChannel+0x770>)
 8001ad4:	f7ff f8e9 	bl	8000caa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ad8:	e02b      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	@ (8001b64 <HAL_ADC_ConfigChannel+0x788>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d126      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
 8001ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d120      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <HAL_ADC_ConfigChannel+0x774>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d11b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001afe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b02:	4619      	mov	r1, r3
 8001b04:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <HAL_ADC_ConfigChannel+0x770>)
 8001b06:	f7ff f8d0 	bl	8000caa <LL_ADC_SetCommonPathInternalCh>
 8001b0a:	e012      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001b1e:	e008      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001b3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	37d8      	adds	r7, #216	@ 0xd8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	80080000 	.word	0x80080000
 8001b4c:	50040300 	.word	0x50040300
 8001b50:	50040000 	.word	0x50040000
 8001b54:	c7520000 	.word	0xc7520000
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	053e2d63 	.word	0x053e2d63
 8001b60:	cb840000 	.word	0xcb840000
 8001b64:	80000001 	.word	0x80000001

08001b68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f9fd 	bl	8000f78 <LL_ADC_IsEnabled>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d15e      	bne.n	8001c42 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <ADC_Enable+0xe4>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00d      	beq.n	8001bae <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e04a      	b.n	8001c44 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f9cc 	bl	8000f50 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bb8:	4825      	ldr	r0, [pc, #148]	@ (8001c50 <ADC_Enable+0xe8>)
 8001bba:	f7ff f889 	bl	8000cd0 <LL_ADC_GetCommonPathInternalCh>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00f      	beq.n	8001be8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc8:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <ADC_Enable+0xec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	4a22      	ldr	r2, [pc, #136]	@ (8001c58 <ADC_Enable+0xf0>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	099b      	lsrs	r3, r3, #6
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001bda:	e002      	b.n	8001be2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f800 	bl	8000bec <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bee:	e021      	b.n	8001c34 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f9bf 	bl	8000f78 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f9a3 	bl	8000f50 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c0a:	f7fe ffef 	bl	8000bec <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d90d      	bls.n	8001c34 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d1d6      	bne.n	8001bf0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	8000003f 	.word	0x8000003f
 8001c50:	50040300 	.word	0x50040300
 8001c54:	20000008 	.word	0x20000008
 8001c58:	053e2d63 	.word	0x053e2d63

08001c5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d14b      	bne.n	8001d0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f87e 	bl	8000d96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d12b      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11f      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cd2:	e018      	b.n	8001d06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7fe fa6a 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d0c:	e00e      	b.n	8001d2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fb54 	bl	80013c8 <HAL_ADC_ErrorCallback>
}
 8001d20:	e004      	b.n	8001d2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fb36 	bl	80013b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff fb26 	bl	80013c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff40 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff90 	bl	8001e78 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5f 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff33 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa4 	bl	8001ee0 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e08e      	b.n	80020d4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_DMA_Init+0x138>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d80f      	bhi.n	8001fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <HAL_DMA_Init+0x13c>)
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a45      	ldr	r2, [pc, #276]	@ (80020e4 <HAL_DMA_Init+0x140>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a42      	ldr	r2, [pc, #264]	@ (80020e8 <HAL_DMA_Init+0x144>)
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe0:	e00e      	b.n	8002000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_DMA_Init+0x148>)
 8001fea:	4413      	add	r3, r2
 8001fec:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <HAL_DMA_Init+0x140>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80020f0 <HAL_DMA_Init+0x14c>)
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800201a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f9b6 	bl	80023c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002060:	d102      	bne.n	8002068 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002074:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800207e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_DMA_Init+0x106>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d80c      	bhi.n	80020aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f9d5 	bl	8002440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	e008      	b.n	80020bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40020407 	.word	0x40020407
 80020e0:	bffdfff8 	.word	0xbffdfff8
 80020e4:	cccccccd 	.word	0xcccccccd
 80020e8:	40020000 	.word	0x40020000
 80020ec:	bffdfbf8 	.word	0xbffdfbf8
 80020f0:	40020400 	.word	0x40020400

080020f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Start_IT+0x20>
 8002110:	2302      	movs	r3, #2
 8002112:	e066      	b.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d155      	bne.n	80021d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f8fb 	bl	8002348 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 020e 	orr.w	r2, r2, #14
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e00f      	b.n	800218c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0204 	bic.w	r2, r2, #4
 800217a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 020a 	orr.w	r2, r2, #10
 800218a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f003 031c 	and.w	r3, r3, #28
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d026      	beq.n	8002264 <HAL_DMA_IRQHandler+0x7a>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d021      	beq.n	8002264 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0204 	bic.w	r2, r2, #4
 800223c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f003 021c 	and.w	r2, r3, #28
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2104      	movs	r1, #4
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	2b00      	cmp	r3, #0
 8002258:	d071      	beq.n	800233e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002262:	e06c      	b.n	800233e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f003 031c 	and.w	r3, r3, #28
 800226c:	2202      	movs	r2, #2
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02e      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xec>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d029      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 020a 	bic.w	r2, r2, #10
 800229e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f003 021c 	and.w	r2, r3, #28
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	2102      	movs	r1, #2
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d038      	beq.n	800233e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022d4:	e033      	b.n	800233e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	f003 031c 	and.w	r3, r3, #28
 80022de:	2208      	movs	r2, #8
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d02a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x156>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d025      	beq.n	8002340 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 020e 	bic.w	r2, r2, #14
 8002302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002308:	f003 021c 	and.w	r2, r3, #28
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f202 	lsl.w	r2, r1, r2
 8002316:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800233e:	bf00      	nop
 8002340:	bf00      	nop
}
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800235e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002370:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f003 021c 	and.w	r2, r3, #28
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d108      	bne.n	80023a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023a6:	e007      	b.n	80023b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d80a      	bhi.n	80023ee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023e4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6493      	str	r3, [r2, #72]	@ 0x48
 80023ec:	e007      	b.n	80023fe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	009a      	lsls	r2, r3, #2
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80023f8:	4413      	add	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3b08      	subs	r3, #8
 8002406:	4a0c      	ldr	r2, [pc, #48]	@ (8002438 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002414:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2201      	movs	r2, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40020407 	.word	0x40020407
 8002434:	4002081c 	.word	0x4002081c
 8002438:	cccccccd 	.word	0xcccccccd
 800243c:	40020880 	.word	0x40020880

08002440 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002450:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002464:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2201      	movs	r2, #1
 8002470:	409a      	lsls	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	1000823f 	.word	0x1000823f
 8002488:	40020940 	.word	0x40020940

0800248c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	e14c      	b.n	8002736 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 813e 	beq.w	8002730 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d005      	beq.n	80024cc <HAL_GPIO_Init+0x40>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d130      	bne.n	800252e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002502:	2201      	movs	r2, #1
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0201 	and.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d017      	beq.n	800256a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d123      	bne.n	80025be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8098 	beq.w	8002730 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002600:	4a54      	ldr	r2, [pc, #336]	@ (8002754 <HAL_GPIO_Init+0x2c8>)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	089b      	lsrs	r3, r3, #2
 8002606:	3302      	adds	r3, #2
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	220f      	movs	r2, #15
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800262a:	d019      	beq.n	8002660 <HAL_GPIO_Init+0x1d4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a4a      	ldr	r2, [pc, #296]	@ (8002758 <HAL_GPIO_Init+0x2cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_GPIO_Init+0x1d0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a49      	ldr	r2, [pc, #292]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d00d      	beq.n	8002658 <HAL_GPIO_Init+0x1cc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <HAL_GPIO_Init+0x2d4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <HAL_GPIO_Init+0x1c8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a47      	ldr	r2, [pc, #284]	@ (8002764 <HAL_GPIO_Init+0x2d8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_GPIO_Init+0x1c4>
 800264c:	2304      	movs	r3, #4
 800264e:	e008      	b.n	8002662 <HAL_GPIO_Init+0x1d6>
 8002650:	2307      	movs	r3, #7
 8002652:	e006      	b.n	8002662 <HAL_GPIO_Init+0x1d6>
 8002654:	2303      	movs	r3, #3
 8002656:	e004      	b.n	8002662 <HAL_GPIO_Init+0x1d6>
 8002658:	2302      	movs	r3, #2
 800265a:	e002      	b.n	8002662 <HAL_GPIO_Init+0x1d6>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_GPIO_Init+0x1d6>
 8002660:	2300      	movs	r3, #0
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	f002 0203 	and.w	r2, r2, #3
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	4093      	lsls	r3, r2
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002672:	4938      	ldr	r1, [pc, #224]	@ (8002754 <HAL_GPIO_Init+0x2c8>)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002680:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a4:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ce:	4a26      	ldr	r2, [pc, #152]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026d4:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 8002704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <HAL_GPIO_Init+0x2dc>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	f47f aeab 	bne.w	800249c <HAL_GPIO_Init+0x10>
  }
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40010000 	.word	0x40010000
 8002758:	48000400 	.word	0x48000400
 800275c:	48000800 	.word	0x48000800
 8002760:	48000c00 	.word	0x48000c00
 8002764:	48001000 	.word	0x48001000
 8002768:	58000800 	.word	0x58000800

0800276c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e001      	b.n	800278e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0c0      	b.n	8002930 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f008 fa04 	bl	800abd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 ff66 	bl	80066a6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e03e      	b.n	800285e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3311      	adds	r3, #17
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	3310      	adds	r3, #16
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	3313      	adds	r3, #19
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	3320      	adds	r3, #32
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	3324      	adds	r3, #36	@ 0x24
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	3301      	adds	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	791b      	ldrb	r3, [r3, #4]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3bb      	bcc.n	80027e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e044      	b.n	80028f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	3301      	adds	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	791b      	ldrb	r3, [r3, #4]
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3b5      	bcc.n	800286e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3304      	adds	r3, #4
 800290a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800290e:	f003 fee5 	bl	80066dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7a9b      	ldrb	r3, [r3, #10]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fc44 	bl	80041b6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_PCD_Start+0x16>
 800294a:	2302      	movs	r3, #2
 800294c:	e012      	b.n	8002974 <HAL_PCD_Start+0x3c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fe8c 	bl	8006678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f006 f94c 	bl	8008c02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f006 f951 	bl	8008c30 <USB_ReadInterrupts>
 800298e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb08 	bl	8002fb0 <PCD_EP_ISR_Handler>

    return;
 80029a0:	e110      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029be:	b292      	uxth	r2, r2
 80029c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f008 f990 	bl	800acea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029ca:	2100      	movs	r1, #0
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8fc 	bl	8002bca <HAL_PCD_SetAddress>

    return;
 80029d2:	e0f7      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029f0:	b292      	uxth	r2, r2
 80029f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029f6:	e0e5      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a14:	b292      	uxth	r2, r2
 8002a16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a1a:	e0d3      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d034      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	b292      	uxth	r2, r2
 8002a52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f008 fb0e 	bl	800b08c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f008 f973 	bl	800ad5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a8e:	e099      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d027      	beq.n	8002aea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0208 	orr.w	r2, r2, #8
 8002aac:	b292      	uxth	r2, r2
 8002aae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0204 	orr.w	r2, r2, #4
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f008 f920 	bl	800ad28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ae8:	e06c      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d040      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12b      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0204 	orr.w	r2, r2, #4
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0208 	orr.w	r2, r2, #8
 8002b40:	b292      	uxth	r2, r2
 8002b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b64:	2101      	movs	r1, #1
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f008 fa90 	bl	800b08c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b6c:	e02a      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f008 f8da 	bl	800ad28 <HAL_PCD_SuspendCallback>
    return;
 8002b74:	e026      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b92:	b292      	uxth	r2, r2
 8002b94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f008 f898 	bl	800acce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b9e:	e011      	b.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bc2:	bf00      	nop
  }
}
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_PCD_SetAddress+0x1a>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e012      	b.n	8002c0a <HAL_PCD_SetAddress+0x40>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f005 ffed 	bl	8008bda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	4608      	mov	r0, r1
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	70fb      	strb	r3, [r7, #3]
 8002c24:	460b      	mov	r3, r1
 8002c26:	803b      	strh	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da0e      	bge.n	8002c56 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 0207 	and.w	r2, r3, #7
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	3310      	adds	r3, #16
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	705a      	strb	r2, [r3, #1]
 8002c54:	e00e      	b.n	8002c74 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 0207 	and.w	r2, r3, #7
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c80:	883a      	ldrh	r2, [r7, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	78ba      	ldrb	r2, [r7, #2]
 8002c8a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c8c:	78bb      	ldrb	r3, [r7, #2]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_Open+0x94>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_Open+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f003 fd2f 	bl	8006718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0e      	bge.n	8002cfe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 0207 	and.w	r2, r3, #7
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	3310      	adds	r3, #16
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	705a      	strb	r2, [r3, #1]
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0207 	and.w	r2, r3, #7
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_Close+0x6a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00e      	b.n	8002d54 <HAL_PCD_EP_Close+0x88>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 f8ab 	bl	8006ea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 0207 	and.w	r2, r3, #7
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fa63 	bl	800727a <USB_EPStartXfer>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	f003 0207 	and.w	r2, r3, #7
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	3310      	adds	r3, #16
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2201      	movs	r2, #1
 8002e08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fa2c 	bl	800727a <USB_EPStartXfer>

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	7912      	ldrb	r2, [r2, #4]
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03e      	b.n	8002ec8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da0e      	bge.n	8002e70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 0207 	and.w	r2, r3, #7
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	3310      	adds	r3, #16
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	705a      	strb	r2, [r3, #1]
 8002e6e:	e00c      	b.n	8002e8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_PCD_EP_SetStall+0x7e>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e00e      	b.n	8002ec8 <HAL_PCD_EP_SetStall+0x9c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fd8f 	bl	80089dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	7912      	ldrb	r2, [r2, #4]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e040      	b.n	8002f70 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0e      	bge.n	8002f14 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 0207 	and.w	r2, r3, #7
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	3310      	adds	r3, #16
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	705a      	strb	r2, [r3, #1]
 8002f12:	e00e      	b.n	8002f32 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0207 	and.w	r2, r3, #7
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_PCD_EP_ClrStall+0x82>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e00e      	b.n	8002f70 <HAL_PCD_EP_ClrStall+0xa0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f005 fd8c 	bl	8008a7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f005 fe63 	bl	8008c50 <USB_ActivateRemoteWakeup>
 8002f8a:	4603      	mov	r3, r0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fe6a 	bl	8008c7a <USB_DeActivateRemoteWakeup>
 8002fa6:	4603      	mov	r3, r0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b096      	sub	sp, #88	@ 0x58
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fb8:	e3ad      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 816f 	bne.w	80032bc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d14c      	bne.n	8003084 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffa:	81fb      	strh	r3, [r7, #14]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3310      	adds	r3, #16
 8003012:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4413      	add	r3, r2
 800302e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	441a      	add	r2, r3
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800304a:	2100      	movs	r1, #0
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f007 fe24 	bl	800ac9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7b1b      	ldrb	r3, [r3, #12]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 835c 	beq.w	8003716 <PCD_EP_ISR_Handler+0x766>
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 8357 	bne.w	8003716 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	731a      	strb	r2, [r3, #12]
 8003082:	e348      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800308a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003096:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800309a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d032      	beq.n	8003108 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f005 fe23 	bl	8008d28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80030ee:	4013      	ands	r3, r2
 80030f0:	823b      	strh	r3, [r7, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	8a3a      	ldrh	r2, [r7, #16]
 80030f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030fc:	b292      	uxth	r2, r2
 80030fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f007 fd9d 	bl	800ac40 <HAL_PCD_SetupStageCallback>
 8003106:	e306      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003108:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800310c:	2b00      	cmp	r3, #0
 800310e:	f280 8302 	bge.w	8003716 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29a      	uxth	r2, r3
 800311a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800311e:	4013      	ands	r3, r2
 8003120:	83fb      	strh	r3, [r7, #30]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	8bfa      	ldrh	r2, [r7, #30]
 8003128:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800312c:	b292      	uxth	r2, r2
 800312e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4413      	add	r3, r2
 800314a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003156:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d019      	beq.n	8003194 <PCD_EP_ISR_Handler+0x1e4>
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	6959      	ldr	r1, [r3, #20]
 8003170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003172:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003178:	b29b      	uxth	r3, r3
 800317a:	f005 fdd5 	bl	8008d28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	441a      	add	r2, r3
 8003188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f007 fd68 	bl	800ac64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800319e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 82b5 	bne.w	8003716 <PCD_EP_ISR_Handler+0x766>
 80031ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031b0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031b8:	f000 82ad 	beq.w	8003716 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80031f2:	d91d      	bls.n	8003230 <PCD_EP_ISR_Handler+0x280>
 80031f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <PCD_EP_ISR_Handler+0x25e>
 8003208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320a:	3b01      	subs	r3, #1
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29a      	uxth	r2, r3
 8003214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003216:	b29b      	uxth	r3, r3
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	b29b      	uxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003228:	b29a      	uxth	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e026      	b.n	800327e <PCD_EP_ISR_Handler+0x2ce>
 8003230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <PCD_EP_ISR_Handler+0x29e>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003246:	b29a      	uxth	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	e017      	b.n	800327e <PCD_EP_ISR_Handler+0x2ce>
 800324e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	647b      	str	r3, [r7, #68]	@ 0x44
 8003256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <PCD_EP_ISR_Handler+0x2b8>
 8003262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003264:	3301      	adds	r3, #1
 8003266:	647b      	str	r3, [r7, #68]	@ 0x44
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003270:	b29b      	uxth	r3, r3
 8003272:	029b      	lsls	r3, r3, #10
 8003274:	b29b      	uxth	r3, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	b29a      	uxth	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	827b      	strh	r3, [r7, #18]
 8003290:	8a7b      	ldrh	r3, [r7, #18]
 8003292:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003296:	827b      	strh	r3, [r7, #18]
 8003298:	8a7b      	ldrh	r3, [r7, #18]
 800329a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800329e:	827b      	strh	r3, [r7, #18]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	8a7b      	ldrh	r3, [r7, #18]
 80032a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]
 80032ba:	e22c      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f280 80f6 	bge.w	80034c6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80032f0:	4013      	ands	r3, r2
 80032f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003308:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800330c:	b292      	uxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003310:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003328:	7b1b      	ldrb	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d123      	bne.n	8003376 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	4413      	add	r3, r2
 8003348:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003352:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003356:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808e 	beq.w	800347c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003366:	6959      	ldr	r1, [r3, #20]
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	88da      	ldrh	r2, [r3, #6]
 800336c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003370:	f005 fcda 	bl	8008d28 <USB_ReadPMA>
 8003374:	e082      	b.n	800347c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	78db      	ldrb	r3, [r3, #3]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d10a      	bne.n	8003394 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800337e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003382:	461a      	mov	r2, r3
 8003384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9d3 	bl	8003732 <HAL_PCD_EP_DB_Receive>
 800338c:	4603      	mov	r3, r0
 800338e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003392:	e073      	b.n	800347c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80033c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d022      	beq.n	8003438 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	4413      	add	r3, r2
 800340c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003416:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800341a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d02c      	beq.n	800347c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003428:	6959      	ldr	r1, [r3, #20]
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	891a      	ldrh	r2, [r3, #8]
 800342e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003432:	f005 fc79 	bl	8008d28 <USB_ReadPMA>
 8003436:	e021      	b.n	800347c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	4413      	add	r3, r2
 8003452:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003460:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	6959      	ldr	r1, [r3, #20]
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	895a      	ldrh	r2, [r3, #10]
 8003474:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003478:	f005 fc56 	bl	8008d28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003484:	441a      	add	r2, r3
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800348a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003492:	441a      	add	r2, r3
 8003494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003496:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <PCD_EP_ISR_Handler+0x4fc>
 80034a0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d206      	bcs.n	80034ba <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f007 fbd6 	bl	800ac64 <HAL_PCD_DataOutStageCallback>
 80034b8:	e005      	b.n	80034c6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 feda 	bl	800727a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8121 	beq.w	8003716 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80034d4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	3310      	adds	r3, #16
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003502:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003520:	b29b      	uxth	r3, r3
 8003522:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 80a2 	bne.w	8003672 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003536:	7b1b      	ldrb	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8093 	beq.w	8003664 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800353e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d046      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d126      	bne.n	80035a0 <PCD_EP_ISR_Handler+0x5f0>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	4413      	add	r3, r2
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	00da      	lsls	r2, r3, #3
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	4413      	add	r3, r2
 8003574:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003584:	b29a      	uxth	r2, r3
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003598:	b29a      	uxth	r2, r3
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	e061      	b.n	8003664 <PCD_EP_ISR_Handler+0x6b4>
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d15d      	bne.n	8003664 <PCD_EP_ISR_Handler+0x6b4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	4413      	add	r3, r2
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00da      	lsls	r2, r3, #3
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	4413      	add	r3, r2
 80035ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	e045      	b.n	8003664 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d126      	bne.n	8003634 <PCD_EP_ISR_Handler+0x684>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	4413      	add	r3, r2
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003606:	4413      	add	r3, r2
 8003608:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800360c:	633b      	str	r3, [r7, #48]	@ 0x30
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003618:	b29a      	uxth	r2, r3
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362c:	b29a      	uxth	r2, r3
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	e017      	b.n	8003664 <PCD_EP_ISR_Handler+0x6b4>
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d113      	bne.n	8003664 <PCD_EP_ISR_Handler+0x6b4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003644:	b29b      	uxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	4413      	add	r3, r2
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003656:	4413      	add	r3, r2
 8003658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f007 fb15 	bl	800ac9a <HAL_PCD_DataInStageCallback>
 8003670:	e051      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d144      	bne.n	8003708 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d907      	bls.n	80036c2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80036b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036be:	619a      	str	r2, [r3, #24]
 80036c0:	e002      	b.n	80036c8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f007 fadf 	bl	800ac9a <HAL_PCD_DataInStageCallback>
 80036dc:	e01b      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036e6:	441a      	add	r2, r3
 80036e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036f4:	441a      	add	r2, r3
 80036f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003700:	4618      	mov	r0, r3
 8003702:	f003 fdba 	bl	800727a <USB_EPStartXfer>
 8003706:	e006      	b.n	8003716 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003708:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800370c:	461a      	mov	r2, r3
 800370e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f917 	bl	8003944 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21b      	sxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	f6ff ac49 	blt.w	8002fba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3758      	adds	r7, #88	@ 0x58
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d07c      	beq.n	8003844 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	8b7b      	ldrh	r3, [r7, #26]
 8003776:	429a      	cmp	r2, r3
 8003778:	d306      	bcc.n	8003788 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	8b7b      	ldrh	r3, [r7, #26]
 8003780:	1ad2      	subs	r2, r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	619a      	str	r2, [r3, #24]
 8003786:	e002      	b.n	800378e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d123      	bne.n	80037de <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b0:	833b      	strh	r3, [r7, #24]
 80037b2:	8b3b      	ldrh	r3, [r7, #24]
 80037b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80037b8:	833b      	strh	r3, [r7, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	441a      	add	r2, r3
 80037c8:	8b3b      	ldrh	r3, [r7, #24]
 80037ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01f      	beq.n	8003828 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	82fb      	strh	r3, [r7, #22]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	8afb      	ldrh	r3, [r7, #22]
 8003814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800381c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003820:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003828:	8b7b      	ldrh	r3, [r7, #26]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8085 	beq.w	800393a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6959      	ldr	r1, [r3, #20]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	891a      	ldrh	r2, [r3, #8]
 800383c:	8b7b      	ldrh	r3, [r7, #26]
 800383e:	f005 fa73 	bl	8008d28 <USB_ReadPMA>
 8003842:	e07a      	b.n	800393a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4413      	add	r3, r2
 800385e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003868:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	8b7b      	ldrh	r3, [r7, #26]
 8003870:	429a      	cmp	r2, r3
 8003872:	d306      	bcc.n	8003882 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	8b7b      	ldrh	r3, [r7, #26]
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	619a      	str	r2, [r3, #24]
 8003880:	e002      	b.n	8003888 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d123      	bne.n	80038d8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	83fb      	strh	r3, [r7, #30]
 80038ac:	8bfb      	ldrh	r3, [r7, #30]
 80038ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038b2:	83fb      	strh	r3, [r7, #30]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	8bfb      	ldrh	r3, [r7, #30]
 80038c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11f      	bne.n	8003922 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fc:	83bb      	strh	r3, [r7, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	8bbb      	ldrh	r3, [r7, #28]
 800390e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800391a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003922:	8b7b      	ldrh	r3, [r7, #26]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6959      	ldr	r1, [r3, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	895a      	ldrh	r2, [r3, #10]
 8003934:	8b7b      	ldrh	r3, [r7, #26]
 8003936:	f005 f9f7 	bl	8008d28 <USB_ReadPMA>
    }
  }

  return count;
 800393a:	8b7b      	ldrh	r3, [r7, #26]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0a4      	sub	sp, #144	@ 0x90
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 81db 	beq.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	4413      	add	r3, r2
 8003978:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800398e:	429a      	cmp	r2, r3
 8003990:	d907      	bls.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800399a:	1ad2      	subs	r2, r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	619a      	str	r2, [r3, #24]
 80039a0:	e002      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 80b9 	bne.w	8003b24 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d126      	bne.n	8003a08 <HAL_PCD_EP_DB_Transmit+0xc4>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ce:	4413      	add	r3, r2
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	00da      	lsls	r2, r3, #3
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	4413      	add	r3, r2
 80039dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	e01a      	b.n	8003a3e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d116      	bne.n	8003a3e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	4413      	add	r3, r2
 8003a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	00da      	lsls	r2, r3, #3
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	4413      	add	r3, r2
 8003a32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d126      	bne.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x156>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	00da      	lsls	r2, r3, #3
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	e017      	b.n	8003aca <HAL_PCD_EP_DB_Transmit+0x186>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d113      	bne.n	8003aca <HAL_PCD_EP_DB_Transmit+0x186>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	4413      	add	r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00da      	lsls	r2, r3, #3
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	4413      	add	r3, r2
 8003abe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f007 f8e2 	bl	800ac9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 82fa 	beq.w	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afc:	82fb      	strh	r3, [r7, #22]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	8afb      	ldrh	r3, [r7, #22]
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]
 8003b22:	e2d8      	b.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d021      	beq.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 82ac 	bne.w	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b86:	441a      	add	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b94:	441a      	add	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6a1a      	ldr	r2, [r3, #32]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d30b      	bcc.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	621a      	str	r2, [r3, #32]
 8003bbc:	e017      	b.n	8003bee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003bc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003bd6:	e00a      	b.n	8003bee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d165      	bne.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0a:	4413      	add	r3, r2
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	00da      	lsls	r2, r3, #3
 8003c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c16:	4413      	add	r3, r2
 8003c18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c32:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c34:	d91d      	bls.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e044      	b.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	e035      	b.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_PCD_EP_DB_Transmit+0x366>
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbe:	801a      	strh	r2, [r3, #0]
 8003cc0:	e01c      	b.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	785b      	ldrb	r3, [r3, #1]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d118      	bne.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cde:	4413      	add	r3, r2
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	00da      	lsls	r2, r3, #3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cea:	4413      	add	r3, r2
 8003cec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cfa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6959      	ldr	r1, [r3, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	891a      	ldrh	r2, [r3, #8]
 8003d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f004 ffc9 	bl	8008ca4 <USB_WritePMA>
 8003d12:	e1e0      	b.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d38:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d307      	bcc.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	619a      	str	r2, [r3, #24]
 8003d56:	e002      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 80c0 	bne.w	8003ee8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d126      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x47a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d84:	4413      	add	r3, r2
 8003d86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00da      	lsls	r2, r3, #3
 8003d8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e01a      	b.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d116      	bne.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dda:	4413      	add	r3, r2
 8003ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00da      	lsls	r2, r3, #3
 8003de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003de6:	4413      	add	r3, r2
 8003de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003df0:	2200      	movs	r2, #0
 8003df2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d12b      	bne.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x516>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e16:	4413      	add	r3, r2
 8003e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00da      	lsls	r2, r3, #3
 8003e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e22:	4413      	add	r3, r2
 8003e24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e017      	b.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x546>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d113      	bne.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x546>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e70:	4413      	add	r3, r2
 8003e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	00da      	lsls	r2, r3, #3
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e82:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e86:	2200      	movs	r2, #0
 8003e88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f006 ff02 	bl	800ac9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 811a 	bne.w	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ebc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
 8003ee6:	e0f6      	b.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d121      	bne.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f040 80ca 	bne.w	80040d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f58:	441a      	add	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d30b      	bcc.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	621a      	str	r2, [r3, #32]
 8003f80:	e017      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f9a:	e00a      	b.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d165      	bne.n	800408c <HAL_PCD_EP_DB_Transmit+0x748>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd4:	4413      	add	r3, r2
 8003fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	00da      	lsls	r2, r3, #3
 8003fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fe6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ffe:	d91d      	bls.n	800403c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004016:	3b01      	subs	r3, #1
 8004018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800401a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29a      	uxth	r2, r3
 8004020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004022:	b29b      	uxth	r3, r3
 8004024:	029b      	lsls	r3, r3, #10
 8004026:	b29b      	uxth	r3, r3
 8004028:	4313      	orrs	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	e041      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_PCD_EP_DB_Transmit+0x716>
 8004044:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004052:	b29a      	uxth	r2, r3
 8004054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e032      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800405a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_PCD_EP_DB_Transmit+0x730>
 800406e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004070:	3301      	adds	r3, #1
 8004072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29a      	uxth	r2, r3
 800407a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800407c:	b29b      	uxth	r3, r3
 800407e:	029b      	lsls	r3, r3, #10
 8004080:	b29b      	uxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b29a      	uxth	r2, r3
 8004086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	e019      	b.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d115      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	4413      	add	r3, r2
 80040a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	00da      	lsls	r2, r3, #3
 80040ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ae:	4413      	add	r3, r2
 80040b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6959      	ldr	r1, [r3, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	895a      	ldrh	r2, [r3, #10]
 80040cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f004 fde7 	bl	8008ca4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f0:	82bb      	strh	r3, [r7, #20]
 80040f2:	8abb      	ldrh	r3, [r7, #20]
 80040f4:	f083 0310 	eor.w	r3, r3, #16
 80040f8:	82bb      	strh	r3, [r7, #20]
 80040fa:	8abb      	ldrh	r3, [r7, #20]
 80040fc:	f083 0320 	eor.w	r3, r3, #32
 8004100:	82bb      	strh	r3, [r7, #20]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	8abb      	ldrh	r3, [r7, #20]
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800411e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3790      	adds	r7, #144	@ 0x90
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	4613      	mov	r3, r2
 8004140:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	f003 0207 	and.w	r2, r3, #7
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	3310      	adds	r3, #16
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e009      	b.n	800417a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004166:	897a      	ldrh	r2, [r7, #10]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800417a:	893b      	ldrh	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	b29a      	uxth	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	80da      	strh	r2, [r3, #6]
 800418e:	e00b      	b.n	80041a8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2201      	movs	r2, #1
 8004194:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	b29a      	uxth	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f043 0302 	orr.w	r3, r3, #2
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a04      	ldr	r2, [pc, #16]	@ (8004228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421a:	6013      	str	r3, [r2, #0]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	58000400 	.word	0x58000400

0800422c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <HAL_PWREx_GetVoltageRange+0x18>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58000400 	.word	0x58000400

08004248 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_PWREx_EnableVddUSB+0x1c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004256:	6053      	str	r3, [r2, #4]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58000400 	.word	0x58000400

08004268 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800427a:	d101      	bne.n	8004280 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800429a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042da:	d101      	bne.n	80042e0 <LL_RCC_HSE_IsReady+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <LL_RCC_HSE_IsReady+0x1a>
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fe:	6013      	str	r3, [r2, #0]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433a:	d101      	bne.n	8004340 <LL_RCC_HSI_IsReady+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_RCC_HSI_IsReady+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d101      	bne.n	80043d2 <LL_RCC_HSI48_IsReady+0x18>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <LL_RCC_HSI48_IsReady+0x1a>
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d101      	bne.n	800447e <LL_RCC_LSE_IsReady+0x18>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_RCC_LSE_IsReady+0x1a>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d101      	bne.n	80044e6 <LL_RCC_LSI1_IsReady+0x18>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_RCC_LSI1_IsReady+0x1a>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80044f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b08      	cmp	r3, #8
 8004548:	d101      	bne.n	800454e <LL_RCC_LSI2_IsReady+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_RCC_LSI2_IsReady+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800456a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d101      	bne.n	80045da <LL_RCC_MSI_IsReady+0x16>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <LL_RCC_MSI_IsReady+0x18>
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800461e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2bb0      	cmp	r3, #176	@ 0xb0
 8004624:	d901      	bls.n	800462a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004626:	23b0      	movs	r3, #176	@ 0xb0
 8004628:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800462a:	687b      	ldr	r3, [r7, #4]
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80046da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004702:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004706:	f023 020f 	bic.w	r2, r3, #15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	608b      	str	r3, [r1, #8]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004794:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d8:	6013      	str	r3, [r2, #0]
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047f6:	d101      	bne.n	80047fc <LL_RCC_PLL_IsReady+0x18>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <LL_RCC_PLL_IsReady+0x1a>
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0303 	and.w	r3, r3, #3
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d101      	bne.n	8004882 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004896:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048a2:	d101      	bne.n	80048a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048c8:	d101      	bne.n	80048ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ec:	d101      	bne.n	80048f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004910:	d101      	bne.n	8004916 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b08d      	sub	sp, #52	@ 0x34
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e363      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 808d 	beq.w	8004a5e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004944:	f7ff fea1 	bl	800468a <LL_RCC_GetSysClkSource>
 8004948:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494a:	f7ff ff82 	bl	8004852 <LL_RCC_PLL_GetMainSource>
 800494e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_RCC_OscConfig+0x3e>
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d147      	bne.n	80049ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	2b01      	cmp	r3, #1
 8004960:	d144      	bne.n	80049ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e347      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004972:	f7ff fe4c 	bl	800460e <LL_RCC_MSI_GetRange>
 8004976:	4603      	mov	r3, r0
 8004978:	429c      	cmp	r4, r3
 800497a:	d914      	bls.n	80049a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fd03 	bl	800538c <RCC_SetFlashLatencyFromMSIRange>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e336      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fe26 	bl	80045e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fe4a 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>
 80049a4:	e013      	b.n	80049ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe1b 	bl	80045e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fe3f 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fce4 	bl	800538c <RCC_SetFlashLatencyFromMSIRange>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e317      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049ce:	f000 fcc9 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4aa4      	ldr	r2, [pc, #656]	@ (8004c68 <HAL_RCC_OscConfig+0x344>)
 80049d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049d8:	4ba4      	ldr	r3, [pc, #656]	@ (8004c6c <HAL_RCC_OscConfig+0x348>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc f8b7 	bl	8000b50 <HAL_InitTick>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d039      	beq.n	8004a5c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e308      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01e      	beq.n	8004a32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049f4:	f7ff fdc8 	bl	8004588 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f8:	f7fc f8f8 	bl	8000bec <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a00:	f7fc f8f4 	bl	8000bec <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e2f5      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a12:	f7ff fdd7 	bl	80045c4 <LL_RCC_MSI_IsReady>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f1      	beq.n	8004a00 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fde0 	bl	80045e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe04 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a32:	f7ff fdb8 	bl	80045a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a36:	f7fc f8d9 	bl	8000bec <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a3e:	f7fc f8d5 	bl	8000bec <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e2d6      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a50:	f7ff fdb8 	bl	80045c4 <LL_RCC_MSI_IsReady>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f1      	bne.n	8004a3e <HAL_RCC_OscConfig+0x11a>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a5c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d047      	beq.n	8004afa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a6a:	f7ff fe0e 	bl	800468a <LL_RCC_GetSysClkSource>
 8004a6e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a70:	f7ff feef 	bl	8004852 <LL_RCC_PLL_GetMainSource>
 8004a74:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x164>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d108      	bne.n	8004a94 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d134      	bne.n	8004afa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e2b4      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d102      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x180>
 8004a9e:	f7ff fbf5 	bl	800428c <LL_RCC_HSE_Enable>
 8004aa2:	e001      	b.n	8004aa8 <HAL_RCC_OscConfig+0x184>
 8004aa4:	f7ff fc01 	bl	80042aa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fc f89c 	bl	8000bec <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fc f898 	bl	8000bec <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	@ 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e299      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004aca:	f7ff fbfd 	bl	80042c8 <LL_RCC_HSE_IsReady>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f1      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x194>
 8004ad4:	e011      	b.n	8004afa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fc f889 	bl	8000bec <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ade:	f7fc f885 	bl	8000bec <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b64      	cmp	r3, #100	@ 0x64
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e286      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004af0:	f7ff fbea 	bl	80042c8 <LL_RCC_HSE_IsReady>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f1      	bne.n	8004ade <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b06:	f7ff fdc0 	bl	800468a <LL_RCC_GetSysClkSource>
 8004b0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0c:	f7ff fea1 	bl	8004852 <LL_RCC_PLL_GetMainSource>
 8004b10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x200>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d10e      	bne.n	8004b3c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e266      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fc09 	bl	800434c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b3a:	e031      	b.n	8004ba0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d019      	beq.n	8004b78 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	f7ff fbd2 	bl	80042ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fc f850 	bl	8000bec <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fc f84c 	bl	8000bec <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e24d      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b62:	f7ff fbe1 	bl	8004328 <LL_RCC_HSI_IsReady>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f1      	beq.n	8004b50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fbeb 	bl	800434c <LL_RCC_HSI_SetCalibTrimming>
 8004b76:	e013      	b.n	8004ba0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b78:	f7ff fbc7 	bl	800430a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fc f836 	bl	8000bec <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b84:	f7fc f832 	bl	8000bec <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e233      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b96:	f7ff fbc7 	bl	8004328 <LL_RCC_HSI_IsReady>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f1      	bne.n	8004b84 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a3 	beq.w	8004d00 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d076      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d046      	beq.n	8004c5c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004bce:	f7ff fc7e 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d113      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004bd8:	f7ff fc57 	bl	800448a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bdc:	f7fc f806 	bl	8000bec <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004be4:	f7fc f802 	bl	8000bec <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e203      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bf6:	f7ff fc6a 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f1      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004c00:	f7ff fc77 	bl	80044f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fb fff2 	bl	8000bec <HAL_GetTick>
 8004c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c0c:	f7fb ffee 	bl	8000bec <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e1ef      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c1e:	f7ff fc8a 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f1      	beq.n	8004c0c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fc94 	bl	800455a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c32:	f7ff fc3b 	bl	80044ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fb ffd9 	bl	8000bec <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c3e:	f7fb ffd5 	bl	8000bec <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1d6      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c50:	f7ff fc3d 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f1      	bne.n	8004c3e <HAL_RCC_OscConfig+0x31a>
 8004c5a:	e051      	b.n	8004d00 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c5c:	f7ff fc15 	bl	800448a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fb ffc4 	bl	8000bec <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c66:	e00c      	b.n	8004c82 <HAL_RCC_OscConfig+0x35e>
 8004c68:	20000008 	.word	0x20000008
 8004c6c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c70:	f7fb ffbc 	bl	8000bec <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1bd      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c82:	f7ff fc24 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f1      	beq.n	8004c70 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004c8c:	f7ff fc42 	bl	8004514 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c92:	f7fb ffab 	bl	8000bec <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e1ac      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ca4:	f7ff fc47 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f1      	bne.n	8004c92 <HAL_RCC_OscConfig+0x36e>
 8004cae:	e027      	b.n	8004d00 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004cb0:	f7ff fc30 	bl	8004514 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fb ff9a 	bl	8000bec <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cbc:	f7fb ff96 	bl	8000bec <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e197      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cce:	f7ff fc32 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f1      	bne.n	8004cbc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004cd8:	f7ff fbe8 	bl	80044ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fb ff86 	bl	8000bec <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ce4:	f7fb ff82 	bl	8000bec <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e183      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cf6:	f7ff fbea 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f1      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d05b      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0c:	4ba7      	ldr	r3, [pc, #668]	@ (8004fac <HAL_RCC_OscConfig+0x688>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d114      	bne.n	8004d42 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d18:	f7ff fa78 	bl	800420c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1c:	f7fb ff66 	bl	8000bec <HAL_GetTick>
 8004d20:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fb ff62 	bl	8000bec <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e163      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	4b9d      	ldr	r3, [pc, #628]	@ (8004fac <HAL_RCC_OscConfig+0x688>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d102      	bne.n	8004d50 <HAL_RCC_OscConfig+0x42c>
 8004d4a:	f7ff fb48 	bl	80043de <LL_RCC_LSE_Enable>
 8004d4e:	e00c      	b.n	8004d6a <HAL_RCC_OscConfig+0x446>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d104      	bne.n	8004d62 <HAL_RCC_OscConfig+0x43e>
 8004d58:	f7ff fb63 	bl	8004422 <LL_RCC_LSE_EnableBypass>
 8004d5c:	f7ff fb3f 	bl	80043de <LL_RCC_LSE_Enable>
 8004d60:	e003      	b.n	8004d6a <HAL_RCC_OscConfig+0x446>
 8004d62:	f7ff fb4d 	bl	8004400 <LL_RCC_LSE_Disable>
 8004d66:	f7ff fb6d 	bl	8004444 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d014      	beq.n	8004d9c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fb ff3b 	bl	8000bec <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fb ff37 	bl	8000bec <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e136      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d90:	f7ff fb69 	bl	8004466 <LL_RCC_LSE_IsReady>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ef      	beq.n	8004d7a <HAL_RCC_OscConfig+0x456>
 8004d9a:	e013      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fb ff26 	bl	8000bec <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fb ff22 	bl	8000bec <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e121      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dba:	f7ff fb54 	bl	8004466 <LL_RCC_LSE_IsReady>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ef      	bne.n	8004da4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dd8:	f7ff facd 	bl	8004376 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fb ff06 	bl	8000bec <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de4:	f7fb ff02 	bl	8000bec <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e103      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004df6:	f7ff fae0 	bl	80043ba <LL_RCC_HSI48_IsReady>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f1      	beq.n	8004de4 <HAL_RCC_OscConfig+0x4c0>
 8004e00:	e013      	b.n	8004e2a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e02:	f7ff fac9 	bl	8004398 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fb fef1 	bl	8000bec <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0e:	f7fb feed 	bl	8000bec <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0ee      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e20:	f7ff facb 	bl	80043ba <LL_RCC_HSI48_IsReady>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f1      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80e4 	beq.w	8004ffc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e34:	f7ff fc29 	bl	800468a <LL_RCC_GetSysClkSource>
 8004e38:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	f040 80b4 	bne.w	8004fb4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0203 	and.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d123      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d11c      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d114      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d05d      	beq.n	8004f5e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d058      	beq.n	8004f5a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0a1      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eba:	f7ff fc84 	bl	80047c6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ebe:	f7fb fe95 	bl	8000bec <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fb fe91 	bl	8000bec <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e092      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ef      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <HAL_RCC_OscConfig+0x68c>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004efe:	0212      	lsls	r2, r2, #8
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f06:	4311      	orrs	r1, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f12:	430a      	orrs	r2, r1
 8004f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f1c:	f7ff fc44 	bl	80047a8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f30:	f7fb fe5c 	bl	8000bec <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fb fe58 	bl	8000bec <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e059      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ef      	beq.n	8004f38 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f58:	e050      	b.n	8004ffc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e04f      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d147      	bne.n	8004ffc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f6c:	f7ff fc1c 	bl	80047a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f80:	f7fb fe34 	bl	8000bec <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fb fe30 	bl	8000bec <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e031      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ef      	beq.n	8004f88 <HAL_RCC_OscConfig+0x664>
 8004fa8:	e028      	b.n	8004ffc <HAL_RCC_OscConfig+0x6d8>
 8004faa:	bf00      	nop
 8004fac:	58000400 	.word	0x58000400
 8004fb0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d01e      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	f7ff fc04 	bl	80047c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fb fe15 	bl	8000bec <HAL_GetTick>
 8004fc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7fb fe11 	bl	8000bec <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e012      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1ef      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_OscConfig+0x6e4>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	60cb      	str	r3, [r1, #12]
 8004ff6:	e001      	b.n	8004ffc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3734      	adds	r7, #52	@ 0x34
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	bf00      	nop
 8005008:	eefefffc 	.word	0xeefefffc

0800500c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e12d      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b98      	ldr	r3, [pc, #608]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d91b      	bls.n	8005066 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b95      	ldr	r3, [pc, #596]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4993      	ldr	r1, [pc, #588]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fb fdd5 	bl	8000bec <HAL_GetTick>
 8005042:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005044:	e008      	b.n	8005058 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005046:	f7fb fdd1 	bl	8000bec <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e111      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005058:	4b8a      	ldr	r3, [pc, #552]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d1ef      	bne.n	8005046 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff fb13 	bl	80046a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800507c:	f7fb fdb6 	bl	8000bec <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005084:	f7fb fdb2 	bl	8000bec <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0f2      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005096:	f7ff fbe8 	bl	800486a <LL_RCC_IsActiveFlag_HPRE>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f1      	beq.n	8005084 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fb0a 	bl	80046ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050b6:	f7fb fd99 	bl	8000bec <HAL_GetTick>
 80050ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050be:	f7fb fd95 	bl	8000bec <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0d5      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050d0:	f7ff fbdd 	bl	800488e <LL_RCC_IsActiveFlag_C2HPRE>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f1      	beq.n	80050be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fb03 	bl	80046f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050f0:	f7fb fd7c 	bl	8000bec <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050f8:	f7fb fd78 	bl	8000bec <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e0b8      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800510a:	f7ff fbd3 	bl	80048b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f1      	beq.n	80050f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d016      	beq.n	800514e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff fafd 	bl	8004724 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800512a:	f7fb fd5f 	bl	8000bec <HAL_GetTick>
 800512e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005132:	f7fb fd5b 	bl	8000bec <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e09b      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005144:	f7ff fbc9 	bl	80048da <LL_RCC_IsActiveFlag_PPRE1>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f1      	beq.n	8005132 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d017      	beq.n	800518a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff faf3 	bl	800474c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005166:	f7fb fd41 	bl	8000bec <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800516e:	f7fb fd3d 	bl	8000bec <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e07d      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005180:	f7ff fbbd 	bl	80048fe <LL_RCC_IsActiveFlag_PPRE2>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f1      	beq.n	800516e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d043      	beq.n	800521e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d106      	bne.n	80051ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800519e:	f7ff f893 	bl	80042c8 <LL_RCC_HSE_IsReady>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11e      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e067      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80051b4:	f7ff fb16 	bl	80047e4 <LL_RCC_PLL_IsReady>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d113      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e05c      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80051ca:	f7ff f9fb 	bl	80045c4 <LL_RCC_MSI_IsReady>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e051      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80051d8:	f7ff f8a6 	bl	8004328 <LL_RCC_HSI_IsReady>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e04a      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fa39 	bl	8004662 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fb fcfc 	bl	8000bec <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	e00a      	b.n	800520e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7fb fcf8 	bl	8000bec <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e036      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	f7ff fa3c 	bl	800468a <LL_RCC_GetSysClkSource>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	429a      	cmp	r2, r3
 800521c:	d1ec      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800521e:	4b19      	ldr	r3, [pc, #100]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d21b      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522c:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f023 0207 	bic.w	r2, r3, #7
 8005234:	4913      	ldr	r1, [pc, #76]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800523c:	f7fb fcd6 	bl	8000bec <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	e008      	b.n	8005256 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005244:	f7fb fcd2 	bl	8000bec <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e012      	b.n	800527c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_ClockConfig+0x278>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d1ef      	bne.n	8005244 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005264:	f000 f87e 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005268:	4603      	mov	r3, r0
 800526a:	4a07      	ldr	r2, [pc, #28]	@ (8005288 <HAL_RCC_ClockConfig+0x27c>)
 800526c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800526e:	f7fb fcc9 	bl	8000c04 <HAL_GetTickPrio>
 8005272:	4603      	mov	r3, r0
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb fc6b 	bl	8000b50 <HAL_InitTick>
 800527a:	4603      	mov	r3, r0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	58004000 	.word	0x58004000
 8005288:	20000008 	.word	0x20000008

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005292:	f7ff f9fa 	bl	800468a <LL_RCC_GetSysClkSource>
 8005296:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800529e:	f7ff f9b6 	bl	800460e <LL_RCC_MSI_GetRange>
 80052a2:	4603      	mov	r3, r0
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005358 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e04b      	b.n	800534c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d102      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ba:	4b28      	ldr	r3, [pc, #160]	@ (800535c <HAL_RCC_GetSysClockFreq+0xd0>)
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e045      	b.n	800534c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d10a      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052c6:	f7fe ffcf 	bl	8004268 <LL_RCC_HSE_IsEnabledDiv2>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80052d0:	4b22      	ldr	r3, [pc, #136]	@ (800535c <HAL_RCC_GetSysClockFreq+0xd0>)
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e03a      	b.n	800534c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80052d6:	4b22      	ldr	r3, [pc, #136]	@ (8005360 <HAL_RCC_GetSysClockFreq+0xd4>)
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e037      	b.n	800534c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80052dc:	f7ff fab9 	bl	8004852 <LL_RCC_PLL_GetMainSource>
 80052e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d003      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x64>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d003      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80052ee:	e00d      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80052f0:	4b1a      	ldr	r3, [pc, #104]	@ (800535c <HAL_RCC_GetSysClockFreq+0xd0>)
 80052f2:	60bb      	str	r3, [r7, #8]
        break;
 80052f4:	e015      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052f6:	f7fe ffb7 	bl	8004268 <LL_RCC_HSE_IsEnabledDiv2>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005300:	4b16      	ldr	r3, [pc, #88]	@ (800535c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005302:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005304:	e00d      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005306:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005308:	60bb      	str	r3, [r7, #8]
        break;
 800530a:	e00a      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800530c:	f7ff f97f 	bl	800460e <LL_RCC_MSI_GetRange>
 8005310:	4603      	mov	r3, r0
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	4a0f      	ldr	r2, [pc, #60]	@ (8005358 <HAL_RCC_GetSysClockFreq+0xcc>)
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	60bb      	str	r3, [r7, #8]
        break;
 8005320:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005322:	f7ff fa71 	bl	8004808 <LL_RCC_PLL_GetN>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	fb03 f402 	mul.w	r4, r3, r2
 800532e:	f7ff fa84 	bl	800483a <LL_RCC_PLL_GetDivider>
 8005332:	4603      	mov	r3, r0
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	3301      	adds	r3, #1
 8005338:	fbb4 f4f3 	udiv	r4, r4, r3
 800533c:	f7ff fa71 	bl	8004822 <LL_RCC_PLL_GetR>
 8005340:	4603      	mov	r3, r0
 8005342:	0f5b      	lsrs	r3, r3, #29
 8005344:	3301      	adds	r3, #1
 8005346:	fbb4 f3f3 	udiv	r3, r4, r3
 800534a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}
 8005356:	bf00      	nop
 8005358:	0800b2bc 	.word	0x0800b2bc
 800535c:	00f42400 	.word	0x00f42400
 8005360:	01e84800 	.word	0x01e84800

08005364 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b598      	push	{r3, r4, r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005368:	f7ff ff90 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800536c:	4604      	mov	r4, r0
 800536e:	f7ff fa01 	bl	8004774 <LL_RCC_GetAHBPrescaler>
 8005372:	4603      	mov	r3, r0
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	4a03      	ldr	r2, [pc, #12]	@ (8005388 <HAL_RCC_GetHCLKFreq+0x24>)
 800537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005380:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd98      	pop	{r3, r4, r7, pc}
 8005388:	0800b27c 	.word	0x0800b27c

0800538c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2bb0      	cmp	r3, #176	@ 0xb0
 8005398:	d903      	bls.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800539a:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e007      	b.n	80053b2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	4a11      	ldr	r2, [pc, #68]	@ (80053f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80053b2:	f7ff f9eb 	bl	800478c <LL_RCC_GetAHB4Prescaler>
 80053b6:	4603      	mov	r3, r0
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80053c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a0a      	ldr	r2, [pc, #40]	@ (80053f8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	0c9c      	lsrs	r4, r3, #18
 80053d6:	f7fe ff29 	bl	800422c <HAL_PWREx_GetVoltageRange>
 80053da:	4603      	mov	r3, r0
 80053dc:	4619      	mov	r1, r3
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f80c 	bl	80053fc <RCC_SetFlashLatency>
 80053e4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}
 80053ee:	bf00      	nop
 80053f0:	0800b2bc 	.word	0x0800b2bc
 80053f4:	0800b27c 	.word	0x0800b27c
 80053f8:	431bde83 	.word	0x431bde83

080053fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b093      	sub	sp, #76	@ 0x4c
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005406:	4b37      	ldr	r3, [pc, #220]	@ (80054e4 <RCC_SetFlashLatency+0xe8>)
 8005408:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800540c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800540e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005412:	4a35      	ldr	r2, [pc, #212]	@ (80054e8 <RCC_SetFlashLatency+0xec>)
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	ca07      	ldmia	r2, {r0, r1, r2}
 800541a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800541e:	4b33      	ldr	r3, [pc, #204]	@ (80054ec <RCC_SetFlashLatency+0xf0>)
 8005420:	f107 040c 	add.w	r4, r7, #12
 8005424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005426:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800542a:	2300      	movs	r3, #0
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005434:	d11a      	bne.n	800546c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005436:	2300      	movs	r3, #0
 8005438:	643b      	str	r3, [r7, #64]	@ 0x40
 800543a:	e013      	b.n	8005464 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800543c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	3348      	adds	r3, #72	@ 0x48
 8005442:	443b      	add	r3, r7
 8005444:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d807      	bhi.n	800545e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800544e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3348      	adds	r3, #72	@ 0x48
 8005454:	443b      	add	r3, r7
 8005456:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800545a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800545c:	e020      	b.n	80054a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800545e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005460:	3301      	adds	r3, #1
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40
 8005464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005466:	2b03      	cmp	r3, #3
 8005468:	d9e8      	bls.n	800543c <RCC_SetFlashLatency+0x40>
 800546a:	e019      	b.n	80054a0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005470:	e013      	b.n	800549a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	3348      	adds	r3, #72	@ 0x48
 8005478:	443b      	add	r3, r7
 800547a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d807      	bhi.n	8005494 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	3348      	adds	r3, #72	@ 0x48
 800548a:	443b      	add	r3, r7
 800548c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005490:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005492:	e005      	b.n	80054a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	3301      	adds	r3, #1
 8005498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800549a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549c:	2b02      	cmp	r3, #2
 800549e:	d9e8      	bls.n	8005472 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <RCC_SetFlashLatency+0xf4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 0207 	bic.w	r2, r3, #7
 80054a8:	4911      	ldr	r1, [pc, #68]	@ (80054f0 <RCC_SetFlashLatency+0xf4>)
 80054aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054b0:	f7fb fb9c 	bl	8000bec <HAL_GetTick>
 80054b4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80054b6:	e008      	b.n	80054ca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054b8:	f7fb fb98 	bl	8000bec <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e007      	b.n	80054da <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80054ca:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <RCC_SetFlashLatency+0xf4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1ef      	bne.n	80054b8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	374c      	adds	r7, #76	@ 0x4c
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	0800b208 	.word	0x0800b208
 80054e8:	0800b218 	.word	0x0800b218
 80054ec:	0800b224 	.word	0x0800b224
 80054f0:	58004000 	.word	0x58004000

080054f4 <LL_RCC_LSE_IsEnabled>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80054f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <LL_RCC_LSE_IsEnabled+0x18>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <LL_RCC_LSE_IsEnabled+0x1a>
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <LL_RCC_LSE_IsReady>:
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b02      	cmp	r3, #2
 800552a:	d101      	bne.n	8005530 <LL_RCC_LSE_IsReady+0x18>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <LL_RCC_LSE_IsReady+0x1a>
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_RCC_MSI_EnablePLLMode>:
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_RCC_SetRFWKPClockSource>:
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_RCC_SetSMPSClockSource>:
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	f023 0203 	bic.w	r2, r3, #3
 8005598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4313      	orrs	r3, r2
 80055a0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_SetSMPSPrescaler>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_SetUSARTClockSource>:
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <LL_RCC_SetLPUARTClockSource>:
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <LL_RCC_SetI2CClockSource>:
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005646:	43db      	mvns	r3, r3
 8005648:	401a      	ands	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_RCC_SetLPTIMClockSource>:
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005674:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0c1b      	lsrs	r3, r3, #16
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	43db      	mvns	r3, r3
 8005680:	401a      	ands	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <LL_RCC_SetSAIClockSource>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <LL_RCC_SetRNGClockSource>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80056dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_SetCLK48ClockSource>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005708:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_RCC_SetUSBClockSource>:
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ffe3 	bl	80056f4 <LL_RCC_SetCLK48ClockSource>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <LL_RCC_SetADCClockSource>:
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005746:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800574a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <LL_RCC_SetRTCClockSource>:
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800576a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005772:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <LL_RCC_GetRTCClockSource>:
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <LL_RCC_ForceBackupDomainReset>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_PLLSAI1_Enable>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <LL_RCC_PLLSAI1_Disable>:
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005818:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800581c:	6013      	str	r3, [r2, #0]
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_RCC_PLLSAI1_IsReady>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800583a:	d101      	bne.n	8005840 <LL_RCC_PLLSAI1_IsReady+0x18>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <LL_APB1_GRP1_ForceReset>:
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800585a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4313      	orrs	r3, r2
 8005862:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_APB1_GRP1_ReleaseReset>:
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800587c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	43db      	mvns	r3, r3
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005886:	4013      	ands	r3, r2
 8005888:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b088      	sub	sp, #32
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800589e:	2300      	movs	r3, #0
 80058a0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80058a2:	2300      	movs	r3, #0
 80058a4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d034      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058ba:	d021      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80058bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058c0:	d81b      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058c6:	d01d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80058c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058cc:	d815      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x54>
 80058d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058d6:	d110      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80058d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80058e8:	e00d      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f988 	bl	8005c04 <RCCEx_PLLSAI1_ConfigNP>
 80058f4:	4603      	mov	r3, r0
 80058f6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058f8:	e005      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	77fb      	strb	r3, [r7, #31]
        break;
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005906:	7ffb      	ldrb	r3, [r7, #31]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fec3 	bl	800569c <LL_RCC_SetSAIClockSource>
 8005916:	e001      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7ffb      	ldrb	r3, [r7, #31]
 800591a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005924:	2b00      	cmp	r3, #0
 8005926:	d046      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005928:	f7ff ff31 	bl	800578e <LL_RCC_GetRTCClockSource>
 800592c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	429a      	cmp	r2, r3
 8005936:	d03c      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005938:	f7fe fc68 	bl	800420c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff0b 	bl	8005762 <LL_RCC_SetRTCClockSource>
 800594c:	e02e      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800594e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005956:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005958:	f7ff ff26 	bl	80057a8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800595c:	f7ff ff35 	bl	80057ca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800596e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005978:	f7ff fdbc 	bl	80054f4 <LL_RCC_LSE_IsEnabled>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d114      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005982:	f7fb f933 	bl	8000bec <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005988:	e00b      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fb f92f 	bl	8000bec <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005998:	4293      	cmp	r3, r2
 800599a:	d902      	bls.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	77fb      	strb	r3, [r7, #31]
              break;
 80059a0:	e004      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80059a2:	f7ff fdb9 	bl	8005518 <LL_RCC_LSE_IsReady>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d1ee      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80059ac:	7ffb      	ldrb	r3, [r7, #31]
 80059ae:	77bb      	strb	r3, [r7, #30]
 80059b0:	e001      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
 80059b4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fe05 	bl	80055d6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fe10 	bl	8005602 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fe38 	bl	8005668 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fe2d 	bl	8005668 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe05 	bl	800562e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fdfa 	bl	800562e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d022      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe68 	bl	8005720 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a58:	d107      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a72:	d10b      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f91e 	bl	8005cba <RCCEx_PLLSAI1_ConfigNQ>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005a88:	7ffb      	ldrb	r3, [r7, #31]
 8005a8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d02b      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aaa:	d003      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fe05 	bl	80056c8 <LL_RCC_SetRNGClockSource>
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	2000      	movs	r0, #0
 8005acc:	f7ff fdfc 	bl	80056c8 <LL_RCC_SetRNGClockSource>
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fe0f 	bl	80056f4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005ade:	d107      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d022      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fe18 	bl	8005736 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b0e:	d107      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f91e 	bl	8005d70 <RCCEx_PLLSAI1_ConfigNR>
 8005b34:	4603      	mov	r3, r0
 8005b36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b38:	7ffb      	ldrb	r3, [r7, #31]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fd01 	bl	800555a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fd20 	bl	80055ae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fd07 	bl	8005586 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005b78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005b86:	f7ff fcd9 	bl	800553c <LL_RCC_MSI_EnablePLLMode>
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005b98:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005b9c:	f7ff fe56 	bl	800584c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8005ba0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005ba4:	f7ff fe64 	bl	8005870 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c00 <HAL_RCCEx_CRSConfig+0x70>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <HAL_RCCEx_CRSConfig+0x70>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	4906      	ldr	r1, [pc, #24]	@ (8005c00 <HAL_RCCEx_CRSConfig+0x70>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005bea:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <HAL_RCCEx_CRSConfig+0x70>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <HAL_RCCEx_CRSConfig+0x70>)
 8005bf0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40006000 	.word	0x40006000

08005c04 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c10:	f7ff fdfb 	bl	800580a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c14:	f7fa ffea 	bl	8000bec <HAL_GetTick>
 8005c18:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c1a:	e009      	b.n	8005c30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c1c:	f7fa ffe6 	bl	8000bec <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d902      	bls.n	8005c30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2e:	e004      	b.n	8005c3a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c30:	f7ff fdfa 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d137      	bne.n	8005cb0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c54:	4313      	orrs	r3, r2
 8005c56:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c6e:	f7ff fdbd 	bl	80057ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c72:	f7fa ffbb 	bl	8000bec <HAL_GetTick>
 8005c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c78:	e009      	b.n	8005c8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c7a:	f7fa ffb7 	bl	8000bec <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d902      	bls.n	8005c8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	73fb      	strb	r3, [r7, #15]
        break;
 8005c8c:	e004      	b.n	8005c98 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c8e:	f7ff fdcb 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d1f0      	bne.n	8005c7a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cac:	4313      	orrs	r3, r2
 8005cae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005cc6:	f7ff fda0 	bl	800580a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cca:	f7fa ff8f 	bl	8000bec <HAL_GetTick>
 8005cce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cd0:	e009      	b.n	8005ce6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd2:	f7fa ff8b 	bl	8000bec <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d902      	bls.n	8005ce6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce4:	e004      	b.n	8005cf0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ce6:	f7ff fd9f 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f0      	bne.n	8005cd2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d137      	bne.n	8005d66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d20:	4313      	orrs	r3, r2
 8005d22:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d24:	f7ff fd62 	bl	80057ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d28:	f7fa ff60 	bl	8000bec <HAL_GetTick>
 8005d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d2e:	e009      	b.n	8005d44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d30:	f7fa ff5c 	bl	8000bec <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d902      	bls.n	8005d44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	73fb      	strb	r3, [r7, #15]
        break;
 8005d42:	e004      	b.n	8005d4e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d44:	f7ff fd70 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d1f0      	bne.n	8005d30 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d62:	4313      	orrs	r3, r2
 8005d64:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d7c:	f7ff fd45 	bl	800580a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d80:	f7fa ff34 	bl	8000bec <HAL_GetTick>
 8005d84:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d86:	e009      	b.n	8005d9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d88:	f7fa ff30 	bl	8000bec <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9a:	e004      	b.n	8005da6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d9c:	f7ff fd44 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d137      	bne.n	8005e1c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005dda:	f7ff fd07 	bl	80057ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dde:	f7fa ff05 	bl	8000bec <HAL_GetTick>
 8005de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005de4:	e009      	b.n	8005dfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005de6:	f7fa ff01 	bl	8000bec <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d902      	bls.n	8005dfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	73fb      	strb	r3, [r7, #15]
        break;
 8005df8:	e004      	b.n	8005e04 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dfa:	f7ff fd15 	bl	8005828 <LL_RCC_PLLSAI1_IsReady>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d1f0      	bne.n	8005de6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e049      	b.n	8005ecc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fa fd57 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f000 fa7d 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d001      	beq.n	8005eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e02e      	b.n	8005f4a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <HAL_TIM_Base_Start+0x84>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start+0x34>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f06:	d115      	bne.n	8005f34 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	4b13      	ldr	r3, [pc, #76]	@ (8005f5c <HAL_TIM_Base_Start+0x88>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d015      	beq.n	8005f46 <HAL_TIM_Base_Start+0x72>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f20:	d011      	beq.n	8005f46 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	e008      	b.n	8005f46 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e000      	b.n	8005f48 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	00010007 	.word	0x00010007

08005f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0202 	mvn.w	r2, #2
 8005f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9bc 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9ae 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9bf 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d020      	beq.n	8006010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0204 	mvn.w	r2, #4
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f996 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f988 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f999 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d020      	beq.n	800605c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01b      	beq.n	800605c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0208 	mvn.w	r2, #8
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f970 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f962 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f973 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d020      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0210 	mvn.w	r2, #16
 8006078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2208      	movs	r2, #8
 800607e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f94a 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f93c 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f94d 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00c      	beq.n	80060cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0201 	mvn.w	r2, #1
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f91a 	bl	8006300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00c      	beq.n	80060fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 faab 	bl	8006650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 faa3 	bl	8006664 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f907 	bl	8006350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f06f 0220 	mvn.w	r2, #32
 800615e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa6b 	bl	800663c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_TIM_ConfigClockSource+0x1c>
 8006186:	2302      	movs	r3, #2
 8006188:	e0b6      	b.n	80062f8 <HAL_TIM_ConfigClockSource+0x18a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	d03e      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xd8>
 80061c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061cc:	f200 8087 	bhi.w	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d4:	f000 8086 	beq.w	80062e4 <HAL_TIM_ConfigClockSource+0x176>
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061dc:	d87f      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061de:	2b70      	cmp	r3, #112	@ 0x70
 80061e0:	d01a      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0xaa>
 80061e2:	2b70      	cmp	r3, #112	@ 0x70
 80061e4:	d87b      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061e6:	2b60      	cmp	r3, #96	@ 0x60
 80061e8:	d050      	beq.n	800628c <HAL_TIM_ConfigClockSource+0x11e>
 80061ea:	2b60      	cmp	r3, #96	@ 0x60
 80061ec:	d877      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061ee:	2b50      	cmp	r3, #80	@ 0x50
 80061f0:	d03c      	beq.n	800626c <HAL_TIM_ConfigClockSource+0xfe>
 80061f2:	2b50      	cmp	r3, #80	@ 0x50
 80061f4:	d873      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d058      	beq.n	80062ac <HAL_TIM_ConfigClockSource+0x13e>
 80061fa:	2b40      	cmp	r3, #64	@ 0x40
 80061fc:	d86f      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 80061fe:	2b30      	cmp	r3, #48	@ 0x30
 8006200:	d064      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x15e>
 8006202:	2b30      	cmp	r3, #48	@ 0x30
 8006204:	d86b      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 8006206:	2b20      	cmp	r3, #32
 8006208:	d060      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x15e>
 800620a:	2b20      	cmp	r3, #32
 800620c:	d867      	bhi.n	80062de <HAL_TIM_ConfigClockSource+0x170>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d05c      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x15e>
 8006212:	2b10      	cmp	r3, #16
 8006214:	d05a      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x15e>
 8006216:	e062      	b.n	80062de <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006228:	f000 f988 	bl	800653c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800623a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]
      break;
 8006244:	e04f      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006256:	f000 f971 	bl	800653c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006268:	609a      	str	r2, [r3, #8]
      break;
 800626a:	e03c      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	461a      	mov	r2, r3
 800627a:	f000 f8e3 	bl	8006444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2150      	movs	r1, #80	@ 0x50
 8006284:	4618      	mov	r0, r3
 8006286:	f000 f93c 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 800628a:	e02c      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006298:	461a      	mov	r2, r3
 800629a:	f000 f902 	bl	80064a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2160      	movs	r1, #96	@ 0x60
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f92c 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 80062aa:	e01c      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b8:	461a      	mov	r2, r3
 80062ba:	f000 f8c3 	bl	8006444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2140      	movs	r1, #64	@ 0x40
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f91c 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 80062ca:	e00c      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 f913 	bl	8006502 <TIM_ITRx_SetConfig>
      break;
 80062dc:	e003      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
      break;
 80062e2:	e000      	b.n	80062e6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a30      	ldr	r2, [pc, #192]	@ (8006438 <TIM_Base_SetConfig+0xd4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_Base_SetConfig+0x20>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006382:	d108      	bne.n	8006396 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a27      	ldr	r2, [pc, #156]	@ (8006438 <TIM_Base_SetConfig+0xd4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00b      	beq.n	80063b6 <TIM_Base_SetConfig+0x52>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a4:	d007      	beq.n	80063b6 <TIM_Base_SetConfig+0x52>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a24      	ldr	r2, [pc, #144]	@ (800643c <TIM_Base_SetConfig+0xd8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_Base_SetConfig+0x52>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a23      	ldr	r2, [pc, #140]	@ (8006440 <TIM_Base_SetConfig+0xdc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d108      	bne.n	80063c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <TIM_Base_SetConfig+0xd4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d007      	beq.n	8006404 <TIM_Base_SetConfig+0xa0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a11      	ldr	r2, [pc, #68]	@ (800643c <TIM_Base_SetConfig+0xd8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0xa0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a10      	ldr	r2, [pc, #64]	@ (8006440 <TIM_Base_SetConfig+0xdc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	d105      	bne.n	800642a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]
  }
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40014400 	.word	0x40014400
 8006440:	40014800 	.word	0x40014800

08006444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f023 030a 	bic.w	r3, r3, #10
 8006480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b087      	sub	sp, #28
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	031b      	lsls	r3, r3, #12
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006590:	2302      	movs	r3, #2
 8006592:	e04a      	b.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a12      	ldr	r2, [pc, #72]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fc:	d10c      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4313      	orrs	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40012c00 	.word	0x40012c00

0800663c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006688:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800668c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066ae:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80066b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	43db      	mvns	r3, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4013      	ands	r3, r2
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006718:	b480      	push	{r7}
 800671a:	b09d      	sub	sp, #116	@ 0x74
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	78db      	ldrb	r3, [r3, #3]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d81f      	bhi.n	800678a <USB_ActivateEndpoint+0x72>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <USB_ActivateEndpoint+0x38>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006761 	.word	0x08006761
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006793 	.word	0x08006793
 800675c:	0800676f 	.word	0x0800676f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006768:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800676c:	e012      	b.n	8006794 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800676e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006772:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006776:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800677a:	e00b      	b.n	8006794 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800677c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006780:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006784:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006788:	e004      	b.n	8006794 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006790:	e000      	b.n	8006794 <USB_ActivateEndpoint+0x7c>
      break;
 8006792:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	441a      	add	r2, r3
 800679e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	b21b      	sxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ce:	b21a      	sxth	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	b21b      	sxth	r3, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b21b      	sxth	r3, r3
 80067da:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	7b1b      	ldrb	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 8178 	bne.w	8006afa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8084 	beq.w	800691c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800681e:	b29b      	uxth	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	4413      	add	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	00da      	lsls	r2, r3, #3
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	88db      	ldrh	r3, [r3, #6]
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	b29b      	uxth	r3, r3
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	827b      	strh	r3, [r7, #18]
 8006856:	8a7b      	ldrh	r3, [r7, #18]
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <USB_ActivateEndpoint+0x180>
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006876:	823b      	strh	r3, [r7, #16]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	8a3b      	ldrh	r3, [r7, #16]
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800688c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006890:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d020      	beq.n	80068e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b6:	81bb      	strh	r3, [r7, #12]
 80068b8:	89bb      	ldrh	r3, [r7, #12]
 80068ba:	f083 0320 	eor.w	r3, r3, #32
 80068be:	81bb      	strh	r3, [r7, #12]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	89bb      	ldrh	r3, [r7, #12]
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]
 80068e0:	e2d5      	b.n	8006e8e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068f8:	81fb      	strh	r3, [r7, #14]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	441a      	add	r2, r3
 8006904:	89fb      	ldrh	r3, [r7, #14]
 8006906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800690a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800690e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]
 800691a:	e2b8      	b.n	8006e8e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	4413      	add	r3, r2
 800692e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	00da      	lsls	r2, r3, #3
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	4413      	add	r3, r2
 800693a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	88db      	ldrh	r3, [r3, #6]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	4413      	add	r3, r2
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	00da      	lsls	r2, r3, #3
 800696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696c:	4413      	add	r3, r2
 800696e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800697e:	b29a      	uxth	r2, r3
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b3e      	cmp	r3, #62	@ 0x3e
 800698a:	d91d      	bls.n	80069c8 <USB_ActivateEndpoint+0x2b0>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <USB_ActivateEndpoint+0x28e>
 80069a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069a2:	3b01      	subs	r3, #1
 80069a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	029b      	lsls	r3, r3, #10
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e026      	b.n	8006a16 <USB_ActivateEndpoint+0x2fe>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <USB_ActivateEndpoint+0x2ce>
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e017      	b.n	8006a16 <USB_ActivateEndpoint+0x2fe>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <USB_ActivateEndpoint+0x2e8>
 80069fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069fc:	3301      	adds	r3, #1
 80069fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	029b      	lsls	r3, r3, #10
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006a24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01b      	beq.n	8006a66 <USB_ActivateEndpoint+0x34e>
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	843b      	strh	r3, [r7, #32]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	8c3b      	ldrh	r3, [r7, #32]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d124      	bne.n	8006ab8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a84:	83bb      	strh	r3, [r7, #28]
 8006a86:	8bbb      	ldrh	r3, [r7, #28]
 8006a88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a8c:	83bb      	strh	r3, [r7, #28]
 8006a8e:	8bbb      	ldrh	r3, [r7, #28]
 8006a90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a94:	83bb      	strh	r3, [r7, #28]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	8bbb      	ldrh	r3, [r7, #28]
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]
 8006ab6:	e1ea      	b.n	8006e8e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ace:	83fb      	strh	r3, [r7, #30]
 8006ad0:	8bfb      	ldrh	r3, [r7, #30]
 8006ad2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ad6:	83fb      	strh	r3, [r7, #30]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	8bfb      	ldrh	r3, [r7, #30]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]
 8006af8:	e1c9      	b.n	8006e8e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	78db      	ldrb	r3, [r3, #3]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d11e      	bne.n	8006b40 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
 8006b3e:	e01d      	b.n	8006b7c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b8c:	4413      	add	r3, r2
 8006b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	891b      	ldrh	r3, [r3, #8]
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc0:	4413      	add	r3, r2
 8006bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00da      	lsls	r2, r3, #3
 8006bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bcc:	4413      	add	r3, r2
 8006bce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	895b      	ldrh	r3, [r3, #10]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8093 	bne.w	8006d14 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006bfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01b      	beq.n	8006c42 <USB_ActivateEndpoint+0x52a>
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	441a      	add	r2, r3
 8006c2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006c50:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01b      	beq.n	8006c92 <USB_ActivateEndpoint+0x57a>
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c70:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006caa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006cac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006cb0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006cb2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006cb4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006cb8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	441a      	add	r2, r3
 8006cc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
 8006d12:	e0bc      	b.n	8006e8e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01d      	beq.n	8006d6c <USB_ActivateEndpoint+0x654>
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d46:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	441a      	add	r2, r3
 8006d54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006d7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01d      	beq.n	8006dc4 <USB_ActivateEndpoint+0x6ac>
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	78db      	ldrb	r3, [r3, #3]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d024      	beq.n	8006e16 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006de6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006dea:	f083 0320 	eor.w	r3, r3, #32
 8006dee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]
 8006e14:	e01d      	b.n	8006e52 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006e8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3774      	adds	r7, #116	@ 0x74
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop

08006ea0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b08d      	sub	sp, #52	@ 0x34
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	7b1b      	ldrb	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f040 808e 	bne.w	8006fd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d044      	beq.n	8006f46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	81bb      	strh	r3, [r7, #12]
 8006eca:	89bb      	ldrh	r3, [r7, #12]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01b      	beq.n	8006f0c <USB_DeactivateEndpoint+0x6c>
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eea:	817b      	strh	r3, [r7, #10]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f22:	813b      	strh	r3, [r7, #8]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	893b      	ldrh	r3, [r7, #8]
 8006f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	8013      	strh	r3, [r2, #0]
 8006f44:	e192      	b.n	800726c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	827b      	strh	r3, [r7, #18]
 8006f54:	8a7b      	ldrh	r3, [r7, #18]
 8006f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d01b      	beq.n	8006f96 <USB_DeactivateEndpoint+0xf6>
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f74:	823b      	strh	r3, [r7, #16]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	8a3b      	ldrh	r3, [r7, #16]
 8006f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fac:	81fb      	strh	r3, [r7, #14]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	441a      	add	r2, r3
 8006fb8:	89fb      	ldrh	r3, [r7, #14]
 8006fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	8013      	strh	r3, [r2, #0]
 8006fce:	e14d      	b.n	800726c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 80a5 	bne.w	8007124 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	843b      	strh	r3, [r7, #32]
 8006fe8:	8c3b      	ldrh	r3, [r7, #32]
 8006fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01b      	beq.n	800702a <USB_DeactivateEndpoint+0x18a>
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007008:	83fb      	strh	r3, [r7, #30]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	8bfb      	ldrh	r3, [r7, #30]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	83bb      	strh	r3, [r7, #28]
 8007038:	8bbb      	ldrh	r3, [r7, #28]
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01b      	beq.n	800707a <USB_DeactivateEndpoint+0x1da>
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007058:	837b      	strh	r3, [r7, #26]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	8b7b      	ldrh	r3, [r7, #26]
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007072:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007090:	833b      	strh	r3, [r7, #24]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	8b3b      	ldrh	r3, [r7, #24]
 800709e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c8:	82fb      	strh	r3, [r7, #22]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	8afb      	ldrh	r3, [r7, #22]
 80070d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007100:	82bb      	strh	r3, [r7, #20]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	441a      	add	r2, r3
 800710c:	8abb      	ldrh	r3, [r7, #20]
 800710e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711e:	b29b      	uxth	r3, r3
 8007120:	8013      	strh	r3, [r2, #0]
 8007122:	e0a3      	b.n	800726c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007132:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <USB_DeactivateEndpoint+0x2d4>
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800714e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007152:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800716c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007182:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01b      	beq.n	80071c4 <USB_DeactivateEndpoint+0x324>
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	441a      	add	r2, r3
 80071e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800720e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007212:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800722c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007230:	b29b      	uxth	r3, r3
 8007232:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007268:	b29b      	uxth	r3, r3
 800726a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3734      	adds	r7, #52	@ 0x34
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b0c2      	sub	sp, #264	@ 0x108
 800727e:	af00      	add	r7, sp, #0
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007288:	6018      	str	r0, [r3, #0]
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f040 86b7 	bne.w	8008014 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d908      	bls.n	80072d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80072c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80072d2:	e007      	b.n	80072e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80072d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80072e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	7b1b      	ldrb	r3, [r3, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d13a      	bne.n	800736a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80072f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6959      	ldr	r1, [r3, #20]
 8007300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	88da      	ldrh	r2, [r3, #6]
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	b29b      	uxth	r3, r3
 8007312:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007316:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	f001 fcc2 	bl	8008ca4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	4413      	add	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00da      	lsls	r2, r3, #3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4413      	add	r3, r2
 8007356:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	f000 be1f 	b.w	8007fa8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	78db      	ldrb	r3, [r3, #3]
 8007376:	2b02      	cmp	r3, #2
 8007378:	f040 8462 	bne.w	8007c40 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	f240 83df 	bls.w	8007b58 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80073c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80073e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80073ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007406:	1ad2      	subs	r2, r2, r3
 8007408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 81c7 	beq.w	80077ca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	633b      	str	r3, [r7, #48]	@ 0x30
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d177      	bne.n	8007548 <USB_EPStartXfer+0x2ce>
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007472:	b29b      	uxth	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	4413      	add	r3, r2
 800747a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	00da      	lsls	r2, r3, #3
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	4413      	add	r3, r2
 800748e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074aa:	d921      	bls.n	80074f0 <USB_EPStartXfer+0x276>
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USB_EPStartXfer+0x252>
 80074c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80074c6:	3b01      	subs	r3, #1
 80074c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	b29b      	uxth	r3, r3
 80074dc:	4313      	orrs	r3, r2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	e050      	b.n	8007592 <USB_EPStartXfer+0x318>
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <USB_EPStartXfer+0x294>
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007506:	b29a      	uxth	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	e041      	b.n	8007592 <USB_EPStartXfer+0x318>
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	085b      	lsrs	r3, r3, #1
 8007514:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <USB_EPStartXfer+0x2b4>
 8007524:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29a      	uxth	r2, r3
 8007534:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007538:	b29b      	uxth	r3, r3
 800753a:	029b      	lsls	r3, r3, #10
 800753c:	b29b      	uxth	r3, r3
 800753e:	4313      	orrs	r3, r2
 8007540:	b29a      	uxth	r2, r3
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e024      	b.n	8007592 <USB_EPStartXfer+0x318>
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d11c      	bne.n	8007592 <USB_EPStartXfer+0x318>
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	4413      	add	r3, r2
 800756e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00da      	lsls	r2, r3, #3
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	4413      	add	r3, r2
 8007582:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758c:	b29a      	uxth	r2, r3
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	895b      	ldrh	r3, [r3, #10]
 800759e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6959      	ldr	r1, [r3, #20]
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075c0:	6800      	ldr	r0, [r0, #0]
 80075c2:	f001 fb6f 	bl	8008ca4 <USB_WritePMA>
            ep->xfer_buff += len;
 80075c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d6:	441a      	add	r2, r3
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d90f      	bls.n	8007620 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6a1a      	ldr	r2, [r3, #32]
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007610:	1ad2      	subs	r2, r2, r3
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	621a      	str	r2, [r3, #32]
 800761e:	e00e      	b.n	800763e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800763e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d177      	bne.n	800773e <USB_EPStartXfer+0x4c4>
 800764e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007668:	b29b      	uxth	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	4413      	add	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	00da      	lsls	r2, r3, #3
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4413      	add	r3, r2
 8007684:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007694:	b29a      	uxth	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769e:	2b3e      	cmp	r3, #62	@ 0x3e
 80076a0:	d921      	bls.n	80076e6 <USB_EPStartXfer+0x46c>
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0x448>
 80076b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	029b      	lsls	r3, r3, #10
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4313      	orrs	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076de:	b29a      	uxth	r2, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	801a      	strh	r2, [r3, #0]
 80076e4:	e056      	b.n	8007794 <USB_EPStartXfer+0x51a>
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <USB_EPStartXfer+0x48a>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	801a      	strh	r2, [r3, #0]
 8007702:	e047      	b.n	8007794 <USB_EPStartXfer+0x51a>
 8007704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USB_EPStartXfer+0x4aa>
 800771a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771e:	3301      	adds	r3, #1
 8007720:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29a      	uxth	r2, r3
 800772a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800772e:	b29b      	uxth	r3, r3
 8007730:	029b      	lsls	r3, r3, #10
 8007732:	b29b      	uxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	e02a      	b.n	8007794 <USB_EPStartXfer+0x51a>
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d122      	bne.n	8007794 <USB_EPStartXfer+0x51a>
 800774e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	4413      	add	r3, r2
 8007770:	623b      	str	r3, [r7, #32]
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00da      	lsls	r2, r3, #3
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	4413      	add	r3, r2
 8007784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	b29a      	uxth	r2, r3
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	891b      	ldrh	r3, [r3, #8]
 80077a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6959      	ldr	r1, [r3, #20]
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	f001 fa6e 	bl	8008ca4 <USB_WritePMA>
 80077c8:	e3ee      	b.n	8007fa8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d177      	bne.n	80078ca <USB_EPStartXfer+0x650>
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077fa:	4413      	add	r3, r2
 80077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	00da      	lsls	r2, r3, #3
 800780c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800780e:	4413      	add	r3, r2
 8007810:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007814:	647b      	str	r3, [r7, #68]	@ 0x44
 8007816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007820:	b29a      	uxth	r2, r3
 8007822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	2b3e      	cmp	r3, #62	@ 0x3e
 800782c:	d921      	bls.n	8007872 <USB_EPStartXfer+0x5f8>
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <USB_EPStartXfer+0x5d4>
 8007844:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007848:	3b01      	subs	r3, #1
 800784a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800784e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29a      	uxth	r2, r3
 8007854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007858:	b29b      	uxth	r3, r3
 800785a:	029b      	lsls	r3, r3, #10
 800785c:	b29b      	uxth	r3, r3
 800785e:	4313      	orrs	r3, r2
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e056      	b.n	8007920 <USB_EPStartXfer+0x6a6>
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <USB_EPStartXfer+0x616>
 800787a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e047      	b.n	8007920 <USB_EPStartXfer+0x6a6>
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800789a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <USB_EPStartXfer+0x636>
 80078a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078aa:	3301      	adds	r3, #1
 80078ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e02a      	b.n	8007920 <USB_EPStartXfer+0x6a6>
 80078ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d122      	bne.n	8007920 <USB_EPStartXfer+0x6a6>
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80078e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078fa:	4413      	add	r3, r2
 80078fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	00da      	lsls	r2, r3, #3
 800790c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800790e:	4413      	add	r3, r2
 8007910:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791a:	b29a      	uxth	r2, r3
 800791c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	891b      	ldrh	r3, [r3, #8]
 800792c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6959      	ldr	r1, [r3, #20]
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	b29b      	uxth	r3, r3
 8007942:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007946:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800794a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	f001 f9a8 	bl	8008ca4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695a      	ldr	r2, [r3, #20]
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007964:	441a      	add	r2, r3
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	429a      	cmp	r2, r3
 800798c:	d90f      	bls.n	80079ae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	621a      	str	r2, [r3, #32]
 80079ac:	e00e      	b.n	80079cc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2200      	movs	r2, #0
 80079ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d177      	bne.n	8007ad8 <USB_EPStartXfer+0x85e>
 80079e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	4413      	add	r3, r2
 8007a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	00da      	lsls	r2, r3, #3
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a3a:	d921      	bls.n	8007a80 <USB_EPStartXfer+0x806>
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <USB_EPStartXfer+0x7e2>
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	029b      	lsls	r3, r3, #10
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	e050      	b.n	8007b22 <USB_EPStartXfer+0x8a8>
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <USB_EPStartXfer+0x824>
 8007a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	e041      	b.n	8007b22 <USB_EPStartXfer+0x8a8>
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	085b      	lsrs	r3, r3, #1
 8007aa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <USB_EPStartXfer+0x844>
 8007ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab8:	3301      	adds	r3, #1
 8007aba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	e024      	b.n	8007b22 <USB_EPStartXfer+0x8a8>
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d11c      	bne.n	8007b22 <USB_EPStartXfer+0x8a8>
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007afc:	4413      	add	r3, r2
 8007afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	00da      	lsls	r2, r3, #3
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b10:	4413      	add	r3, r2
 8007b12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	895b      	ldrh	r3, [r3, #10]
 8007b2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6959      	ldr	r1, [r3, #20]
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b50:	6800      	ldr	r0, [r0, #0]
 8007b52:	f001 f8a7 	bl	8008ca4 <USB_WritePMA>
 8007b56:	e227      	b.n	8007fa8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	441a      	add	r2, r3
 8007bac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007be4:	4413      	add	r3, r2
 8007be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	00da      	lsls	r2, r3, #3
 8007bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	891b      	ldrh	r3, [r3, #8]
 8007c16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6959      	ldr	r1, [r3, #20]
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c38:	6800      	ldr	r0, [r0, #0]
 8007c3a:	f001 f833 	bl	8008ca4 <USB_WritePMA>
 8007c3e:	e1b3      	b.n	8007fa8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1a      	ldr	r2, [r3, #32]
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80c6 	beq.w	8007e12 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d177      	bne.n	8007d92 <USB_EPStartXfer+0xb18>
 8007ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cc2:	4413      	add	r3, r2
 8007cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	00da      	lsls	r2, r3, #3
 8007cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cec:	801a      	strh	r2, [r3, #0]
 8007cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cf4:	d921      	bls.n	8007d3a <USB_EPStartXfer+0xac0>
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfa:	095b      	lsrs	r3, r3, #5
 8007cfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d104      	bne.n	8007d16 <USB_EPStartXfer+0xa9c>
 8007d0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d10:	3b01      	subs	r3, #1
 8007d12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	029b      	lsls	r3, r3, #10
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4313      	orrs	r3, r2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	e050      	b.n	8007ddc <USB_EPStartXfer+0xb62>
 8007d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <USB_EPStartXfer+0xade>
 8007d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	e041      	b.n	8007ddc <USB_EPStartXfer+0xb62>
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <USB_EPStartXfer+0xafe>
 8007d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d72:	3301      	adds	r3, #1
 8007d74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	029b      	lsls	r3, r3, #10
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d8e:	801a      	strh	r2, [r3, #0]
 8007d90:	e024      	b.n	8007ddc <USB_EPStartXfer+0xb62>
 8007d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d11c      	bne.n	8007ddc <USB_EPStartXfer+0xb62>
 8007da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007db6:	4413      	add	r3, r2
 8007db8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	00da      	lsls	r2, r3, #3
 8007dc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dca:	4413      	add	r3, r2
 8007dcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	895b      	ldrh	r3, [r3, #10]
 8007de8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6959      	ldr	r1, [r3, #20]
 8007df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	f000 ff4a 	bl	8008ca4 <USB_WritePMA>
 8007e10:	e0ca      	b.n	8007fa8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d177      	bne.n	8007f12 <USB_EPStartXfer+0xc98>
 8007e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e42:	4413      	add	r3, r2
 8007e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	00da      	lsls	r2, r3, #3
 8007e54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e56:	4413      	add	r3, r2
 8007e58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6c:	801a      	strh	r2, [r3, #0]
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e74:	d921      	bls.n	8007eba <USB_EPStartXfer+0xc40>
 8007e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <USB_EPStartXfer+0xc1c>
 8007e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	029b      	lsls	r3, r3, #10
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	e05c      	b.n	8007f74 <USB_EPStartXfer+0xcfa>
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <USB_EPStartXfer+0xc5e>
 8007ec2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ed4:	801a      	strh	r2, [r3, #0]
 8007ed6:	e04d      	b.n	8007f74 <USB_EPStartXfer+0xcfa>
 8007ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <USB_EPStartXfer+0xc7e>
 8007eee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ef8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e030      	b.n	8007f74 <USB_EPStartXfer+0xcfa>
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d128      	bne.n	8007f74 <USB_EPStartXfer+0xcfa>
 8007f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	00da      	lsls	r2, r3, #3
 8007f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f5e:	4413      	add	r3, r2
 8007f60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	891b      	ldrh	r3, [r3, #8]
 8007f80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6959      	ldr	r1, [r3, #20]
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	f000 fe7e 	bl	8008ca4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fce:	817b      	strh	r3, [r7, #10]
 8007fd0:	897b      	ldrh	r3, [r7, #10]
 8007fd2:	f083 0310 	eor.w	r3, r3, #16
 8007fd6:	817b      	strh	r3, [r7, #10]
 8007fd8:	897b      	ldrh	r3, [r7, #10]
 8007fda:	f083 0320 	eor.w	r3, r3, #32
 8007fde:	817b      	strh	r3, [r7, #10]
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	897b      	ldrh	r3, [r7, #10]
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
 8008010:	f000 bcde 	b.w	80089d0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	7b1b      	ldrb	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 80bb 	bne.w	800819c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	d917      	bls.n	8008072 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	1ad2      	subs	r2, r2, r3
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	619a      	str	r2, [r3, #24]
 8008070:	e00e      	b.n	8008090 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2200      	movs	r2, #0
 800808e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800809e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080b4:	4413      	add	r3, r2
 80080b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	00da      	lsls	r2, r3, #3
 80080c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e8:	801a      	strh	r2, [r3, #0]
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80080f0:	d924      	bls.n	800813c <USB_EPStartXfer+0xec2>
 80080f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <USB_EPStartXfer+0xe98>
 8008108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800810c:	3b01      	subs	r3, #1
 800810e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29a      	uxth	r2, r3
 800811a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800811e:	b29b      	uxth	r3, r3
 8008120:	029b      	lsls	r3, r3, #10
 8008122:	b29b      	uxth	r3, r3
 8008124:	4313      	orrs	r3, r2
 8008126:	b29b      	uxth	r3, r3
 8008128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	f000 bc10 	b.w	800895c <USB_EPStartXfer+0x16e2>
 800813c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10c      	bne.n	800815e <USB_EPStartXfer+0xee4>
 8008144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008154:	b29a      	uxth	r2, r3
 8008156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	e3fe      	b.n	800895c <USB_EPStartXfer+0x16e2>
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <USB_EPStartXfer+0xf04>
 8008174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008178:	3301      	adds	r3, #1
 800817a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800817e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b29a      	uxth	r2, r3
 8008186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800818a:	b29b      	uxth	r3, r3
 800818c:	029b      	lsls	r3, r3, #10
 800818e:	b29b      	uxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	b29a      	uxth	r2, r3
 8008194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	e3df      	b.n	800895c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	78db      	ldrb	r3, [r3, #3]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	f040 8218 	bne.w	80085de <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f040 809d 	bne.w	80082fa <USB_EPStartXfer+0x1080>
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081dc:	b29b      	uxth	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081e4:	4413      	add	r3, r2
 80081e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	00da      	lsls	r2, r3, #3
 80081f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081fc:	4413      	add	r3, r2
 80081fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b3e      	cmp	r3, #62	@ 0x3e
 8008228:	d92b      	bls.n	8008282 <USB_EPStartXfer+0x1008>
 800822a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800823c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0xfe0>
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800825a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29a      	uxth	r2, r3
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29b      	uxth	r3, r3
 800826c:	4313      	orrs	r3, r2
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e070      	b.n	8008364 <USB_EPStartXfer+0x10ea>
 8008282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10c      	bne.n	80082ac <USB_EPStartXfer+0x1032>
 8008292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e05b      	b.n	8008364 <USB_EPStartXfer+0x10ea>
 80082ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USB_EPStartXfer+0x1062>
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d6:	3301      	adds	r3, #1
 80082d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	029b      	lsls	r3, r3, #10
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e034      	b.n	8008364 <USB_EPStartXfer+0x10ea>
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d12c      	bne.n	8008364 <USB_EPStartXfer+0x10ea>
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008326:	b29b      	uxth	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800832e:	4413      	add	r3, r2
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008346:	4413      	add	r3, r2
 8008348:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800834c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	b29a      	uxth	r2, r3
 800835e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	785b      	ldrb	r3, [r3, #1]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f040 809d 	bne.w	80084be <USB_EPStartXfer+0x1244>
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083a8:	4413      	add	r3, r2
 80083aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	00da      	lsls	r2, r3, #3
 80083bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083c0:	4413      	add	r3, r2
 80083c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80083ec:	d92b      	bls.n	8008446 <USB_EPStartXfer+0x11cc>
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <USB_EPStartXfer+0x11a4>
 8008414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008418:	3b01      	subs	r3, #1
 800841a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800841e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842a:	b29b      	uxth	r3, r3
 800842c:	029b      	lsls	r3, r3, #10
 800842e:	b29b      	uxth	r3, r3
 8008430:	4313      	orrs	r3, r2
 8008432:	b29b      	uxth	r3, r3
 8008434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843c:	b29a      	uxth	r2, r3
 800843e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	e069      	b.n	800851a <USB_EPStartXfer+0x12a0>
 8008446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10c      	bne.n	8008470 <USB_EPStartXfer+0x11f6>
 8008456:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008466:	b29a      	uxth	r2, r3
 8008468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	e054      	b.n	800851a <USB_EPStartXfer+0x12a0>
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <USB_EPStartXfer+0x1226>
 8008496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800849a:	3301      	adds	r3, #1
 800849c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	029b      	lsls	r3, r3, #10
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4313      	orrs	r3, r2
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e02d      	b.n	800851a <USB_EPStartXfer+0x12a0>
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d125      	bne.n	800851a <USB_EPStartXfer+0x12a0>
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084e4:	4413      	add	r3, r2
 80084e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	00da      	lsls	r2, r3, #3
 80084f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084fc:	4413      	add	r3, r2
 80084fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	b29a      	uxth	r2, r3
 8008514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008518:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8218 	beq.w	800895c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800852c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800854c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <USB_EPStartXfer+0x12ea>
 8008558:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800855c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10d      	bne.n	8008580 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008564:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 81f5 	bne.w	800895c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008572:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 81ee 	bne.w	800895c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	441a      	add	r2, r3
 80085c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]
 80085dc:	e1be      	b.n	800895c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	f040 81b4 	bne.w	8008958 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	429a      	cmp	r2, r3
 800860a:	d917      	bls.n	800863c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800860c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800861c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862c:	1ad2      	subs	r2, r2, r3
 800862e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	619a      	str	r2, [r3, #24]
 800863a:	e00e      	b.n	800865a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800863c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800864c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 8085 	bne.w	8008776 <USB_EPStartXfer+0x14fc>
 800866c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800867a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008690:	4413      	add	r3, r2
 8008692:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	00da      	lsls	r2, r3, #3
 80086a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086a8:	4413      	add	r3, r2
 80086aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086be:	b29a      	uxth	r2, r3
 80086c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80086cc:	d923      	bls.n	8008716 <USB_EPStartXfer+0x149c>
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USB_EPStartXfer+0x1474>
 80086e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	029b      	lsls	r3, r3, #10
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4313      	orrs	r3, r2
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	e060      	b.n	80087d8 <USB_EPStartXfer+0x155e>
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10c      	bne.n	8008738 <USB_EPStartXfer+0x14be>
 800871e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b29b      	uxth	r3, r3
 8008726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872e:	b29a      	uxth	r2, r3
 8008730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008734:	801a      	strh	r2, [r3, #0]
 8008736:	e04f      	b.n	80087d8 <USB_EPStartXfer+0x155e>
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <USB_EPStartXfer+0x14de>
 800874e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008752:	3301      	adds	r3, #1
 8008754:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008764:	b29b      	uxth	r3, r3
 8008766:	029b      	lsls	r3, r3, #10
 8008768:	b29b      	uxth	r3, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	e030      	b.n	80087d8 <USB_EPStartXfer+0x155e>
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d128      	bne.n	80087d8 <USB_EPStartXfer+0x155e>
 8008786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087aa:	4413      	add	r3, r2
 80087ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80087b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	00da      	lsls	r2, r3, #3
 80087be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087c2:	4413      	add	r3, r2
 80087c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 8085 	bne.w	8008902 <USB_EPStartXfer+0x1688>
 80087f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008814:	b29b      	uxth	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800881c:	4413      	add	r3, r2
 800881e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008834:	4413      	add	r3, r2
 8008836:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800883a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800883e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008856:	2b3e      	cmp	r3, #62	@ 0x3e
 8008858:	d923      	bls.n	80088a2 <USB_EPStartXfer+0x1628>
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <USB_EPStartXfer+0x1600>
 8008870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008874:	3b01      	subs	r3, #1
 8008876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29a      	uxth	r2, r3
 8008882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008886:	b29b      	uxth	r3, r3
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	b29b      	uxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b29b      	uxth	r3, r3
 8008890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008898:	b29a      	uxth	r2, r3
 800889a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e05c      	b.n	800895c <USB_EPStartXfer+0x16e2>
 80088a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10c      	bne.n	80088c4 <USB_EPStartXfer+0x164a>
 80088aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	e04b      	b.n	800895c <USB_EPStartXfer+0x16e2>
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <USB_EPStartXfer+0x166a>
 80088da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088de:	3301      	adds	r3, #1
 80088e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80088e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	029b      	lsls	r3, r3, #10
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	e02c      	b.n	800895c <USB_EPStartXfer+0x16e2>
 8008902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d124      	bne.n	800895c <USB_EPStartXfer+0x16e2>
 8008912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008920:	b29b      	uxth	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008928:	4413      	add	r3, r2
 800892a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800892e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	00da      	lsls	r2, r3, #3
 800893c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008940:	4413      	add	r3, r2
 8008942:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008946:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800894a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894e:	b29a      	uxth	r2, r3
 8008950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	e001      	b.n	800895c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e03a      	b.n	80089d2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800895c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800897e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008982:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008986:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800898a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800898e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008992:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008996:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800899a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80089bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d020      	beq.n	8008a30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	881b      	ldrh	r3, [r3, #0]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a04:	81bb      	strh	r3, [r7, #12]
 8008a06:	89bb      	ldrh	r3, [r7, #12]
 8008a08:	f083 0310 	eor.w	r3, r3, #16
 8008a0c:	81bb      	strh	r3, [r7, #12]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	441a      	add	r2, r3
 8008a18:	89bb      	ldrh	r3, [r7, #12]
 8008a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8013      	strh	r3, [r2, #0]
 8008a2e:	e01f      	b.n	8008a70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a46:	81fb      	strh	r3, [r7, #14]
 8008a48:	89fb      	ldrh	r3, [r7, #14]
 8008a4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a4e:	81fb      	strh	r3, [r7, #14]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	89fb      	ldrh	r3, [r7, #14]
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	7b1b      	ldrb	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 809d 	bne.w	8008bcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d04c      	beq.n	8008b34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	823b      	strh	r3, [r7, #16]
 8008aa8:	8a3b      	ldrh	r3, [r7, #16]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01b      	beq.n	8008aea <USB_EPClearStall+0x6c>
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac8:	81fb      	strh	r3, [r7, #14]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	441a      	add	r2, r3
 8008ad4:	89fb      	ldrh	r3, [r7, #14]
 8008ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ae2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	78db      	ldrb	r3, [r3, #3]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d06c      	beq.n	8008bcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b08:	81bb      	strh	r3, [r7, #12]
 8008b0a:	89bb      	ldrh	r3, [r7, #12]
 8008b0c:	f083 0320 	eor.w	r3, r3, #32
 8008b10:	81bb      	strh	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	441a      	add	r2, r3
 8008b1c:	89bb      	ldrh	r3, [r7, #12]
 8008b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8013      	strh	r3, [r2, #0]
 8008b32:	e04b      	b.n	8008bcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	82fb      	strh	r3, [r7, #22]
 8008b42:	8afb      	ldrh	r3, [r7, #22]
 8008b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01b      	beq.n	8008b84 <USB_EPClearStall+0x106>
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b62:	82bb      	strh	r3, [r7, #20]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	441a      	add	r2, r3
 8008b6e:	8abb      	ldrh	r3, [r7, #20]
 8008b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9a:	827b      	strh	r3, [r7, #18]
 8008b9c:	8a7b      	ldrh	r3, [r7, #18]
 8008b9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ba2:	827b      	strh	r3, [r7, #18]
 8008ba4:	8a7b      	ldrh	r3, [r7, #18]
 8008ba6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008baa:	827b      	strh	r3, [r7, #18]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	441a      	add	r2, r3
 8008bb6:	8a7b      	ldrh	r3, [r7, #18]
 8008bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b083      	sub	sp, #12
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d103      	bne.n	8008bf4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2280      	movs	r2, #128	@ 0x80
 8008bf0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= (uint16_t)USB_CNTR_RESUME;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	f043 0310 	orr.w	r3, r3, #16
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f023 0310 	bic.w	r3, r3, #16
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b08b      	sub	sp, #44	@ 0x2c
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	80fb      	strh	r3, [r7, #6]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008cba:	88bb      	ldrh	r3, [r7, #4]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cda:	e01b      	b.n	8008d14 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	b21a      	sxth	r2, r3
 8008cec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	8a7a      	ldrh	r2, [r7, #18]
 8008cfa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	3302      	adds	r3, #2
 8008d00:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	3301      	adds	r3, #1
 8008d06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	3b01      	subs	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e0      	bne.n	8008cdc <USB_WritePMA+0x38>
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	372c      	adds	r7, #44	@ 0x2c
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b08b      	sub	sp, #44	@ 0x2c
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4611      	mov	r1, r2
 8008d34:	461a      	mov	r2, r3
 8008d36:	460b      	mov	r3, r1
 8008d38:	80fb      	strh	r3, [r7, #6]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008d3e:	88bb      	ldrh	r3, [r7, #4]
 8008d40:	085b      	lsrs	r3, r3, #1
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d4e:	88fa      	ldrh	r2, [r7, #6]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d5e:	e018      	b.n	8008d92 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	0a1b      	lsrs	r3, r3, #8
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e3      	bne.n	8008d60 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008d98:	88bb      	ldrh	r3, [r7, #4]
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	701a      	strb	r2, [r3, #0]
  }
}
 8008db4:	bf00      	nop
 8008db6:	372c      	adds	r7, #44	@ 0x2c
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USBD_HID_Init>:
* @param  pdev: device instance
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
UNUSED(cfgidx);

USBD_HID_HandleTypeDef *hhid;

hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008dcc:	2010      	movs	r0, #16
 8008dce:	f002 f993 	bl	800b0f8 <USBD_static_malloc>
 8008dd2:	60f8      	str	r0, [r7, #12]

if (hhid == NULL)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <USBD_HID_Init+0x2e>
{
pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	32b0      	adds	r2, #176	@ 0xb0
 8008de4:	2100      	movs	r1, #0
 8008de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
return (uint8_t)USBD_EMEM;
 8008dea:	2302      	movs	r3, #2
 8008dec:	e048      	b.n	8008e80 <USBD_HID_Init+0xc0>
}

pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	32b0      	adds	r2, #176	@ 0xb0
 8008df8:	68f9      	ldr	r1, [r7, #12]
 8008dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	32b0      	adds	r2, #176	@ 0xb0
 8008e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
/* Get the Endpoints addresses allocated for this class instance */
HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7c1b      	ldrb	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10d      	bne.n	8008e36 <USBD_HID_Init+0x76>
{
pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e88 <USBD_HID_Init+0xc8>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3326      	adds	r3, #38	@ 0x26
 8008e30:	2207      	movs	r2, #7
 8008e32:	801a      	strh	r2, [r3, #0]
 8008e34:	e00c      	b.n	8008e50 <USBD_HID_Init+0x90>
}
else   /* LOW and FULL-speed endpoints */
{
pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008e36:	4b14      	ldr	r3, [pc, #80]	@ (8008e88 <USBD_HID_Init+0xc8>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	3326      	adds	r3, #38	@ 0x26
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	801a      	strh	r2, [r3, #0]
}

/* Open EP IN */
(void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008e50:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <USBD_HID_Init+0xc8>)
 8008e52:	7819      	ldrb	r1, [r3, #0]
 8008e54:	2304      	movs	r3, #4
 8008e56:	2203      	movs	r2, #3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 f806 	bl	800ae6a <USBD_LL_OpenEP>
pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e88 <USBD_HID_Init+0xc8>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 020f 	and.w	r2, r3, #15
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	3324      	adds	r3, #36	@ 0x24
 8008e74:	2201      	movs	r2, #1
 8008e76:	801a      	strh	r2, [r3, #0]

hhid->state = USBD_HID_IDLE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	731a      	strb	r2, [r3, #12]

return (uint8_t)USBD_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	200000be 	.word	0x200000be

08008e8c <USBD_HID_DeInit>:
* @param  pdev: device instance
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
/* Get the Endpoints addresses allocated for this class instance */
HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

/* Close HID EPs */
(void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008e98:	4b1f      	ldr	r3, [pc, #124]	@ (8008f18 <USBD_HID_DeInit+0x8c>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 f809 	bl	800aeb6 <USBD_LL_CloseEP>
pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f18 <USBD_HID_DeInit+0x8c>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3324      	adds	r3, #36	@ 0x24
 8008eba:	2200      	movs	r2, #0
 8008ebc:	801a      	strh	r2, [r3, #0]
pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008ebe:	4b16      	ldr	r3, [pc, #88]	@ (8008f18 <USBD_HID_DeInit+0x8c>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	f003 020f 	and.w	r2, r3, #15
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	3326      	adds	r3, #38	@ 0x26
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	801a      	strh	r2, [r3, #0]

/* Free allocated memory */
if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32b0      	adds	r2, #176	@ 0xb0
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d011      	beq.n	8008f0e <USBD_HID_DeInit+0x82>
{
(void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32b0      	adds	r2, #176	@ 0xb0
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f002 f90b 	bl	800b114 <USBD_static_free>
pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	32b0      	adds	r2, #176	@ 0xb0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}

return (uint8_t)USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	200000be 	.word	0x200000be

08008f1c <USBD_HID_Setup>:
* @param  pdev: instance
* @param  req: usb requests
* @retval status
*/
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	32b0      	adds	r2, #176	@ 0xb0
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	60fb      	str	r3, [r7, #12]
USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]
uint16_t len;
uint8_t *pbuf;
uint16_t status_info = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	817b      	strh	r3, [r7, #10]

if (hhid == NULL)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USBD_HID_Setup+0x2c>
{
return (uint8_t)USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e0e8      	b.n	800911a <USBD_HID_Setup+0x1fe>
}

switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d046      	beq.n	8008fe2 <USBD_HID_Setup+0xc6>
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	f040 80d8 	bne.w	800910a <USBD_HID_Setup+0x1ee>
{
case USB_REQ_TYPE_CLASS :
  switch (req->bRequest)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	3b02      	subs	r3, #2
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d836      	bhi.n	8008fd2 <USBD_HID_Setup+0xb6>
 8008f64:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <USBD_HID_Setup+0x50>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008fc3 	.word	0x08008fc3
 8008f70:	08008fa3 	.word	0x08008fa3
 8008f74:	08008fd3 	.word	0x08008fd3
 8008f78:	08008fd3 	.word	0x08008fd3
 8008f7c:	08008fd3 	.word	0x08008fd3
 8008f80:	08008fd3 	.word	0x08008fd3
 8008f84:	08008fd3 	.word	0x08008fd3
 8008f88:	08008fd3 	.word	0x08008fd3
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008f95 	.word	0x08008f95
  {
	case USBD_HID_REQ_SET_PROTOCOL:
	  hhid->Protocol = (uint8_t)(req->wValue);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	601a      	str	r2, [r3, #0]
	  break;
 8008fa0:	e01e      	b.n	8008fe0 <USBD_HID_Setup+0xc4>

	case USBD_HID_REQ_GET_PROTOCOL:
	  (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fb71 	bl	800a690 <USBD_CtlSendData>
	  break;
 8008fae:	e017      	b.n	8008fe0 <USBD_HID_Setup+0xc4>

	case USBD_HID_REQ_SET_IDLE:
	  hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	885b      	ldrh	r3, [r3, #2]
 8008fb4:	0a1b      	lsrs	r3, r3, #8
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	605a      	str	r2, [r3, #4]
	  break;
 8008fc0:	e00e      	b.n	8008fe0 <USBD_HID_Setup+0xc4>

	case USBD_HID_REQ_GET_IDLE:
	  (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fb60 	bl	800a690 <USBD_CtlSendData>
	  break;
 8008fd0:	e006      	b.n	8008fe0 <USBD_HID_Setup+0xc4>

	default:
	  USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 faea 	bl	800a5ae <USBD_CtlError>
	  ret = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
	  break;
 8008fde:	bf00      	nop
  }
  break;
 8008fe0:	e09a      	b.n	8009118 <USBD_HID_Setup+0x1fc>
case USB_REQ_TYPE_STANDARD:
  switch (req->bRequest)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b0b      	cmp	r3, #11
 8008fe8:	f200 8086 	bhi.w	80090f8 <USBD_HID_Setup+0x1dc>
 8008fec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff4 <USBD_HID_Setup+0xd8>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	08009025 	.word	0x08009025
 8008ff8:	08009107 	.word	0x08009107
 8008ffc:	080090f9 	.word	0x080090f9
 8009000:	080090f9 	.word	0x080090f9
 8009004:	080090f9 	.word	0x080090f9
 8009008:	080090f9 	.word	0x080090f9
 800900c:	0800904f 	.word	0x0800904f
 8009010:	080090f9 	.word	0x080090f9
 8009014:	080090f9 	.word	0x080090f9
 8009018:	080090f9 	.word	0x080090f9
 800901c:	080090a7 	.word	0x080090a7
 8009020:	080090d1 	.word	0x080090d1
  {
	case USB_REQ_GET_STATUS:
	  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b03      	cmp	r3, #3
 800902e:	d107      	bne.n	8009040 <USBD_HID_Setup+0x124>
	  {
		(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009030:	f107 030a 	add.w	r3, r7, #10
 8009034:	2202      	movs	r2, #2
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f001 fb29 	bl	800a690 <USBD_CtlSendData>
	  else
	  {
		USBD_CtlError(pdev, req);
		ret = USBD_FAIL;
	  }
	  break;
 800903e:	e063      	b.n	8009108 <USBD_HID_Setup+0x1ec>
		USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fab3 	bl	800a5ae <USBD_CtlError>
		ret = USBD_FAIL;
 8009048:	2303      	movs	r3, #3
 800904a:	75fb      	strb	r3, [r7, #23]
	  break;
 800904c:	e05c      	b.n	8009108 <USBD_HID_Setup+0x1ec>

	case USB_REQ_GET_DESCRIPTOR:
	  if ((req->wValue >> 8) == HID_REPORT_DESC)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	b29b      	uxth	r3, r3
 8009056:	2b22      	cmp	r3, #34	@ 0x22
 8009058:	d108      	bne.n	800906c <USBD_HID_Setup+0x150>
	  {
		len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	88db      	ldrh	r3, [r3, #6]
 800905e:	2b36      	cmp	r3, #54	@ 0x36
 8009060:	bf28      	it	cs
 8009062:	2336      	movcs	r3, #54	@ 0x36
 8009064:	82bb      	strh	r3, [r7, #20]
		pbuf = HID_MOUSE_ReportDesc;
 8009066:	4b2f      	ldr	r3, [pc, #188]	@ (8009124 <USBD_HID_Setup+0x208>)
 8009068:	613b      	str	r3, [r7, #16]
 800906a:	e015      	b.n	8009098 <USBD_HID_Setup+0x17c>
	  }
	  else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	885b      	ldrh	r3, [r3, #2]
 8009070:	0a1b      	lsrs	r3, r3, #8
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b21      	cmp	r3, #33	@ 0x21
 8009076:	d108      	bne.n	800908a <USBD_HID_Setup+0x16e>
	  {
		pbuf = USBD_HID_Desc;
 8009078:	4b2b      	ldr	r3, [pc, #172]	@ (8009128 <USBD_HID_Setup+0x20c>)
 800907a:	613b      	str	r3, [r7, #16]
		len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	88db      	ldrh	r3, [r3, #6]
 8009080:	2b09      	cmp	r3, #9
 8009082:	bf28      	it	cs
 8009084:	2309      	movcs	r3, #9
 8009086:	82bb      	strh	r3, [r7, #20]
 8009088:	e006      	b.n	8009098 <USBD_HID_Setup+0x17c>
	  }
	  else
	  {
		USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fa8e 	bl	800a5ae <USBD_CtlError>
		ret = USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	75fb      	strb	r3, [r7, #23]
		break;
 8009096:	e037      	b.n	8009108 <USBD_HID_Setup+0x1ec>
	  }
	  (void)USBD_CtlSendData(pdev, pbuf, len);
 8009098:	8abb      	ldrh	r3, [r7, #20]
 800909a:	461a      	mov	r2, r3
 800909c:	6939      	ldr	r1, [r7, #16]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 faf6 	bl	800a690 <USBD_CtlSendData>
	  break;
 80090a4:	e030      	b.n	8009108 <USBD_HID_Setup+0x1ec>

	case USB_REQ_GET_INTERFACE :
	  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d107      	bne.n	80090c2 <USBD_HID_Setup+0x1a6>
	  {
		(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3308      	adds	r3, #8
 80090b6:	2201      	movs	r2, #1
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fae8 	bl	800a690 <USBD_CtlSendData>
	  else
	  {
		USBD_CtlError(pdev, req);
		ret = USBD_FAIL;
	  }
	  break;
 80090c0:	e022      	b.n	8009108 <USBD_HID_Setup+0x1ec>
		USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 fa72 	bl	800a5ae <USBD_CtlError>
		ret = USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	75fb      	strb	r3, [r7, #23]
	  break;
 80090ce:	e01b      	b.n	8009108 <USBD_HID_Setup+0x1ec>

	case USB_REQ_SET_INTERFACE:
	  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d106      	bne.n	80090ea <USBD_HID_Setup+0x1ce>
	  {
		hhid->AltSetting = (uint8_t)(req->wValue);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	609a      	str	r2, [r3, #8]
	  else
	  {
		USBD_CtlError(pdev, req);
		ret = USBD_FAIL;
	  }
	  break;
 80090e8:	e00e      	b.n	8009108 <USBD_HID_Setup+0x1ec>
		USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fa5e 	bl	800a5ae <USBD_CtlError>
		ret = USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	75fb      	strb	r3, [r7, #23]
	  break;
 80090f6:	e007      	b.n	8009108 <USBD_HID_Setup+0x1ec>

	case USB_REQ_CLEAR_FEATURE:
	  break;

	default:
	  USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 fa57 	bl	800a5ae <USBD_CtlError>
	  ret = USBD_FAIL;
 8009100:	2303      	movs	r3, #3
 8009102:	75fb      	strb	r3, [r7, #23]
	  break;
 8009104:	e000      	b.n	8009108 <USBD_HID_Setup+0x1ec>
	  break;
 8009106:	bf00      	nop
  }
  break;
 8009108:	e006      	b.n	8009118 <USBD_HID_Setup+0x1fc>

default:
  USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fa4e 	bl	800a5ae <USBD_CtlError>
  ret = USBD_FAIL;
 8009112:	2303      	movs	r3, #3
 8009114:	75fb      	strb	r3, [r7, #23]
  break;
 8009116:	bf00      	nop
}

return (uint8_t)ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000088 	.word	0x20000088
 8009128:	20000070 	.word	0x20000070

0800912c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	80fb      	strh	r3, [r7, #6]
USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	32b0      	adds	r2, #176	@ 0xb0
 8009144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009148:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

if (hhid == NULL)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <USBD_HID_SendReport+0x28>
{
return (uint8_t)USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	e014      	b.n	800917e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
/* Get the Endpoints addresses allocated for this class instance */
HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b03      	cmp	r3, #3
 800915e:	d10d      	bne.n	800917c <USBD_HID_SendReport+0x50>
{
if (hhid->state == USBD_HID_IDLE)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	7b1b      	ldrb	r3, [r3, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <USBD_HID_SendReport+0x50>
{
  hhid->state = USBD_HID_BUSY;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2201      	movs	r2, #1
 800916c:	731a      	strb	r2, [r3, #12]
  (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800916e:	4b06      	ldr	r3, [pc, #24]	@ (8009188 <USBD_HID_SendReport+0x5c>)
 8009170:	7819      	ldrb	r1, [r3, #0]
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f001 ff45 	bl	800b006 <USBD_LL_Transmit>
}
}

return (uint8_t)USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200000be 	.word	0x200000be

0800918c <USBD_HID_GetFSCfgDesc>:
* @param  speed : current device speed
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009194:	2181      	movs	r1, #129	@ 0x81
 8009196:	4809      	ldr	r0, [pc, #36]	@ (80091bc <USBD_HID_GetFSCfgDesc+0x30>)
 8009198:	f000 fba9 	bl	80098ee <USBD_GetEpDesc>
 800919c:	60f8      	str	r0, [r7, #12]

if (pEpDesc != NULL)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <USBD_HID_GetFSCfgDesc+0x1e>
{
pEpDesc->bInterval = HID_FS_BINTERVAL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	220a      	movs	r2, #10
 80091a8:	719a      	strb	r2, [r3, #6]
}

*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2222      	movs	r2, #34	@ 0x22
 80091ae:	801a      	strh	r2, [r3, #0]
return USBD_HID_CfgDesc;
 80091b0:	4b02      	ldr	r3, [pc, #8]	@ (80091bc <USBD_HID_GetFSCfgDesc+0x30>)
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000004c 	.word	0x2000004c

080091c0 <USBD_HID_GetHSCfgDesc>:
* @param  speed : current device speed
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80091c8:	2181      	movs	r1, #129	@ 0x81
 80091ca:	4809      	ldr	r0, [pc, #36]	@ (80091f0 <USBD_HID_GetHSCfgDesc+0x30>)
 80091cc:	f000 fb8f 	bl	80098ee <USBD_GetEpDesc>
 80091d0:	60f8      	str	r0, [r7, #12]

if (pEpDesc != NULL)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <USBD_HID_GetHSCfgDesc+0x1e>
{
pEpDesc->bInterval = HID_HS_BINTERVAL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2207      	movs	r2, #7
 80091dc:	719a      	strb	r2, [r3, #6]
}

*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2222      	movs	r2, #34	@ 0x22
 80091e2:	801a      	strh	r2, [r3, #0]
return USBD_HID_CfgDesc;
 80091e4:	4b02      	ldr	r3, [pc, #8]	@ (80091f0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	2000004c 	.word	0x2000004c

080091f4 <USBD_HID_GetOtherSpeedCfgDesc>:
* @param  speed : current device speed
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80091fc:	2181      	movs	r1, #129	@ 0x81
 80091fe:	4809      	ldr	r0, [pc, #36]	@ (8009224 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009200:	f000 fb75 	bl	80098ee <USBD_GetEpDesc>
 8009204:	60f8      	str	r0, [r7, #12]

if (pEpDesc != NULL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
{
pEpDesc->bInterval = HID_FS_BINTERVAL;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	220a      	movs	r2, #10
 8009210:	719a      	strb	r2, [r3, #6]
}

*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2222      	movs	r2, #34	@ 0x22
 8009216:	801a      	strh	r2, [r3, #0]
return USBD_HID_CfgDesc;
 8009218:	4b02      	ldr	r3, [pc, #8]	@ (8009224 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	2000004c 	.word	0x2000004c

08009228 <USBD_HID_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
UNUSED(epnum);
/* Ensure that the FIFO is empty before a new transfer, this condition could
be caused by  a new transfer before the end of the previous transfer */
((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32b0      	adds	r2, #176	@ 0xb0
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	2200      	movs	r2, #0
 8009244:	731a      	strb	r2, [r3, #12]

return (uint8_t)USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	220a      	movs	r2, #10
 8009260:	801a      	strh	r2, [r3, #0]

return USBD_HID_DeviceQualifierDesc;
 8009262:	4b03      	ldr	r3, [pc, #12]	@ (8009270 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	2000007c 	.word	0x2000007c

08009274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	e01f      	b.n	80092cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	79fa      	ldrb	r2, [r7, #7]
 80092be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 fd67 	bl	800ad94 <USBD_LL_Init>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e025      	b.n	8009338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32ae      	adds	r2, #174	@ 0xae
 80092fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00f      	beq.n	8009328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32ae      	adds	r2, #174	@ 0xae
 8009312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009318:	f107 020e 	add.w	r2, r7, #14
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	4602      	mov	r2, r0
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fd73 	bl	800ae34 <USBD_LL_Start>
 800934e:	4603      	mov	r3, r0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f8a4 	bl	800a53a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b02      	cmp	r3, #2
 8009414:	d01a      	beq.n	800944c <USBD_LL_SetupStage+0x72>
 8009416:	2b02      	cmp	r3, #2
 8009418:	d822      	bhi.n	8009460 <USBD_LL_SetupStage+0x86>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <USBD_LL_SetupStage+0x4a>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <USBD_LL_SetupStage+0x5e>
 8009422:	e01d      	b.n	8009460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fad1 	bl	80099d4 <USBD_StdDevReq>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
      break;
 8009436:	e020      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fb39 	bl	8009ab8 <USBD_StdItfReq>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
      break;
 800944a:	e016      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fb9b 	bl	8009b90 <USBD_StdEPReq>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
      break;
 800945e:	e00c      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009466:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fd40 	bl	800aef4 <USBD_LL_StallEP>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
      break;
 8009478:	bf00      	nop
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	460b      	mov	r3, r1
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d16e      	bne.n	800957a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80094a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	f040 8098 	bne.w	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d913      	bls.n	80094e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	bf28      	it	cs
 80094d6:	4613      	movcs	r3, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f001 f903 	bl	800a6e8 <USBD_CtlContinueRx>
 80094e2:	e07d      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d014      	beq.n	800951c <USBD_LL_DataOutStage+0x98>
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d81d      	bhi.n	8009532 <USBD_LL_DataOutStage+0xae>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <USBD_LL_DataOutStage+0x7c>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d003      	beq.n	8009506 <USBD_LL_DataOutStage+0x82>
 80094fe:	e018      	b.n	8009532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]
            break;
 8009504:	e018      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800950c:	b2db      	uxtb	r3, r3
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f9d2 	bl	80098ba <USBD_CoreFindIF>
 8009516:	4603      	mov	r3, r0
 8009518:	75bb      	strb	r3, [r7, #22]
            break;
 800951a:	e00d      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009522:	b2db      	uxtb	r3, r3
 8009524:	4619      	mov	r1, r3
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f9d4 	bl	80098d4 <USBD_CoreFindEP>
 800952c:	4603      	mov	r3, r0
 800952e:	75bb      	strb	r3, [r7, #22]
            break;
 8009530:	e002      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]
            break;
 8009536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009538:	7dbb      	ldrb	r3, [r7, #22]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d119      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d113      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800954a:	7dba      	ldrb	r2, [r7, #22]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	32ae      	adds	r2, #174	@ 0xae
 8009550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800955a:	7dba      	ldrb	r2, [r7, #22]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009562:	7dba      	ldrb	r2, [r7, #22]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	@ 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 f8c9 	bl	800a70a <USBD_CtlSendStatus>
 8009578:	e032      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009580:	b2db      	uxtb	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f9a5 	bl	80098d4 <USBD_CoreFindEP>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	2bff      	cmp	r3, #255	@ 0xff
 8009592:	d025      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
 8009594:	7dbb      	ldrb	r3, [r7, #22]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d122      	bne.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d117      	bne.n	80095d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095a6:	7dba      	ldrb	r2, [r7, #22]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	32ae      	adds	r2, #174	@ 0xae
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00f      	beq.n	80095d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80095b6:	7dba      	ldrb	r2, [r7, #22]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095be:	7dba      	ldrb	r2, [r7, #22]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	32ae      	adds	r2, #174	@ 0xae
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	7afa      	ldrb	r2, [r7, #11]
 80095cc:	4611      	mov	r1, r2
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	4798      	blx	r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	e000      	b.n	80095e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	460b      	mov	r3, r1
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d16f      	bne.n	80096de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3314      	adds	r3, #20
 8009602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800960a:	2b02      	cmp	r3, #2
 800960c:	d15a      	bne.n	80096c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d914      	bls.n	8009644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	1ad2      	subs	r2, r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	461a      	mov	r2, r3
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f001 f848 	bl	800a6c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 fd03 	bl	800b048 <USBD_LL_PrepareReceive>
 8009642:	e03f      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	429a      	cmp	r2, r3
 800964e:	d11c      	bne.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009658:	429a      	cmp	r2, r3
 800965a:	d316      	bcc.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009666:	429a      	cmp	r2, r3
 8009668:	d20f      	bcs.n	800968a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f001 f829 	bl	800a6c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 fce0 	bl	800b048 <USBD_LL_PrepareReceive>
 8009688:	e01c      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b03      	cmp	r3, #3
 8009694:	d10f      	bne.n	80096b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b6:	2180      	movs	r1, #128	@ 0x80
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f001 fc1b 	bl	800aef4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f001 f836 	bl	800a730 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff fe42 	bl	8009358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80096dc:	e032      	b.n	8009744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	4619      	mov	r1, r3
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f8f3 	bl	80098d4 <USBD_CoreFindEP>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2bff      	cmp	r3, #255	@ 0xff
 80096f6:	d025      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d122      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b03      	cmp	r3, #3
 8009708:	d11c      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800970a:	7dfa      	ldrb	r2, [r7, #23]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	32ae      	adds	r2, #174	@ 0xae
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800971a:	7dfa      	ldrb	r2, [r7, #23]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009722:	7dfa      	ldrb	r2, [r7, #23]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	32ae      	adds	r2, #174	@ 0xae
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	7afa      	ldrb	r2, [r7, #11]
 8009730:	4611      	mov	r1, r2
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	4798      	blx	r3
 8009736:	4603      	mov	r3, r0
 8009738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800973a:	7dbb      	ldrb	r3, [r7, #22]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009740:	7dbb      	ldrb	r3, [r7, #22]
 8009742:	e000      	b.n	8009746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d014      	beq.n	80097b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00e      	beq.n	80097b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6852      	ldr	r2, [r2, #4]
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b4:	2340      	movs	r3, #64	@ 0x40
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fb55 	bl	800ae6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2240      	movs	r2, #64	@ 0x40
 80097cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d0:	2340      	movs	r3, #64	@ 0x40
 80097d2:	2200      	movs	r2, #0
 80097d4:	2180      	movs	r1, #128	@ 0x80
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fb47 	bl	800ae6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2240      	movs	r2, #64	@ 0x40
 80097e6:	621a      	str	r2, [r3, #32]

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b04      	cmp	r3, #4
 8009824:	d006      	beq.n	8009834 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982c:	b2da      	uxtb	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b04      	cmp	r3, #4
 800985c:	d106      	bne.n	800986c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009864:	b2da      	uxtb	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d110      	bne.n	80098b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	460b      	mov	r3, r1
 80098c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b086      	sub	sp, #24
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	885b      	ldrh	r3, [r3, #2]
 800990a:	b29b      	uxth	r3, r3
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	4293      	cmp	r3, r2
 8009912:	d91f      	bls.n	8009954 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800991a:	e013      	b.n	8009944 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800991c:	f107 030a 	add.w	r3, r7, #10
 8009920:	4619      	mov	r1, r3
 8009922:	6978      	ldr	r0, [r7, #20]
 8009924:	f000 f81b 	bl	800995e <USBD_GetNextDesc>
 8009928:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b05      	cmp	r3, #5
 8009930:	d108      	bne.n	8009944 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	789b      	ldrb	r3, [r3, #2]
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	429a      	cmp	r2, r3
 800993e:	d008      	beq.n	8009952 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009940:	2300      	movs	r3, #0
 8009942:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	b29a      	uxth	r2, r3
 800994a:	897b      	ldrh	r3, [r7, #10]
 800994c:	429a      	cmp	r2, r3
 800994e:	d8e5      	bhi.n	800991c <USBD_GetEpDesc+0x2e>
 8009950:	e000      	b.n	8009954 <USBD_GetEpDesc+0x66>
          break;
 8009952:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009954:	693b      	ldr	r3, [r7, #16]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	4413      	add	r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009988:	68fb      	ldr	r3, [r7, #12]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009996:	b480      	push	{r7}
 8009998:	b087      	sub	sp, #28
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	3301      	adds	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099b4:	8a3b      	ldrh	r3, [r7, #16]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	b21a      	sxth	r2, r3
 80099ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099be:	4313      	orrs	r3, r2
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099c4:	89fb      	ldrh	r3, [r7, #14]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
	...

080099d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099ea:	2b40      	cmp	r3, #64	@ 0x40
 80099ec:	d005      	beq.n	80099fa <USBD_StdDevReq+0x26>
 80099ee:	2b40      	cmp	r3, #64	@ 0x40
 80099f0:	d857      	bhi.n	8009aa2 <USBD_StdDevReq+0xce>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00f      	beq.n	8009a16 <USBD_StdDevReq+0x42>
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d153      	bne.n	8009aa2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	32ae      	adds	r2, #174	@ 0xae
 8009a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
      break;
 8009a14:	e04a      	b.n	8009aac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d83b      	bhi.n	8009a96 <USBD_StdDevReq+0xc2>
 8009a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <USBD_StdDevReq+0x50>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	08009a8d 	.word	0x08009a8d
 8009a2c:	08009a97 	.word	0x08009a97
 8009a30:	08009a83 	.word	0x08009a83
 8009a34:	08009a97 	.word	0x08009a97
 8009a38:	08009a57 	.word	0x08009a57
 8009a3c:	08009a4d 	.word	0x08009a4d
 8009a40:	08009a97 	.word	0x08009a97
 8009a44:	08009a6f 	.word	0x08009a6f
 8009a48:	08009a61 	.word	0x08009a61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa3c 	bl	8009ecc <USBD_GetDescriptor>
          break;
 8009a54:	e024      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fbcb 	bl	800a1f4 <USBD_SetAddress>
          break;
 8009a5e:	e01f      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc0a 	bl	800a27c <USBD_SetConfig>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a6c:	e018      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fcad 	bl	800a3d0 <USBD_GetConfig>
          break;
 8009a76:	e013      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fcde 	bl	800a43c <USBD_GetStatus>
          break;
 8009a80:	e00e      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fd0d 	bl	800a4a4 <USBD_SetFeature>
          break;
 8009a8a:	e009      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fd31 	bl	800a4f6 <USBD_ClrFeature>
          break;
 8009a94:	e004      	b.n	8009aa0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fd88 	bl	800a5ae <USBD_CtlError>
          break;
 8009a9e:	bf00      	nop
      }
      break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fd82 	bl	800a5ae <USBD_CtlError>
      break;
 8009aaa:	bf00      	nop
  }

  return ret;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop

08009ab8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ace:	2b40      	cmp	r3, #64	@ 0x40
 8009ad0:	d005      	beq.n	8009ade <USBD_StdItfReq+0x26>
 8009ad2:	2b40      	cmp	r3, #64	@ 0x40
 8009ad4:	d852      	bhi.n	8009b7c <USBD_StdItfReq+0xc4>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <USBD_StdItfReq+0x26>
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d14e      	bne.n	8009b7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d840      	bhi.n	8009b6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	889b      	ldrh	r3, [r3, #4]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d836      	bhi.n	8009b64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	889b      	ldrh	r3, [r3, #4]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff fedb 	bl	80098ba <USBD_CoreFindIF>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2bff      	cmp	r3, #255	@ 0xff
 8009b0c:	d01d      	beq.n	8009b4a <USBD_StdItfReq+0x92>
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d11a      	bne.n	8009b4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b14:	7bba      	ldrb	r2, [r7, #14]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	32ae      	adds	r2, #174	@ 0xae
 8009b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00f      	beq.n	8009b44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b24:	7bba      	ldrb	r2, [r7, #14]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b2c:	7bba      	ldrb	r2, [r7, #14]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	32ae      	adds	r2, #174	@ 0xae
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b42:	e004      	b.n	8009b4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b44:	2303      	movs	r3, #3
 8009b46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b48:	e001      	b.n	8009b4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	88db      	ldrh	r3, [r3, #6]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d110      	bne.n	8009b78 <USBD_StdItfReq+0xc0>
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10d      	bne.n	8009b78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fdd4 	bl	800a70a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b62:	e009      	b.n	8009b78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fd21 	bl	800a5ae <USBD_CtlError>
          break;
 8009b6c:	e004      	b.n	8009b78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fd1c 	bl	800a5ae <USBD_CtlError>
          break;
 8009b76:	e000      	b.n	8009b7a <USBD_StdItfReq+0xc2>
          break;
 8009b78:	bf00      	nop
      }
      break;
 8009b7a:	e004      	b.n	8009b86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fd15 	bl	800a5ae <USBD_CtlError>
      break;
 8009b84:	bf00      	nop
  }

  return ret;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	889b      	ldrh	r3, [r3, #4]
 8009ba2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bac:	2b40      	cmp	r3, #64	@ 0x40
 8009bae:	d007      	beq.n	8009bc0 <USBD_StdEPReq+0x30>
 8009bb0:	2b40      	cmp	r3, #64	@ 0x40
 8009bb2:	f200 817f 	bhi.w	8009eb4 <USBD_StdEPReq+0x324>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d02a      	beq.n	8009c10 <USBD_StdEPReq+0x80>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	f040 817a 	bne.w	8009eb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fe85 	bl	80098d4 <USBD_CoreFindEP>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bce:	7b7b      	ldrb	r3, [r7, #13]
 8009bd0:	2bff      	cmp	r3, #255	@ 0xff
 8009bd2:	f000 8174 	beq.w	8009ebe <USBD_StdEPReq+0x32e>
 8009bd6:	7b7b      	ldrb	r3, [r7, #13]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8170 	bne.w	8009ebe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bde:	7b7a      	ldrb	r2, [r7, #13]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009be6:	7b7a      	ldrb	r2, [r7, #13]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	32ae      	adds	r2, #174	@ 0xae
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8163 	beq.w	8009ebe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009bf8:	7b7a      	ldrb	r2, [r7, #13]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	32ae      	adds	r2, #174	@ 0xae
 8009bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c0e:	e156      	b.n	8009ebe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	785b      	ldrb	r3, [r3, #1]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d008      	beq.n	8009c2a <USBD_StdEPReq+0x9a>
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	f300 8145 	bgt.w	8009ea8 <USBD_StdEPReq+0x318>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 809b 	beq.w	8009d5a <USBD_StdEPReq+0x1ca>
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d03c      	beq.n	8009ca2 <USBD_StdEPReq+0x112>
 8009c28:	e13e      	b.n	8009ea8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d002      	beq.n	8009c3c <USBD_StdEPReq+0xac>
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d016      	beq.n	8009c68 <USBD_StdEPReq+0xd8>
 8009c3a:	e02c      	b.n	8009c96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00d      	beq.n	8009c5e <USBD_StdEPReq+0xce>
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	2b80      	cmp	r3, #128	@ 0x80
 8009c46:	d00a      	beq.n	8009c5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 f951 	bl	800aef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c52:	2180      	movs	r1, #128	@ 0x80
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 f94d 	bl	800aef4 <USBD_LL_StallEP>
 8009c5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c5c:	e020      	b.n	8009ca0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fca4 	bl	800a5ae <USBD_CtlError>
              break;
 8009c66:	e01b      	b.n	8009ca0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	885b      	ldrh	r3, [r3, #2]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10e      	bne.n	8009c8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <USBD_StdEPReq+0xfe>
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	2b80      	cmp	r3, #128	@ 0x80
 8009c7a:	d008      	beq.n	8009c8e <USBD_StdEPReq+0xfe>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	88db      	ldrh	r3, [r3, #6]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d104      	bne.n	8009c8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f933 	bl	800aef4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fd3b 	bl	800a70a <USBD_CtlSendStatus>

              break;
 8009c94:	e004      	b.n	8009ca0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc88 	bl	800a5ae <USBD_CtlError>
              break;
 8009c9e:	bf00      	nop
          }
          break;
 8009ca0:	e107      	b.n	8009eb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d002      	beq.n	8009cb4 <USBD_StdEPReq+0x124>
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d016      	beq.n	8009ce0 <USBD_StdEPReq+0x150>
 8009cb2:	e04b      	b.n	8009d4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00d      	beq.n	8009cd6 <USBD_StdEPReq+0x146>
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b80      	cmp	r3, #128	@ 0x80
 8009cbe:	d00a      	beq.n	8009cd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 f915 	bl	800aef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cca:	2180      	movs	r1, #128	@ 0x80
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f911 	bl	800aef4 <USBD_LL_StallEP>
 8009cd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cd4:	e040      	b.n	8009d58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fc68 	bl	800a5ae <USBD_CtlError>
              break;
 8009cde:	e03b      	b.n	8009d58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	885b      	ldrh	r3, [r3, #2]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d136      	bne.n	8009d56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d004      	beq.n	8009cfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 f91b 	bl	800af32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fd04 	bl	800a70a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fde4 	bl	80098d4 <USBD_CoreFindEP>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d10:	7b7b      	ldrb	r3, [r7, #13]
 8009d12:	2bff      	cmp	r3, #255	@ 0xff
 8009d14:	d01f      	beq.n	8009d56 <USBD_StdEPReq+0x1c6>
 8009d16:	7b7b      	ldrb	r3, [r7, #13]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d11c      	bne.n	8009d56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d1c:	7b7a      	ldrb	r2, [r7, #13]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d24:	7b7a      	ldrb	r2, [r7, #13]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	32ae      	adds	r2, #174	@ 0xae
 8009d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32ae      	adds	r2, #174	@ 0xae
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	4798      	blx	r3
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d4a:	e004      	b.n	8009d56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fc2d 	bl	800a5ae <USBD_CtlError>
              break;
 8009d54:	e000      	b.n	8009d58 <USBD_StdEPReq+0x1c8>
              break;
 8009d56:	bf00      	nop
          }
          break;
 8009d58:	e0ab      	b.n	8009eb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d002      	beq.n	8009d6c <USBD_StdEPReq+0x1dc>
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d032      	beq.n	8009dd0 <USBD_StdEPReq+0x240>
 8009d6a:	e097      	b.n	8009e9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <USBD_StdEPReq+0x1f2>
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b80      	cmp	r3, #128	@ 0x80
 8009d76:	d004      	beq.n	8009d82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fc17 	bl	800a5ae <USBD_CtlError>
                break;
 8009d80:	e091      	b.n	8009ea6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da0b      	bge.n	8009da2 <USBD_StdEPReq+0x212>
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	3310      	adds	r3, #16
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3304      	adds	r3, #4
 8009da0:	e00b      	b.n	8009dba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	3304      	adds	r3, #4
 8009dba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fc61 	bl	800a690 <USBD_CtlSendData>
              break;
 8009dce:	e06a      	b.n	8009ea6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	da11      	bge.n	8009dfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3324      	adds	r3, #36	@ 0x24
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d117      	bne.n	8009e22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fbda 	bl	800a5ae <USBD_CtlError>
                  break;
 8009dfa:	e054      	b.n	8009ea6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	f003 020f 	and.w	r2, r3, #15
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d104      	bne.n	8009e22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fbc7 	bl	800a5ae <USBD_CtlError>
                  break;
 8009e20:	e041      	b.n	8009ea6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	da0b      	bge.n	8009e42 <USBD_StdEPReq+0x2b2>
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e30:	4613      	mov	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	3310      	adds	r3, #16
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	3304      	adds	r3, #4
 8009e40:	e00b      	b.n	8009e5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	3304      	adds	r3, #4
 8009e5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <USBD_StdEPReq+0x2d8>
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	2b80      	cmp	r3, #128	@ 0x80
 8009e66:	d103      	bne.n	8009e70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e00e      	b.n	8009e8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 f87b 	bl	800af70 <USBD_LL_IsStallEP>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d003      	beq.n	8009e88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2201      	movs	r2, #1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e002      	b.n	8009e8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2202      	movs	r2, #2
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fbfb 	bl	800a690 <USBD_CtlSendData>
              break;
 8009e9a:	e004      	b.n	8009ea6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fb85 	bl	800a5ae <USBD_CtlError>
              break;
 8009ea4:	bf00      	nop
          }
          break;
 8009ea6:	e004      	b.n	8009eb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fb7f 	bl	800a5ae <USBD_CtlError>
          break;
 8009eb0:	bf00      	nop
      }
      break;
 8009eb2:	e005      	b.n	8009ec0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fb79 	bl	800a5ae <USBD_CtlError>
      break;
 8009ebc:	e000      	b.n	8009ec0 <USBD_StdEPReq+0x330>
      break;
 8009ebe:	bf00      	nop
  }

  return ret;
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	885b      	ldrh	r3, [r3, #2]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	2b0e      	cmp	r3, #14
 8009eee:	f200 8152 	bhi.w	800a196 <USBD_GetDescriptor+0x2ca>
 8009ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef8 <USBD_GetDescriptor+0x2c>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f69 	.word	0x08009f69
 8009efc:	08009f81 	.word	0x08009f81
 8009f00:	08009fc1 	.word	0x08009fc1
 8009f04:	0800a197 	.word	0x0800a197
 8009f08:	0800a197 	.word	0x0800a197
 8009f0c:	0800a137 	.word	0x0800a137
 8009f10:	0800a163 	.word	0x0800a163
 8009f14:	0800a197 	.word	0x0800a197
 8009f18:	0800a197 	.word	0x0800a197
 8009f1c:	0800a197 	.word	0x0800a197
 8009f20:	0800a197 	.word	0x0800a197
 8009f24:	0800a197 	.word	0x0800a197
 8009f28:	0800a197 	.word	0x0800a197
 8009f2c:	0800a197 	.word	0x0800a197
 8009f30:	08009f35 	.word	0x08009f35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3a:	69db      	ldr	r3, [r3, #28]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f56:	e126      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb27 	bl	800a5ae <USBD_CtlError>
        err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
      break;
 8009f66:	e11e      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7c12      	ldrb	r2, [r2, #16]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
      break;
 8009f7e:	e112      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7c1b      	ldrb	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10d      	bne.n	8009fa4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	f107 0208 	add.w	r2, r7, #8
 8009f94:	4610      	mov	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fa2:	e100      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	f107 0208 	add.w	r2, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	2202      	movs	r2, #2
 8009fbc:	701a      	strb	r2, [r3, #0]
      break;
 8009fbe:	e0f2      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	885b      	ldrh	r3, [r3, #2]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	f200 80ac 	bhi.w	800a124 <USBD_GetDescriptor+0x258>
 8009fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd4 <USBD_GetDescriptor+0x108>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	08009fed 	.word	0x08009fed
 8009fd8:	0800a021 	.word	0x0800a021
 8009fdc:	0800a055 	.word	0x0800a055
 8009fe0:	0800a089 	.word	0x0800a089
 8009fe4:	0800a0bd 	.word	0x0800a0bd
 8009fe8:	0800a0f1 	.word	0x0800a0f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	7c12      	ldrb	r2, [r2, #16]
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a00e:	e091      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 facb 	bl	800a5ae <USBD_CtlError>
            err++;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	3301      	adds	r3, #1
 800a01c:	72fb      	strb	r3, [r7, #11]
          break;
 800a01e:	e089      	b.n	800a134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7c12      	ldrb	r2, [r2, #16]
 800a038:	f107 0108 	add.w	r1, r7, #8
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a042:	e077      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fab1 	bl	800a5ae <USBD_CtlError>
            err++;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	3301      	adds	r3, #1
 800a050:	72fb      	strb	r3, [r7, #11]
          break;
 800a052:	e06f      	b.n	800a134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	7c12      	ldrb	r2, [r2, #16]
 800a06c:	f107 0108 	add.w	r1, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a076:	e05d      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa97 	bl	800a5ae <USBD_CtlError>
            err++;
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	3301      	adds	r3, #1
 800a084:	72fb      	strb	r3, [r7, #11]
          break;
 800a086:	e055      	b.n	800a134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00b      	beq.n	800a0ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	7c12      	ldrb	r2, [r2, #16]
 800a0a0:	f107 0108 	add.w	r1, r7, #8
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
 800a0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0aa:	e043      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fa7d 	bl	800a5ae <USBD_CtlError>
            err++;
 800a0b4:	7afb      	ldrb	r3, [r7, #11]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ba:	e03b      	b.n	800a134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00b      	beq.n	800a0e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	7c12      	ldrb	r2, [r2, #16]
 800a0d4:	f107 0108 	add.w	r1, r7, #8
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
 800a0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0de:	e029      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa63 	bl	800a5ae <USBD_CtlError>
            err++;
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ee:	e021      	b.n	800a134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7c12      	ldrb	r2, [r2, #16]
 800a108:	f107 0108 	add.w	r1, r7, #8
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
 800a110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a112:	e00f      	b.n	800a134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa49 	bl	800a5ae <USBD_CtlError>
            err++;
 800a11c:	7afb      	ldrb	r3, [r7, #11]
 800a11e:	3301      	adds	r3, #1
 800a120:	72fb      	strb	r3, [r7, #11]
          break;
 800a122:	e007      	b.n	800a134 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa41 	bl	800a5ae <USBD_CtlError>
          err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a132:	bf00      	nop
      }
      break;
 800a134:	e037      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	7c1b      	ldrb	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a146:	f107 0208 	add.w	r2, r7, #8
 800a14a:	4610      	mov	r0, r2
 800a14c:	4798      	blx	r3
 800a14e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a150:	e029      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa2a 	bl	800a5ae <USBD_CtlError>
        err++;
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	3301      	adds	r3, #1
 800a15e:	72fb      	strb	r3, [r7, #11]
      break;
 800a160:	e021      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	7c1b      	ldrb	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10d      	bne.n	800a186 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a172:	f107 0208 	add.w	r2, r7, #8
 800a176:	4610      	mov	r0, r2
 800a178:	4798      	blx	r3
 800a17a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3301      	adds	r3, #1
 800a180:	2207      	movs	r2, #7
 800a182:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a184:	e00f      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fa10 	bl	800a5ae <USBD_CtlError>
        err++;
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	3301      	adds	r3, #1
 800a192:	72fb      	strb	r3, [r7, #11]
      break;
 800a194:	e007      	b.n	800a1a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fa08 	bl	800a5ae <USBD_CtlError>
      err++;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a4:	bf00      	nop
  }

  if (err != 0U)
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d11e      	bne.n	800a1ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	88db      	ldrh	r3, [r3, #6]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d016      	beq.n	800a1e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a1b4:	893b      	ldrh	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00e      	beq.n	800a1d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	88da      	ldrh	r2, [r3, #6]
 800a1be:	893b      	ldrh	r3, [r7, #8]
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	bf28      	it	cs
 800a1c4:	4613      	movcs	r3, r2
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1ca:	893b      	ldrh	r3, [r7, #8]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fa5d 	bl	800a690 <USBD_CtlSendData>
 800a1d6:	e009      	b.n	800a1ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f9e7 	bl	800a5ae <USBD_CtlError>
 800a1e0:	e004      	b.n	800a1ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fa91 	bl	800a70a <USBD_CtlSendStatus>
 800a1e8:	e000      	b.n	800a1ec <USBD_GetDescriptor+0x320>
    return;
 800a1ea:	bf00      	nop
  }
}
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop

0800a1f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	889b      	ldrh	r3, [r3, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d131      	bne.n	800a26a <USBD_SetAddress+0x76>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	88db      	ldrh	r3, [r3, #6]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d12d      	bne.n	800a26a <USBD_SetAddress+0x76>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	885b      	ldrh	r3, [r3, #2]
 800a212:	2b7f      	cmp	r3, #127	@ 0x7f
 800a214:	d829      	bhi.n	800a26a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a220:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d104      	bne.n	800a238 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f9bc 	bl	800a5ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	e01d      	b.n	800a274 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7bfa      	ldrb	r2, [r7, #15]
 800a23c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 febf 	bl	800afc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa5d 	bl	800a70a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2202      	movs	r2, #2
 800a25a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	e009      	b.n	800a274 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a268:	e004      	b.n	800a274 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f99e 	bl	800a5ae <USBD_CtlError>
  }
}
 800a272:	bf00      	nop
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	4b4e      	ldr	r3, [pc, #312]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a292:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a294:	4b4d      	ldr	r3, [pc, #308]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d905      	bls.n	800a2a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f985 	bl	800a5ae <USBD_CtlError>
    return USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e08c      	b.n	800a3c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d002      	beq.n	800a2ba <USBD_SetConfig+0x3e>
 800a2b4:	2b03      	cmp	r3, #3
 800a2b6:	d029      	beq.n	800a30c <USBD_SetConfig+0x90>
 800a2b8:	e075      	b.n	800a3a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2ba:	4b44      	ldr	r3, [pc, #272]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d020      	beq.n	800a304 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2c2:	4b42      	ldr	r3, [pc, #264]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2cc:	4b3f      	ldr	r3, [pc, #252]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff f84b 	bl	800936e <USBD_SetClassConfig>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d008      	beq.n	800a2f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f962 	bl	800a5ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2f2:	e065      	b.n	800a3c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa08 	bl	800a70a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a302:	e05d      	b.n	800a3c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa00 	bl	800a70a <USBD_CtlSendStatus>
      break;
 800a30a:	e059      	b.n	800a3c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a30c:	4b2f      	ldr	r3, [pc, #188]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d112      	bne.n	800a33a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a31c:	4b2b      	ldr	r3, [pc, #172]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	461a      	mov	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a326:	4b29      	ldr	r3, [pc, #164]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff f83a 	bl	80093a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9e9 	bl	800a70a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a338:	e042      	b.n	800a3c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a33a:	4b24      	ldr	r3, [pc, #144]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d02a      	beq.n	800a39e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff f828 	bl	80093a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a356:	4b1d      	ldr	r3, [pc, #116]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a360:	4b1a      	ldr	r3, [pc, #104]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff f801 	bl	800936e <USBD_SetClassConfig>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00f      	beq.n	800a396 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f918 	bl	800a5ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff f80d 	bl	80093a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a394:	e014      	b.n	800a3c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f9b7 	bl	800a70a <USBD_CtlSendStatus>
      break;
 800a39c:	e010      	b.n	800a3c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9b3 	bl	800a70a <USBD_CtlSendStatus>
      break;
 800a3a4:	e00c      	b.n	800a3c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f900 	bl	800a5ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ae:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <USBD_SetConfig+0x150>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7fe fff6 	bl	80093a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3be:	bf00      	nop
  }

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000254 	.word	0x20000254

0800a3d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	88db      	ldrh	r3, [r3, #6]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d004      	beq.n	800a3ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f8e2 	bl	800a5ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ea:	e023      	b.n	800a434 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	dc02      	bgt.n	800a3fe <USBD_GetConfig+0x2e>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc03      	bgt.n	800a404 <USBD_GetConfig+0x34>
 800a3fc:	e015      	b.n	800a42a <USBD_GetConfig+0x5a>
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d00b      	beq.n	800a41a <USBD_GetConfig+0x4a>
 800a402:	e012      	b.n	800a42a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3308      	adds	r3, #8
 800a40e:	2201      	movs	r2, #1
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f93c 	bl	800a690 <USBD_CtlSendData>
        break;
 800a418:	e00c      	b.n	800a434 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	2201      	movs	r2, #1
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f934 	bl	800a690 <USBD_CtlSendData>
        break;
 800a428:	e004      	b.n	800a434 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f8be 	bl	800a5ae <USBD_CtlError>
        break;
 800a432:	bf00      	nop
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	2b02      	cmp	r3, #2
 800a452:	d81e      	bhi.n	800a492 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	88db      	ldrh	r3, [r3, #6]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d004      	beq.n	800a466 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f8a5 	bl	800a5ae <USBD_CtlError>
        break;
 800a464:	e01a      	b.n	800a49c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f043 0202 	orr.w	r2, r3, #2
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	330c      	adds	r3, #12
 800a486:	2202      	movs	r2, #2
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f900 	bl	800a690 <USBD_CtlSendData>
      break;
 800a490:	e004      	b.n	800a49c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f88a 	bl	800a5ae <USBD_CtlError>
      break;
 800a49a:	bf00      	nop
  }
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d107      	bne.n	800a4c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f923 	bl	800a70a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4c4:	e013      	b.n	800a4ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	885b      	ldrh	r3, [r3, #2]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d10b      	bne.n	800a4e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	889b      	ldrh	r3, [r3, #4]
 800a4d2:	0a1b      	lsrs	r3, r3, #8
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f913 	bl	800a70a <USBD_CtlSendStatus>
}
 800a4e4:	e003      	b.n	800a4ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f860 	bl	800a5ae <USBD_CtlError>
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a506:	b2db      	uxtb	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d80b      	bhi.n	800a526 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	885b      	ldrh	r3, [r3, #2]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d10c      	bne.n	800a530 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f8f3 	bl	800a70a <USBD_CtlSendStatus>
      }
      break;
 800a524:	e004      	b.n	800a530 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f840 	bl	800a5ae <USBD_CtlError>
      break;
 800a52e:	e000      	b.n	800a532 <USBD_ClrFeature+0x3c>
      break;
 800a530:	bf00      	nop
  }
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
 800a554:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7ff fa16 	bl	8009996 <SWAPBYTE>
 800a56a:	4603      	mov	r3, r0
 800a56c:	461a      	mov	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fa09 	bl	8009996 <SWAPBYTE>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3301      	adds	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff f9fc 	bl	8009996 <SWAPBYTE>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	80da      	strh	r2, [r3, #6]
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5b8:	2180      	movs	r1, #128	@ 0x80
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fc9a 	bl	800aef4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fc96 	bl	800aef4 <USBD_LL_StallEP>
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d036      	beq.n	800a654 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5ea:	6938      	ldr	r0, [r7, #16]
 800a5ec:	f000 f836 	bl	800a65c <USBD_GetLen>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	4413      	add	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	7812      	ldrb	r2, [r2, #0]
 800a608:	701a      	strb	r2, [r3, #0]
  idx++;
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	3301      	adds	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4413      	add	r3, r2
 800a616:	2203      	movs	r2, #3
 800a618:	701a      	strb	r2, [r3, #0]
  idx++;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	3301      	adds	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a620:	e013      	b.n	800a64a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	4413      	add	r3, r2
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	7812      	ldrb	r2, [r2, #0]
 800a62c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	3301      	adds	r3, #1
 800a632:	613b      	str	r3, [r7, #16]
    idx++;
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	3301      	adds	r3, #1
 800a638:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	4413      	add	r3, r2
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
    idx++;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	3301      	adds	r3, #1
 800a648:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e7      	bne.n	800a622 <USBD_GetString+0x52>
 800a652:	e000      	b.n	800a656 <USBD_GetString+0x86>
    return;
 800a654:	bf00      	nop
  }
}
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a66c:	e005      	b.n	800a67a <USBD_GetLen+0x1e>
  {
    len++;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	3301      	adds	r3, #1
 800a672:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	3301      	adds	r3, #1
 800a678:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1f5      	bne.n	800a66e <USBD_GetLen+0x12>
  }

  return len;
 800a682:	7bfb      	ldrb	r3, [r7, #15]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 fca5 	bl	800b006 <USBD_LL_Transmit>

  return USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fc94 	bl	800b006 <USBD_LL_Transmit>

  return USBD_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fca4 	bl	800b048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2204      	movs	r2, #4
 800a716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a71a:	2300      	movs	r3, #0
 800a71c:	2200      	movs	r2, #0
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fc70 	bl	800b006 <USBD_LL_Transmit>

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2205      	movs	r2, #5
 800a73c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a740:	2300      	movs	r3, #0
 800a742:	2200      	movs	r2, #0
 800a744:	2100      	movs	r1, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fc7e 	bl	800b048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <LL_APB1_GRP1_EnableClock>:
{
 800a756:	b480      	push	{r7}
 800a758:	b085      	sub	sp, #20
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a762:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a764:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a76e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a772:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4013      	ands	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a77a:	68fb      	ldr	r3, [r7, #12]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b098      	sub	sp, #96	@ 0x60
 800a78c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a78e:	f107 0318 	add.w	r3, r7, #24
 800a792:	2248      	movs	r2, #72	@ 0x48
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fcfa 	bl	800b190 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 800a79c:	463b      	mov	r3, r7
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	605a      	str	r2, [r3, #4]
 800a7a4:	609a      	str	r2, [r3, #8]
 800a7a6:	60da      	str	r2, [r3, #12]
 800a7a8:	611a      	str	r2, [r3, #16]
 800a7aa:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800a7ac:	2340      	movs	r3, #64	@ 0x40
 800a7ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800a7b8:	f107 0318 	add.w	r3, r7, #24
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fa f8b1 	bl	8004924 <HAL_RCC_OscConfig>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800a7c8:	f7f5 fff0 	bl	80007ac <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 800a7cc:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800a7d0:	f7ff ffc1 	bl	800a756 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800a7d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a7dc:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 800a7de:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800a7e2:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800a7e4:	2322      	movs	r3, #34	@ 0x22
 800a7e6:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800a7e8:	2320      	movs	r3, #32
 800a7ea:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fb f9ce 	bl	8005b90 <HAL_RCCEx_CRSConfig>
}
 800a7f4:	bf00      	nop
 800a7f6:	3760      	adds	r7, #96	@ 0x60
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <JoystickControl>:
  *         Handle joystick ADC input to control the mouse through USB Device
  * @param  None
  * @retval None
  */
void JoystickControl(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
	if ((((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup == 1) && (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_SUSPENDED))
 800a802:	4b35      	ldr	r3, [pc, #212]	@ (800a8d8 <JoystickControl+0xdc>)
 800a804:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a808:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d128      	bne.n	800a862 <JoystickControl+0x66>
 800a810:	4b31      	ldr	r3, [pc, #196]	@ (800a8d8 <JoystickControl+0xdc>)
 800a812:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d120      	bne.n	800a862 <JoystickControl+0x66>
	{
		if ((&hpcd_USB_FS)->Init.low_power_enable)
 800a820:	4b2d      	ldr	r3, [pc, #180]	@ (800a8d8 <JoystickControl+0xdc>)
 800a822:	7a5b      	ldrb	r3, [r3, #9]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d003      	beq.n	800a830 <JoystickControl+0x34>
		{
			HAL_ResumeTick();
 800a828:	f7f6 fa1c 	bl	8000c64 <HAL_ResumeTick>
			SystemClockConfig_Resume();
 800a82c:	f000 fc7c 	bl	800b128 <SystemClockConfig_Resume>
		}
		/* Activate Remote wakeup */
		HAL_PCD_ActivateRemoteWakeup((&hpcd_USB_FS));
 800a830:	4829      	ldr	r0, [pc, #164]	@ (800a8d8 <JoystickControl+0xdc>)
 800a832:	f7f8 fba1 	bl	8002f78 <HAL_PCD_ActivateRemoteWakeup>

		/* Remote wakeup delay */
		HAL_Delay(10);
 800a836:	200a      	movs	r0, #10
 800a838:	f7f6 f9f0 	bl	8000c1c <HAL_Delay>

		/* Disable Remote wakeup */
		HAL_PCD_DeActivateRemoteWakeup((&hpcd_USB_FS));
 800a83c:	4826      	ldr	r0, [pc, #152]	@ (800a8d8 <JoystickControl+0xdc>)
 800a83e:	f7f8 fba9 	bl	8002f94 <HAL_PCD_DeActivateRemoteWakeup>

		/* change state to configured */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state = USBD_STATE_CONFIGURED;
 800a842:	4b25      	ldr	r3, [pc, #148]	@ (800a8d8 <JoystickControl+0xdc>)
 800a844:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a848:	2203      	movs	r2, #3
 800a84a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

		/* Change remote_wakeup feature to 0 */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup = 0;
 800a84e:	4b22      	ldr	r3, [pc, #136]	@ (800a8d8 <JoystickControl+0xdc>)
 800a850:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
		remotewakeupon = 1;
 800a85a:	4b20      	ldr	r3, [pc, #128]	@ (800a8dc <JoystickControl+0xe0>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	601a      	str	r2, [r3, #0]
		gamepadBuff[2] =  joystick_RX;
		gamepadBuff[3] =  joystick_RY;
		gamepadBuff[4] =  _bt;
		USBD_HID_SendReport(&hUsbDeviceFS, gamepadBuff, 5);
	}
}
 800a860:	e036      	b.n	800a8d0 <JoystickControl+0xd4>
	else if (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_CONFIGURED){
 800a862:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d8 <JoystickControl+0xdc>)
 800a864:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d12e      	bne.n	800a8d0 <JoystickControl+0xd4>
		uint8_t _bt = (uint8_t)(bt_states.leftJS_isPressed << 3) | (bt_states.leftJS_isPressed << 2) | (bt_states.leftJS_isPressed << 1) | (bt_states.leftJS_isPressed);
 800a872:	4b1b      	ldr	r3, [pc, #108]	@ (800a8e0 <JoystickControl+0xe4>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	b25b      	sxtb	r3, r3
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	b25a      	sxtb	r2, r3
 800a87c:	4b18      	ldr	r3, [pc, #96]	@ (800a8e0 <JoystickControl+0xe4>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	b25b      	sxtb	r3, r3
 800a884:	4313      	orrs	r3, r2
 800a886:	b25a      	sxtb	r2, r3
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <JoystickControl+0xe4>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	b25b      	sxtb	r3, r3
 800a890:	4313      	orrs	r3, r2
 800a892:	b25a      	sxtb	r2, r3
 800a894:	4b12      	ldr	r3, [pc, #72]	@ (800a8e0 <JoystickControl+0xe4>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	4313      	orrs	r3, r2
 800a89c:	b25b      	sxtb	r3, r3
 800a89e:	71fb      	strb	r3, [r7, #7]
		gamepadBuff[0] =  joystick_X;
 800a8a0:	4b10      	ldr	r3, [pc, #64]	@ (800a8e4 <JoystickControl+0xe8>)
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	4b10      	ldr	r3, [pc, #64]	@ (800a8e8 <JoystickControl+0xec>)
 800a8a6:	701a      	strb	r2, [r3, #0]
		gamepadBuff[1] =  joystick_Y;
 800a8a8:	4b10      	ldr	r3, [pc, #64]	@ (800a8ec <JoystickControl+0xf0>)
 800a8aa:	781a      	ldrb	r2, [r3, #0]
 800a8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e8 <JoystickControl+0xec>)
 800a8ae:	705a      	strb	r2, [r3, #1]
		gamepadBuff[2] =  joystick_RX;
 800a8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f0 <JoystickControl+0xf4>)
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <JoystickControl+0xec>)
 800a8b6:	709a      	strb	r2, [r3, #2]
		gamepadBuff[3] =  joystick_RY;
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <JoystickControl+0xf8>)
 800a8ba:	781a      	ldrb	r2, [r3, #0]
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <JoystickControl+0xec>)
 800a8be:	70da      	strb	r2, [r3, #3]
		gamepadBuff[4] =  _bt;
 800a8c0:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <JoystickControl+0xec>)
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	7113      	strb	r3, [r2, #4]
		USBD_HID_SendReport(&hUsbDeviceFS, gamepadBuff, 5);
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	4907      	ldr	r1, [pc, #28]	@ (800a8e8 <JoystickControl+0xec>)
 800a8ca:	480b      	ldr	r0, [pc, #44]	@ (800a8f8 <JoystickControl+0xfc>)
 800a8cc:	f7fe fc2e 	bl	800912c <USBD_HID_SendReport>
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	2000058c 	.word	0x2000058c
 800a8dc:	20000258 	.word	0x20000258
 800a8e0:	20000240 	.word	0x20000240
 800a8e4:	20000244 	.word	0x20000244
 800a8e8:	2000025c 	.word	0x2000025c
 800a8ec:	20000245 	.word	0x20000245
 800a8f0:	20000246 	.word	0x20000246
 800a8f4:	20000247 	.word	0x20000247
 800a8f8:	20000264 	.word	0x20000264

0800a8fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
  USBD_Clock_Config();
 800a900:	f7ff ff42 	bl	800a788 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a904:	2200      	movs	r2, #0
 800a906:	490e      	ldr	r1, [pc, #56]	@ (800a940 <MX_USB_Device_Init+0x44>)
 800a908:	480e      	ldr	r0, [pc, #56]	@ (800a944 <MX_USB_Device_Init+0x48>)
 800a90a:	f7fe fcb3 	bl	8009274 <USBD_Init>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 800a914:	f7f5 ff4a 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a918:	490b      	ldr	r1, [pc, #44]	@ (800a948 <MX_USB_Device_Init+0x4c>)
 800a91a:	480a      	ldr	r0, [pc, #40]	@ (800a944 <MX_USB_Device_Init+0x48>)
 800a91c:	f7fe fcda 	bl	80092d4 <USBD_RegisterClass>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800a926:	f7f5 ff41 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a92a:	4806      	ldr	r0, [pc, #24]	@ (800a944 <MX_USB_Device_Init+0x48>)
 800a92c:	f7fe fd08 	bl	8009340 <USBD_Start>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d001      	beq.n	800a93a <MX_USB_Device_Init+0x3e>
    Error_Handler();
 800a936:	f7f5 ff39 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a93a:	bf00      	nop
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	200000c0 	.word	0x200000c0
 800a944:	20000264 	.word	0x20000264
 800a948:	20000014 	.word	0x20000014

0800a94c <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	6039      	str	r1, [r7, #0]
 800a956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2212      	movs	r2, #18
 800a95c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a95e:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <USBD_HID_DeviceDescriptor+0x20>)
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	200000e0 	.word	0x200000e0

0800a970 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2204      	movs	r2, #4
 800a980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a982:	4b03      	ldr	r3, [pc, #12]	@ (800a990 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	200000f4 	.word	0x200000f4

0800a994 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4907      	ldr	r1, [pc, #28]	@ (800a9c8 <USBD_HID_ProductStrDescriptor+0x34>)
 800a9aa:	4808      	ldr	r0, [pc, #32]	@ (800a9cc <USBD_HID_ProductStrDescriptor+0x38>)
 800a9ac:	f7ff fe10 	bl	800a5d0 <USBD_GetString>
 800a9b0:	e004      	b.n	800a9bc <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4904      	ldr	r1, [pc, #16]	@ (800a9c8 <USBD_HID_ProductStrDescriptor+0x34>)
 800a9b6:	4805      	ldr	r0, [pc, #20]	@ (800a9cc <USBD_HID_ProductStrDescriptor+0x38>)
 800a9b8:	f7ff fe0a 	bl	800a5d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9bc:	4b02      	ldr	r3, [pc, #8]	@ (800a9c8 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000540 	.word	0x20000540
 800a9cc:	0800b234 	.word	0x0800b234

0800a9d0 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	4904      	ldr	r1, [pc, #16]	@ (800a9f0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a9e0:	4804      	ldr	r0, [pc, #16]	@ (800a9f4 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a9e2:	f7ff fdf5 	bl	800a5d0 <USBD_GetString>
  return USBD_StrDesc;
 800a9e6:	4b02      	ldr	r3, [pc, #8]	@ (800a9f0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	20000540 	.word	0x20000540
 800a9f4:	0800b248 	.word	0x0800b248

0800a9f8 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6039      	str	r1, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	221a      	movs	r2, #26
 800aa08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa0a:	f000 f843 	bl	800aa94 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aa0e:	4b02      	ldr	r3, [pc, #8]	@ (800aa18 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	200000f8 	.word	0x200000f8

0800aa1c <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4907      	ldr	r1, [pc, #28]	@ (800aa50 <USBD_HID_ConfigStrDescriptor+0x34>)
 800aa32:	4808      	ldr	r0, [pc, #32]	@ (800aa54 <USBD_HID_ConfigStrDescriptor+0x38>)
 800aa34:	f7ff fdcc 	bl	800a5d0 <USBD_GetString>
 800aa38:	e004      	b.n	800aa44 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4904      	ldr	r1, [pc, #16]	@ (800aa50 <USBD_HID_ConfigStrDescriptor+0x34>)
 800aa3e:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <USBD_HID_ConfigStrDescriptor+0x38>)
 800aa40:	f7ff fdc6 	bl	800a5d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000540 	.word	0x20000540
 800aa54:	0800b260 	.word	0x0800b260

0800aa58 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d105      	bne.n	800aa76 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	4907      	ldr	r1, [pc, #28]	@ (800aa8c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800aa6e:	4808      	ldr	r0, [pc, #32]	@ (800aa90 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800aa70:	f7ff fdae 	bl	800a5d0 <USBD_GetString>
 800aa74:	e004      	b.n	800aa80 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	4904      	ldr	r1, [pc, #16]	@ (800aa8c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800aa7a:	4805      	ldr	r0, [pc, #20]	@ (800aa90 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800aa7c:	f7ff fda8 	bl	800a5d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa80:	4b02      	ldr	r3, [pc, #8]	@ (800aa8c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000540 	.word	0x20000540
 800aa90:	0800b26c 	.word	0x0800b26c

0800aa94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	@ (800aad8 <Get_SerialNum+0x44>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	@ (800aadc <Get_SerialNum+0x48>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	@ (800aae0 <Get_SerialNum+0x4c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d009      	beq.n	800aace <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaba:	2208      	movs	r2, #8
 800aabc:	4909      	ldr	r1, [pc, #36]	@ (800aae4 <Get_SerialNum+0x50>)
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f814 	bl	800aaec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aac4:	2204      	movs	r2, #4
 800aac6:	4908      	ldr	r1, [pc, #32]	@ (800aae8 <Get_SerialNum+0x54>)
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f000 f80f 	bl	800aaec <IntToUnicode>
  }
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	1fff7590 	.word	0x1fff7590
 800aadc:	1fff7594 	.word	0x1fff7594
 800aae0:	1fff7598 	.word	0x1fff7598
 800aae4:	200000fa 	.word	0x200000fa
 800aae8:	2000010a 	.word	0x2000010a

0800aaec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	75fb      	strb	r3, [r7, #23]
 800ab02:	e027      	b.n	800ab54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	0f1b      	lsrs	r3, r3, #28
 800ab08:	2b09      	cmp	r3, #9
 800ab0a:	d80b      	bhi.n	800ab24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	0f1b      	lsrs	r3, r3, #28
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	4619      	mov	r1, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3230      	adds	r2, #48	@ 0x30
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	e00a      	b.n	800ab3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	0f1b      	lsrs	r3, r3, #28
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	4619      	mov	r1, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	440b      	add	r3, r1
 800ab34:	3237      	adds	r2, #55	@ 0x37
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	3301      	adds	r3, #1
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4413      	add	r3, r2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	3301      	adds	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	7dfa      	ldrb	r2, [r7, #23]
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d3d3      	bcc.n	800ab04 <IntToUnicode+0x18>
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <LL_AHB2_GRP1_EnableClock>:
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ab72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ab82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <LL_APB1_GRP1_EnableClock>:
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800aba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800abb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4013      	ands	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800abc0:	68fb      	ldr	r3, [r7, #12]
}
 800abc2:	bf00      	nop
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abd8:	f107 030c 	add.w	r3, r7, #12
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	605a      	str	r2, [r3, #4]
 800abe2:	609a      	str	r2, [r3, #8]
 800abe4:	60da      	str	r2, [r3, #12]
 800abe6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a13      	ldr	r2, [pc, #76]	@ (800ac3c <HAL_PCD_MspInit+0x6c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d120      	bne.n	800ac34 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abf2:	2001      	movs	r0, #1
 800abf4:	f7ff ffb9 	bl	800ab6a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800abf8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800abfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abfe:	2302      	movs	r3, #2
 800ac00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac06:	2303      	movs	r3, #3
 800ac08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ac0a:	230a      	movs	r3, #10
 800ac0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac0e:	f107 030c 	add.w	r3, r7, #12
 800ac12:	4619      	mov	r1, r3
 800ac14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ac18:	f7f7 fc38 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac1c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800ac20:	f7ff ffbc 	bl	800ab9c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ac24:	2200      	movs	r2, #0
 800ac26:	2100      	movs	r1, #0
 800ac28:	2014      	movs	r0, #20
 800ac2a:	f7f7 f986 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ac2e:	2014      	movs	r0, #20
 800ac30:	f7f7 f99d 	bl	8001f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac34:	bf00      	nop
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	40006800 	.word	0x40006800

0800ac40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f7fe fbbf 	bl	80093da <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ac76:	78fa      	ldrb	r2, [r7, #3]
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	440b      	add	r3, r1
 800ac84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f7fe fbf9 	bl	8009484 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	440b      	add	r3, r1
 800acba:	3324      	adds	r3, #36	@ 0x24
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	78fb      	ldrb	r3, [r7, #3]
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7fe fc92 	bl	80095ea <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe fdcc 	bl	800987a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acf2:	2301      	movs	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	795b      	ldrb	r3, [r3, #5]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d001      	beq.n	800ad02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acfe:	f7f5 fd55 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fe fd70 	bl	80097f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe fd18 	bl	800974e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fd6b 	bl	8009812 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7a5b      	ldrb	r3, [r3, #9]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad44:	4b04      	ldr	r3, [pc, #16]	@ (800ad58 <HAL_PCD_SuspendCallback+0x30>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	4a03      	ldr	r2, [pc, #12]	@ (800ad58 <HAL_PCD_SuspendCallback+0x30>)
 800ad4a:	f043 0306 	orr.w	r3, r3, #6
 800ad4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	e000ed00 	.word	0xe000ed00

0800ad5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	7a5b      	ldrb	r3, [r3, #9]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad6c:	4b08      	ldr	r3, [pc, #32]	@ (800ad90 <HAL_PCD_ResumeCallback+0x34>)
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	4a07      	ldr	r2, [pc, #28]	@ (800ad90 <HAL_PCD_ResumeCallback+0x34>)
 800ad72:	f023 0306 	bic.w	r3, r3, #6
 800ad76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ad78:	f000 f9d6 	bl	800b128 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fd61 	bl	800984a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	e000ed00 	.word	0xe000ed00

0800ad94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ad9c:	4a23      	ldr	r2, [pc, #140]	@ (800ae2c <USBD_LL_Init+0x98>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a21      	ldr	r2, [pc, #132]	@ (800ae2c <USBD_LL_Init+0x98>)
 800ada8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800adac:	f7f9 fa4c 	bl	8004248 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800adb0:	4b1e      	ldr	r3, [pc, #120]	@ (800ae2c <USBD_LL_Init+0x98>)
 800adb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ae30 <USBD_LL_Init+0x9c>)
 800adb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800adb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae2c <USBD_LL_Init+0x98>)
 800adb8:	2208      	movs	r2, #8
 800adba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800adbc:	4b1b      	ldr	r3, [pc, #108]	@ (800ae2c <USBD_LL_Init+0x98>)
 800adbe:	2202      	movs	r2, #2
 800adc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800adc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ae2c <USBD_LL_Init+0x98>)
 800adc4:	2202      	movs	r2, #2
 800adc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800adc8:	4b18      	ldr	r3, [pc, #96]	@ (800ae2c <USBD_LL_Init+0x98>)
 800adca:	2200      	movs	r2, #0
 800adcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800adce:	4b17      	ldr	r3, [pc, #92]	@ (800ae2c <USBD_LL_Init+0x98>)
 800add0:	2200      	movs	r2, #0
 800add2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800add4:	4b15      	ldr	r3, [pc, #84]	@ (800ae2c <USBD_LL_Init+0x98>)
 800add6:	2200      	movs	r2, #0
 800add8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800adda:	4b14      	ldr	r3, [pc, #80]	@ (800ae2c <USBD_LL_Init+0x98>)
 800addc:	2200      	movs	r2, #0
 800adde:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ade0:	4812      	ldr	r0, [pc, #72]	@ (800ae2c <USBD_LL_Init+0x98>)
 800ade2:	f7f7 fcdb 	bl	800279c <HAL_PCD_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800adec:	f7f5 fcde 	bl	80007ac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800adf6:	2318      	movs	r3, #24
 800adf8:	2200      	movs	r2, #0
 800adfa:	2100      	movs	r1, #0
 800adfc:	f7f9 f998 	bl	8004130 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae06:	2358      	movs	r3, #88	@ 0x58
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2180      	movs	r1, #128	@ 0x80
 800ae0c:	f7f9 f990 	bl	8004130 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2181      	movs	r1, #129	@ 0x81
 800ae1e:	f7f9 f987 	bl	8004130 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	2000058c 	.word	0x2000058c
 800ae30:	40006800 	.word	0x40006800

0800ae34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7f7 fd74 	bl	8002938 <HAL_PCD_Start>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f96e 	bl	800b138 <USBD_Get_USB_Status>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b084      	sub	sp, #16
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	461a      	mov	r2, r3
 800ae78:	4603      	mov	r3, r0
 800ae7a:	70fb      	strb	r3, [r7, #3]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70bb      	strb	r3, [r7, #2]
 800ae80:	4613      	mov	r3, r2
 800ae82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae92:	78bb      	ldrb	r3, [r7, #2]
 800ae94:	883a      	ldrh	r2, [r7, #0]
 800ae96:	78f9      	ldrb	r1, [r7, #3]
 800ae98:	f7f7 febb 	bl	8002c12 <HAL_PCD_EP_Open>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f948 	bl	800b138 <USBD_Get_USB_Status>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aed0:	78fa      	ldrb	r2, [r7, #3]
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f7 fef9 	bl	8002ccc <HAL_PCD_EP_Close>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 f929 	bl	800b138 <USBD_Get_USB_Status>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	460b      	mov	r3, r1
 800aefe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7f7 ff8a 	bl	8002e2c <HAL_PCD_EP_SetStall>
 800af18:	4603      	mov	r3, r0
 800af1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f90a 	bl	800b138 <USBD_Get_USB_Status>
 800af24:	4603      	mov	r3, r0
 800af26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af28:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af4c:	78fa      	ldrb	r2, [r7, #3]
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f7f7 ffbd 	bl	8002ed0 <HAL_PCD_EP_ClrStall>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 f8eb 	bl	800b138 <USBD_Get_USB_Status>
 800af62:	4603      	mov	r3, r0
 800af64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af66:	7bbb      	ldrb	r3, [r7, #14]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	da0b      	bge.n	800afa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af92:	68f9      	ldr	r1, [r7, #12]
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	440b      	add	r3, r1
 800af9e:	3312      	adds	r3, #18
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	e00b      	b.n	800afbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afaa:	68f9      	ldr	r1, [r7, #12]
 800afac:	4613      	mov	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	440b      	add	r3, r1
 800afb6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800afba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afe2:	78fa      	ldrb	r2, [r7, #3]
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f7 fdef 	bl	8002bca <HAL_PCD_SetAddress>
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f8a0 	bl	800b138 <USBD_Get_USB_Status>
 800aff8:	4603      	mov	r3, r0
 800affa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affc:	7bbb      	ldrb	r3, [r7, #14]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]
 800b012:	460b      	mov	r3, r1
 800b014:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b024:	7af9      	ldrb	r1, [r7, #11]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	f7f7 fec8 	bl	8002dbe <HAL_PCD_EP_Transmit>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 f87f 	bl	800b138 <USBD_Get_USB_Status>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b03e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	607a      	str	r2, [r7, #4]
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	460b      	mov	r3, r1
 800b056:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b066:	7af9      	ldrb	r1, [r7, #11]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	f7f7 fe76 	bl	8002d5c <HAL_PCD_EP_Receive>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	4618      	mov	r0, r3
 800b078:	f000 f85e 	bl	800b138 <USBD_Get_USB_Status>
 800b07c:	4603      	mov	r3, r0
 800b07e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b080:	7dbb      	ldrb	r3, [r7, #22]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b098:	78fb      	ldrb	r3, [r7, #3]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <HAL_PCDEx_LPM_Callback+0x18>
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d013      	beq.n	800b0ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b0a2:	e023      	b.n	800b0ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	7a5b      	ldrb	r3, [r3, #9]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d007      	beq.n	800b0bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b0ac:	f000 f83c 	bl	800b128 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0b0:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	4a0f      	ldr	r2, [pc, #60]	@ (800b0f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0b6:	f023 0306 	bic.w	r3, r3, #6
 800b0ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fbc1 	bl	800984a <USBD_LL_Resume>
    break;
 800b0c8:	e010      	b.n	800b0ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fe fb9e 	bl	8009812 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7a5b      	ldrb	r3, [r3, #9]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0de:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	4a04      	ldr	r2, [pc, #16]	@ (800b0f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0e4:	f043 0306 	orr.w	r3, r3, #6
 800b0e8:	6113      	str	r3, [r2, #16]
    break;
 800b0ea:	bf00      	nop
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	e000ed00 	.word	0xe000ed00

0800b0f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b100:	4b03      	ldr	r3, [pc, #12]	@ (800b110 <USBD_static_malloc+0x18>)
}
 800b102:	4618      	mov	r0, r3
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20000868 	.word	0x20000868

0800b114 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
void SystemClockConfig_Resume(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b12c:	f7f5 f974 	bl	8000418 <SystemClock_Config>
  USBD_Clock_Config();
 800b130:	f7ff fb2a 	bl	800a788 <USBD_Clock_Config>
}
 800b134:	bf00      	nop
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d817      	bhi.n	800b17c <USBD_Get_USB_Status+0x44>
 800b14c:	a201      	add	r2, pc, #4	@ (adr r2, 800b154 <USBD_Get_USB_Status+0x1c>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b165 	.word	0x0800b165
 800b158:	0800b16b 	.word	0x0800b16b
 800b15c:	0800b171 	.word	0x0800b171
 800b160:	0800b177 	.word	0x0800b177
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
    break;
 800b168:	e00b      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b16a:	2303      	movs	r3, #3
 800b16c:	73fb      	strb	r3, [r7, #15]
    break;
 800b16e:	e008      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b170:	2301      	movs	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
    break;
 800b174:	e005      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	73fb      	strb	r3, [r7, #15]
    break;
 800b17a:	e002      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	73fb      	strb	r3, [r7, #15]
    break;
 800b180:	bf00      	nop
  }
  return usb_status;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <memset>:
 800b190:	4402      	add	r2, r0
 800b192:	4603      	mov	r3, r0
 800b194:	4293      	cmp	r3, r2
 800b196:	d100      	bne.n	800b19a <memset+0xa>
 800b198:	4770      	bx	lr
 800b19a:	f803 1b01 	strb.w	r1, [r3], #1
 800b19e:	e7f9      	b.n	800b194 <memset+0x4>

0800b1a0 <__libc_init_array>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b1d8 <__libc_init_array+0x38>)
 800b1a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b1dc <__libc_init_array+0x3c>)
 800b1a6:	1b64      	subs	r4, r4, r5
 800b1a8:	10a4      	asrs	r4, r4, #2
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	42a6      	cmp	r6, r4
 800b1ae:	d109      	bne.n	800b1c4 <__libc_init_array+0x24>
 800b1b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b1e0 <__libc_init_array+0x40>)
 800b1b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b1e4 <__libc_init_array+0x44>)
 800b1b4:	f000 f818 	bl	800b1e8 <_init>
 800b1b8:	1b64      	subs	r4, r4, r5
 800b1ba:	10a4      	asrs	r4, r4, #2
 800b1bc:	2600      	movs	r6, #0
 800b1be:	42a6      	cmp	r6, r4
 800b1c0:	d105      	bne.n	800b1ce <__libc_init_array+0x2e>
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c8:	4798      	blx	r3
 800b1ca:	3601      	adds	r6, #1
 800b1cc:	e7ee      	b.n	800b1ac <__libc_init_array+0xc>
 800b1ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d2:	4798      	blx	r3
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	e7f2      	b.n	800b1be <__libc_init_array+0x1e>
 800b1d8:	0800b2fc 	.word	0x0800b2fc
 800b1dc:	0800b2fc 	.word	0x0800b2fc
 800b1e0:	0800b2fc 	.word	0x0800b2fc
 800b1e4:	0800b300 	.word	0x0800b300

0800b1e8 <_init>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr

0800b1f4 <_fini>:
 800b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f6:	bf00      	nop
 800b1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fa:	bc08      	pop	{r3}
 800b1fc:	469e      	mov	lr, r3
 800b1fe:	4770      	bx	lr
