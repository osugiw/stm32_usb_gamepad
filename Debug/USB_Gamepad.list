
USB_Gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800b004  0800b004  0000c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b0f8  0800b0f8  0000c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b0fc  0800b0fc  0000c0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000010c  20000008  0800b100  0000d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000758  20000114  0800b20c  0000d114  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000086c  0800b20c  0000d86c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000d114  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b518  00000000  00000000  0000d144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f01  00000000  00000000  0002865c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d58  00000000  00000000  0002c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001649  00000000  00000000  0002e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025e2c  00000000  00000000  0002f901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c3fa  00000000  00000000  0005572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000edc75  00000000  00000000  00071b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015f79c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007bd0  00000000  00000000  0015f7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001673b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000114 	.word	0x20000114
 8000158:	00000000 	.word	0x00000000
 800015c:	0800afec 	.word	0x0800afec

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000118 	.word	0x20000118
 8000178:	0800afec 	.word	0x0800afec

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	joystick_X = (int8_t)rawADC[0] - 128;
 80001e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3b80      	subs	r3, #128	@ 0x80
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 80001f2:	701a      	strb	r2, [r3, #0]
	joystick_Y = (int8_t)rawADC[1] - 128;
 80001f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	3b80      	subs	r3, #128	@ 0x80
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b0b      	ldr	r3, [pc, #44]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 80001fe:	701a      	strb	r2, [r3, #0]
	joystick_RX = (int8_t)rawADC[2] - 128;
 8000200:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 8000202:	789b      	ldrb	r3, [r3, #2]
 8000204:	3b80      	subs	r3, #128	@ 0x80
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <HAL_ADC_ConvCpltCallback+0x50>)
 800020a:	701a      	strb	r2, [r3, #0]
	joystick_RY = (int8_t)rawADC[3] - 128;
 800020c:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <HAL_ADC_ConvCpltCallback+0x44>)
 800020e:	78db      	ldrb	r3, [r3, #3]
 8000210:	3b80      	subs	r3, #128	@ 0x80
 8000212:	b2da      	uxtb	r2, r3
 8000214:	4b07      	ldr	r3, [pc, #28]	@ (8000234 <HAL_ADC_ConvCpltCallback+0x54>)
 8000216:	701a      	strb	r2, [r3, #0]
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	20000244 	.word	0x20000244
 8000228:	20000240 	.word	0x20000240
 800022c:	20000241 	.word	0x20000241
 8000230:	20000242 	.word	0x20000242
 8000234:	20000243 	.word	0x20000243

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 fba0 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f822 	bl	8000288 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000244:	f000 f88c 	bl	8000360 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f9b8 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 800024c:	f000 f9a4 	bl	8000598 <MX_DMA_Init>
  MX_ADC1_Init();
 8000250:	f000 f8b8 	bl	80003c4 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8000254:	f00a fa54 	bl	800a700 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000258:	f000 f94a 	bl	80004f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rawADC, 4);
 800025c:	2204      	movs	r2, #4
 800025e:	4907      	ldr	r1, [pc, #28]	@ (800027c <main+0x44>)
 8000260:	4807      	ldr	r0, [pc, #28]	@ (8000280 <main+0x48>)
 8000262:	f000 ff5b 	bl	800111c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000266:	4807      	ldr	r0, [pc, #28]	@ (8000284 <main+0x4c>)
 8000268:	f005 fd54 	bl	8005d14 <HAL_TIM_Base_Start>
//		  adc_lastTime = HAL_GetTick();
//		  HAL_ADC_Start_DMA(&hadc1, rawADC, 4);
//	  }

	  // Detect user input and control the mouse
	  JoystickControl();
 800026c:	f00a f9e6 	bl	800a63c <JoystickControl>
	  HAL_Delay(10);
 8000270:	200a      	movs	r0, #10
 8000272:	f000 fc0b 	bl	8000a8c <HAL_Delay>
	  JoystickControl();
 8000276:	bf00      	nop
 8000278:	e7f8      	b.n	800026c <main+0x34>
 800027a:	bf00      	nop
 800027c:	20000244 	.word	0x20000244
 8000280:	20000130 	.word	0x20000130
 8000284:	200001f4 	.word	0x200001f4

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09a      	sub	sp, #104	@ 0x68
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0320 	add.w	r3, r7, #32
 8000292:	2248      	movs	r2, #72	@ 0x48
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f00a fe7c 	bl	800af94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ae:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <SystemClock_Config+0xd4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <SystemClock_Config+0xd4>)
 80002b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	4b27      	ldr	r3, [pc, #156]	@ (800035c <SystemClock_Config+0xd4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80002ca:	2326      	movs	r3, #38	@ 0x26
 80002cc:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002ce:	2300      	movs	r3, #0
 80002d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	2340      	movs	r3, #64	@ 0x40
 80002de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002e0:	2300      	movs	r3, #0
 80002e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e4:	2360      	movs	r3, #96	@ 0x60
 80002e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002ec:	2301      	movs	r3, #1
 80002ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002f4:	2320      	movs	r3, #32
 80002f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80002fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000302:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000308:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0320 	add.w	r3, r7, #32
 800030e:	4618      	mov	r0, r3
 8000310:	f004 fa28 	bl	8004764 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031a:	f000 f97f 	bl	800061c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800031e:	236f      	movs	r3, #111	@ 0x6f
 8000320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2303      	movs	r3, #3
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000332:	2380      	movs	r3, #128	@ 0x80
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2103      	movs	r1, #3
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fd84 	bl	8004e4c <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800034a:	f000 f967 	bl	800061c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800034e:	f005 fb38 	bl	80059c2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000352:	bf00      	nop
 8000354:	3768      	adds	r7, #104	@ 0x68
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	58000400 	.word	0x58000400

08000360 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	@ 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000366:	463b      	mov	r3, r7
 8000368:	2250      	movs	r2, #80	@ 0x50
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f00a fe11 	bl	800af94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000372:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8000376:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000378:	2318      	movs	r3, #24
 800037a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800037c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000380:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000388:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800038c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800038e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000392:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000394:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000398:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800039a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800039e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	4618      	mov	r0, r3
 80003ac:	f005 f993 	bl	80056d6 <HAL_RCCEx_PeriphCLKConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80003b6:	f000 f931 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003ba:	bf00      	nop
 80003bc:	3750      	adds	r7, #80	@ 0x50
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003da:	4b3f      	ldr	r3, [pc, #252]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003dc:	4a3f      	ldr	r2, [pc, #252]	@ (80004dc <MX_ADC1_Init+0x118>)
 80003de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003e0:	4b3d      	ldr	r3, [pc, #244]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80003e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80003e8:	4b3b      	ldr	r3, [pc, #236]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003ea:	2210      	movs	r2, #16
 80003ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ee:	4b3a      	ldr	r3, [pc, #232]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f4:	4b38      	ldr	r3, [pc, #224]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003fa:	4b37      	ldr	r3, [pc, #220]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80003fc:	2208      	movs	r2, #8
 80003fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000400:	4b35      	ldr	r3, [pc, #212]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000402:	2200      	movs	r2, #0
 8000404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000406:	4b34      	ldr	r3, [pc, #208]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000408:	2200      	movs	r2, #0
 800040a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800040c:	4b32      	ldr	r3, [pc, #200]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800040e:	2204      	movs	r2, #4
 8000410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000412:	4b31      	ldr	r3, [pc, #196]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000414:	2200      	movs	r2, #0
 8000416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800041a:	4b2f      	ldr	r3, [pc, #188]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800041c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000420:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000422:	4b2d      	ldr	r3, [pc, #180]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000424:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800042a:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800042c:	2201      	movs	r2, #1
 800042e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000432:	4b29      	ldr	r3, [pc, #164]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000434:	2200      	movs	r2, #0
 8000436:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000438:	4b27      	ldr	r3, [pc, #156]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000440:	4825      	ldr	r0, [pc, #148]	@ (80004d8 <MX_ADC1_Init+0x114>)
 8000442:	f000 fd1f 	bl	8000e84 <HAL_ADC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800044c:	f000 f8e6 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000450:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <MX_ADC1_Init+0x11c>)
 8000452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000454:	2306      	movs	r3, #6
 8000456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000458:	2307      	movs	r3, #7
 800045a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800045c:	237f      	movs	r3, #127	@ 0x7f
 800045e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000460:	2304      	movs	r3, #4
 8000462:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	463b      	mov	r3, r7
 800046a:	4619      	mov	r1, r3
 800046c:	481a      	ldr	r0, [pc, #104]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800046e:	f000 feed 	bl	800124c <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000478:	f000 f8d0 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800047c:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <MX_ADC1_Init+0x120>)
 800047e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000480:	230c      	movs	r3, #12
 8000482:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4813      	ldr	r0, [pc, #76]	@ (80004d8 <MX_ADC1_Init+0x114>)
 800048a:	f000 fedf 	bl	800124c <HAL_ADC_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000494:	f000 f8c2 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000498:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <MX_ADC1_Init+0x124>)
 800049a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800049c:	2312      	movs	r3, #18
 800049e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	4619      	mov	r1, r3
 80004a4:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80004a6:	f000 fed1 	bl	800124c <HAL_ADC_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80004b0:	f000 f8b4 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <MX_ADC1_Init+0x128>)
 80004b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004b8:	2318      	movs	r3, #24
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_ADC1_Init+0x114>)
 80004c2:	f000 fec3 	bl	800124c <HAL_ADC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80004cc:	f000 f8a6 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000130 	.word	0x20000130
 80004dc:	50040000 	.word	0x50040000
 80004e0:	04300002 	.word	0x04300002
 80004e4:	08600004 	.word	0x08600004
 80004e8:	19200040 	.word	0x19200040
 80004ec:	14f00020 	.word	0x14f00020

080004f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800050e:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000510:	4a20      	ldr	r2, [pc, #128]	@ (8000594 <MX_TIM1_Init+0xa4>)
 8000512:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000516:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800051a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <MX_TIM1_Init+0xa0>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000522:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000524:	2263      	movs	r2, #99	@ 0x63
 8000526:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <MX_TIM1_Init+0xa0>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800052e:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000534:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800053a:	4815      	ldr	r0, [pc, #84]	@ (8000590 <MX_TIM1_Init+0xa0>)
 800053c:	f005 fb93 	bl	8005c66 <HAL_TIM_Base_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000546:	f000 f869 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800054a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000558:	f005 fd29 	bl	8005fae <HAL_TIM_ConfigClockSource>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000562:	f000 f85b 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000566:	2320      	movs	r3, #32
 8000568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_TIM1_Init+0xa0>)
 8000578:	f005 ff20 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000582:	f000 f84b 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200001f4 	.word	0x200001f4
 8000594:	40012c00 	.word	0x40012c00

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800059c:	2004      	movs	r0, #4
 800059e:	f7ff fded 	bl	800017c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff fdea 	bl	800017c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	200b      	movs	r0, #11
 80005ae:	f001 fbfc 	bl	8001daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b2:	200b      	movs	r0, #11
 80005b4:	f001 fc13 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	2004      	movs	r0, #4
 80005d2:	f7ff fdec 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fde9 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : joystick_sw_Pin */
  GPIO_InitStruct.Pin = joystick_sw_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_sw_GPIO_Port, &GPIO_InitStruct);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	480a      	ldr	r0, [pc, #40]	@ (8000618 <MX_GPIO_Init+0x5c>)
 80005f0:	f001 fe84 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : joystick_rsw_Pin */
  GPIO_InitStruct.Pin = joystick_rsw_Pin;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_rsw_GPIO_Port, &GPIO_InitStruct);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f001 fe77 	bl	80022fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	48000800 	.word	0x48000800

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <Error_Handler+0x8>

08000628 <LL_AHB2_GRP1_EnableClock>:
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000634:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4313      	orrs	r3, r2
 800063e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000644:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4013      	ands	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064c:	68fb      	ldr	r3, [r7, #12]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000666:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000668:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4313      	orrs	r3, r2
 8000670:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000676:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a29      	ldr	r2, [pc, #164]	@ (8000760 <HAL_ADC_MspInit+0xc4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d14c      	bne.n	8000758 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006c2:	f7ff ffb1 	bl	8000628 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2004      	movs	r0, #4
 80006c8:	f7ff ffae 	bl	8000628 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ffab 	bl	8000628 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = joystick_x_Pin|joystick_y_Pin;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4619      	mov	r1, r3
 80006e4:	481f      	ldr	r0, [pc, #124]	@ (8000764 <HAL_ADC_MspInit+0xc8>)
 80006e6:	f001 fe09 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joystick_ry_Pin|joystick_rx_Pin;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f001 fdfc 	bl	80022fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <HAL_ADC_MspInit+0xd0>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 800070c:	2205      	movs	r2, #5
 800070e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000730:	2220      	movs	r2, #32
 8000732:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000736:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800073a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800073c:	480a      	ldr	r0, [pc, #40]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 800073e:	f001 fb69 	bl	8001e14 <HAL_DMA_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000748:	f7ff ff68 	bl	800061c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000750:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <HAL_ADC_MspInit+0xcc>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	50040000 	.word	0x50040000
 8000764:	48000800 	.word	0x48000800
 8000768:	20000194 	.word	0x20000194
 800076c:	40020008 	.word	0x40020008

08000770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <HAL_TIM_Base_MspInit+0x44>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d113      	bne.n	80007aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000782:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000786:	f7ff ff68 	bl	800065a <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2019      	movs	r0, #25
 8000790:	f001 fb0b 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000794:	2019      	movs	r0, #25
 8000796:	f001 fb22 	bl	8001dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	201a      	movs	r0, #26
 80007a0:	f001 fb03 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80007a4:	201a      	movs	r0, #26
 80007a6:	f001 fb1a 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f911 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <DMA1_Channel1_IRQHandler+0x10>)
 800081e:	f001 fc1c 	bl	800205a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000194 	.word	0x20000194

0800082c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000830:	4802      	ldr	r0, [pc, #8]	@ (800083c <USB_LP_IRQHandler+0x10>)
 8000832:	f001 ffc3 	bl	80027bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000057c 	.word	0x2000057c

08000840 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000846:	f005 faab 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200001f4 	.word	0x200001f4

08000854 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000858:	4802      	ldr	r0, [pc, #8]	@ (8000864 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800085a:	f005 faa1 	bl	8005da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001f4 	.word	0x200001f4

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <SystemInit+0x98>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <SystemInit+0x98>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800087c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800088c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000890:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000894:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008a0:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <SystemInit+0x9c>)
 80008a2:	4013      	ands	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80008a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008b2:	f023 0305 	bic.w	r3, r3, #5
 80008b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80008c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008c6:	f023 0301 	bic.w	r3, r3, #1
 80008ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <SystemInit+0xa0>)
 80008d4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80008d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008da:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <SystemInit+0xa0>)
 80008dc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80008e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00
 8000904:	faf6fefb 	.word	0xfaf6fefb
 8000908:	22041000 	.word	0x22041000

0800090c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800090c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000910:	3304      	adds	r3, #4

08000912 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000912:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000914:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000916:	d3f9      	bcc.n	800090c <CopyDataInit>
  bx lr
 8000918:	4770      	bx	lr

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800091a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800091c:	3004      	adds	r0, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800091e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>
  bx lr
 8000922:	4770      	bx	lr

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480c      	ldr	r0, [pc, #48]	@ (8000958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f7ff ff9e 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <LoopForever+0x6>)
 800092e:	490c      	ldr	r1, [pc, #48]	@ (8000960 <LoopForever+0xa>)
 8000930:	4a0c      	ldr	r2, [pc, #48]	@ (8000964 <LoopForever+0xe>)
 8000932:	2300      	movs	r3, #0
 8000934:	f7ff ffed 	bl	8000912 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000938:	480b      	ldr	r0, [pc, #44]	@ (8000968 <LoopForever+0x12>)
 800093a:	490c      	ldr	r1, [pc, #48]	@ (800096c <LoopForever+0x16>)
 800093c:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <LoopForever+0x1a>)
 800093e:	2300      	movs	r3, #0
 8000940:	f7ff ffe7 	bl	8000912 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <LoopForever+0x1e>)
 8000946:	490c      	ldr	r1, [pc, #48]	@ (8000978 <LoopForever+0x22>)
 8000948:	2300      	movs	r3, #0
 800094a:	f7ff ffe8 	bl	800091e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094e:	f00a fb29 	bl	800afa4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000952:	f7ff fc71 	bl	8000238 <main>

08000956 <LoopForever>:

LoopForever:
  b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   r0, =_estack
 8000958:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800095c:	20000008 	.word	0x20000008
 8000960:	20000114 	.word	0x20000114
 8000964:	0800b100 	.word	0x0800b100
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000968:	20030000 	.word	0x20030000
 800096c:	20030000 	.word	0x20030000
 8000970:	0800b20c 	.word	0x0800b20c
  INIT_BSS _sbss, _ebss
 8000974:	20000114 	.word	0x20000114
 8000978:	2000086c 	.word	0x2000086c

0800097c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <HAL_Init+0x3c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_Init+0x3c>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000994:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000996:	2003      	movs	r0, #3
 8000998:	f001 f9fc 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f80f 	bl	80009c0 <HAL_InitTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e001      	b.n	80009b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ae:	f7ff fe6d 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58004000 	.word	0x58004000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_InitTick+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d024      	beq.n	8000a1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d4:	f004 fbe6 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80009d8:	4602      	mov	r2, r0
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_InitTick+0x6c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fa04 	bl	8001dfa <HAL_SYSTICK_Config>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10f      	bne.n	8000a18 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d809      	bhi.n	8000a12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fe:	2200      	movs	r2, #0
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	f04f 30ff 	mov.w	r0, #4294967295
 8000a06:	f001 f9d0 	bl	8001daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <HAL_InitTick+0x70>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e004      	b.n	8000a22 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	2000000c 	.word	0x2000000c

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000010 	.word	0x20000010
 8000a58:	20000248 	.word	0x20000248

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000248 	.word	0x20000248

08000a74 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTickPrio+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000000c 	.word	0x2000000c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffe2 	bl	8000a5c <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffd2 	bl	8000a5c <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000010 	.word	0x20000010

08000ad4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_ResumeTick+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_ResumeTick+0x1c>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3360      	adds	r3, #96	@ 0x60
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <LL_ADC_SetOffset+0x44>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b94:	bf00      	nop
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	03fff000 	.word	0x03fff000

08000ba4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3360      	adds	r3, #96	@ 0x60
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3360      	adds	r3, #96	@ 0x60
 8000be0:	461a      	mov	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bfa:	bf00      	nop
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c1e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3330      	adds	r3, #48	@ 0x30
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	f003 030c 	and.w	r3, r3, #12
 8000c48:	4413      	add	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 031f 	and.w	r3, r3, #31
 8000c56:	211f      	movs	r1, #31
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0e9b      	lsrs	r3, r3, #26
 8000c64:	f003 011f 	and.w	r1, r3, #31
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f003 031f 	and.w	r3, r3, #31
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	431a      	orrs	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000c78:	bf00      	nop
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3314      	adds	r3, #20
 8000c94:	461a      	mov	r2, r3
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	0e5b      	lsrs	r3, r3, #25
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	4413      	add	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	0d1b      	lsrs	r3, r3, #20
 8000cac:	f003 031f 	and.w	r3, r3, #31
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0d1b      	lsrs	r3, r3, #20
 8000cbe:	f003 031f 	and.w	r3, r3, #31
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000cce:	bf00      	nop
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0318 	and.w	r3, r3, #24
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d00:	40d9      	lsrs	r1, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	400b      	ands	r3, r1
 8000d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	0007ffff 	.word	0x0007ffff

08000d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6093      	str	r3, [r2, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d5c:	d101      	bne.n	8000d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <LL_ADC_IsEnabled+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_ADC_IsEnabled+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e22:	f043 0204 	orr.w	r2, r3, #4
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d101      	bne.n	8000e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d101      	bne.n	8000e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e12e      	b.n	8001100 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d109      	bne.n	8000ec4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fbf3 	bl	800069c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff3d 	bl	8000d48 <LL_ADC_IsDeepPowerDownEnabled>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d004      	beq.n	8000ede <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff23 	bl	8000d24 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff58 	bl	8000d98 <LL_ADC_IsInternalRegulatorEnabled>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d115      	bne.n	8000f1a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff3c 	bl	8000d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ef8:	4b83      	ldr	r3, [pc, #524]	@ (8001108 <HAL_ADC_Init+0x284>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	099b      	lsrs	r3, r3, #6
 8000efe:	4a83      	ldr	r2, [pc, #524]	@ (800110c <HAL_ADC_Init+0x288>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	099b      	lsrs	r3, r3, #6
 8000f06:	3301      	adds	r3, #1
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f0c:	e002      	b.n	8000f14 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f9      	bne.n	8000f0e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff3a 	bl	8000d98 <LL_ADC_IsInternalRegulatorEnabled>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10d      	bne.n	8000f46 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2e:	f043 0210 	orr.w	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff73 	bl	8000e36 <LL_ADC_REG_IsConversionOngoing>
 8000f50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 80c7 	bne.w	80010ee <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 80c3 	bne.w	80010ee <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f70:	f043 0202 	orr.w	r2, r3, #2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff33 	bl	8000de8 <LL_ADC_IsEnabled>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f88:	4861      	ldr	r0, [pc, #388]	@ (8001110 <HAL_ADC_Init+0x28c>)
 8000f8a:	f7ff ff2d 	bl	8000de8 <LL_ADC_IsEnabled>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	485e      	ldr	r0, [pc, #376]	@ (8001114 <HAL_ADC_Init+0x290>)
 8000f9c:	f7ff fdaa 	bl	8000af4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e5b      	ldrb	r3, [r3, #25]
 8000fa4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000faa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbe:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8000fc0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d106      	bne.n	8000fe0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	045b      	lsls	r3, r3, #17
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d009      	beq.n	8000ffc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <HAL_ADC_Init+0x294>)
 8001004:	4013      	ands	r3, r2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	430b      	orrs	r3, r1
 800100e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff0e 	bl	8000e36 <LL_ADC_REG_IsConversionOngoing>
 800101a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff1b 	bl	8000e5c <LL_ADC_INJ_IsConversionOngoing>
 8001026:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d13d      	bne.n	80010aa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13a      	bne.n	80010aa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001038:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001040:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	69b9      	ldr	r1, [r7, #24]
 800105a:	430b      	orrs	r3, r1
 800105c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001064:	2b01      	cmp	r3, #1
 8001066:	d118      	bne.n	800109a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800107e:	4311      	orrs	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001084:	4311      	orrs	r1, r2
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800108a:	430a      	orrs	r2, r1
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	e007      	b.n	80010aa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10c      	bne.n	80010cc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	f023 010f 	bic.w	r1, r3, #15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80010ca:	e007      	b.n	80010dc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 020f 	bic.w	r2, r2, #15
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e0:	f023 0303 	bic.w	r3, r3, #3
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80010ec:	e007      	b.n	80010fe <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	f043 0210 	orr.w	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000008 	.word	0x20000008
 800110c:	053e2d63 	.word	0x053e2d63
 8001110:	50040000 	.word	0x50040000
 8001114:	50040300 	.word	0x50040300
 8001118:	fff0c007 	.word	0xfff0c007

0800111c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe82 	bl	8000e36 <LL_ADC_REG_IsConversionOngoing>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d167      	bne.n	8001208 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Start_DMA+0x2a>
 8001142:	2302      	movs	r3, #2
 8001144:	e063      	b.n	800120e <HAL_ADC_Start_DMA+0xf2>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 fc42 	bl	80019d8 <ADC_Enable>
 8001154:	4603      	mov	r3, r0
 8001156:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d14f      	bne.n	80011fe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001162:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	f023 0206 	bic.w	r2, r3, #6
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	659a      	str	r2, [r3, #88]	@ 0x58
 800118a:	e002      	b.n	8001192 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a20      	ldr	r2, [pc, #128]	@ (8001218 <HAL_ADC_Start_DMA+0xfc>)
 8001198:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <HAL_ADC_Start_DMA+0x100>)
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_ADC_Start_DMA+0x104>)
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	221c      	movs	r2, #28
 80011b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0210 	orr.w	r2, r2, #16
 80011c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3340      	adds	r3, #64	@ 0x40
 80011e4:	4619      	mov	r1, r3
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f000 febb 	bl	8001f64 <HAL_DMA_Start_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fe09 	bl	8000e0e <LL_ADC_REG_StartConversion>
 80011fc:	e006      	b.n	800120c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001206:	e001      	b.n	800120c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001208:	2302      	movs	r3, #2
 800120a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800120c:	7dfb      	ldrb	r3, [r7, #23]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	08001acd 	.word	0x08001acd
 800121c:	08001ba5 	.word	0x08001ba5
 8001220:	08001bc1 	.word	0x08001bc1

08001224 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0b6      	sub	sp, #216	@ 0xd8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_ConfigChannel+0x22>
 800126a:	2302      	movs	r3, #2
 800126c:	e39f      	b.n	80019ae <HAL_ADC_ConfigChannel+0x762>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fddb 	bl	8000e36 <LL_ADC_REG_IsConversionOngoing>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8384 	bne.w	8001990 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6859      	ldr	r1, [r3, #4]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	f7ff fcc9 	bl	8000c2c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fdc9 	bl	8000e36 <LL_ADC_REG_IsConversionOngoing>
 80012a4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fdd5 	bl	8000e5c <LL_ADC_INJ_IsConversionOngoing>
 80012b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 81a6 	bne.w	800160c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 81a1 	bne.w	800160c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	461a      	mov	r2, r3
 80012d8:	f7ff fcd4 	bl	8000c84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d00a      	beq.n	8001314 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800130e:	f7ff fc25 	bl	8000b5c <LL_ADC_SetOffset>
 8001312:	e17b      	b.n	800160c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc42 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <HAL_ADC_ConfigChannel+0xf4>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fc37 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	0e9b      	lsrs	r3, r3, #26
 800133a:	f003 021f 	and.w	r2, r3, #31
 800133e:	e01e      	b.n	800137e <HAL_ADC_ConfigChannel+0x132>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc2c 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800135e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800136e:	2320      	movs	r3, #32
 8001370:	e004      	b.n	800137c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x14a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0e9b      	lsrs	r3, r3, #26
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	e018      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x17c>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80013aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80013b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80013ba:	2320      	movs	r3, #32
 80013bc:	e004      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80013be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d106      	bne.n	80013da <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fbfb 	bl	8000bd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fbdf 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10a      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x1ba>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fbd4 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	e01e      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1f8>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fbc9 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800142c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e004      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_ConfigChannel+0x210>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0e9b      	lsrs	r3, r3, #26
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	e018      	b.n	800148e <HAL_ADC_ConfigChannel+0x242>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001468:	fa93 f3a3 	rbit	r3, r3
 800146c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001470:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001474:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001478:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001480:	2320      	movs	r3, #32
 8001482:	e004      	b.n	800148e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	429a      	cmp	r2, r3
 8001490:	d106      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb98 	bl	8000bd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2102      	movs	r1, #2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb7c 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10a      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x280>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2102      	movs	r1, #2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb71 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	0e9b      	lsrs	r3, r3, #26
 80014c6:	f003 021f 	and.w	r2, r3, #31
 80014ca:	e01e      	b.n	800150a <HAL_ADC_ConfigChannel+0x2be>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb66 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80014ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80014ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80014f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80014fa:	2320      	movs	r3, #32
 80014fc:	e004      	b.n	8001508 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80014fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x2d6>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0e9b      	lsrs	r3, r3, #26
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	e016      	b.n	8001550 <HAL_ADC_ConfigChannel+0x304>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800153a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001542:	2320      	movs	r3, #32
 8001544:	e004      	b.n	8001550 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	429a      	cmp	r2, r3
 8001552:	d106      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb37 	bl	8000bd0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2103      	movs	r1, #3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fb1b 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10a      	bne.n	800158e <HAL_ADC_ConfigChannel+0x342>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2103      	movs	r1, #3
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fb10 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	0e9b      	lsrs	r3, r3, #26
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	e017      	b.n	80015be <HAL_ADC_ConfigChannel+0x372>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2103      	movs	r1, #3
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fb05 	bl	8000ba4 <LL_ADC_GetOffsetChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80015a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80015aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80015b0:	2320      	movs	r3, #32
 80015b2:	e003      	b.n	80015bc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80015b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x38a>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	e011      	b.n	80015fa <HAL_ADC_ConfigChannel+0x3ae>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80015e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80015e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e003      	b.n	80015fa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80015f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d106      	bne.n	800160c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	2103      	movs	r1, #3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fae2 	bl	8000bd0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fbe9 	bl	8000de8 <LL_ADC_IsEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 81c2 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	461a      	mov	r2, r3
 800162c:	f7ff fb56 	bl	8000cdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a8e      	ldr	r2, [pc, #568]	@ (8001870 <HAL_ADC_ConfigChannel+0x624>)
 8001636:	4293      	cmp	r3, r2
 8001638:	f040 8130 	bne.w	800189c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x418>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0e9b      	lsrs	r3, r3, #26
 8001652:	3301      	adds	r3, #1
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b09      	cmp	r3, #9
 800165a:	bf94      	ite	ls
 800165c:	2301      	movls	r3, #1
 800165e:	2300      	movhi	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e019      	b.n	8001698 <HAL_ADC_ConfigChannel+0x44c>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001674:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e003      	b.n	8001688 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2b09      	cmp	r3, #9
 8001690:	bf94      	ite	ls
 8001692:	2301      	movls	r3, #1
 8001694:	2300      	movhi	r3, #0
 8001696:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001698:	2b00      	cmp	r3, #0
 800169a:	d079      	beq.n	8001790 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x46c>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0e9b      	lsrs	r3, r3, #26
 80016ae:	3301      	adds	r3, #1
 80016b0:	069b      	lsls	r3, r3, #26
 80016b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016b6:	e015      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x498>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80016c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80016ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80016d0:	2320      	movs	r3, #32
 80016d2:	e003      	b.n	80016dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80016d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	069b      	lsls	r3, r3, #26
 80016e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x4b8>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0e9b      	lsrs	r3, r3, #26
 80016f6:	3301      	adds	r3, #1
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	e017      	b.n	8001734 <HAL_ADC_ConfigChannel+0x4e8>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001714:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e003      	b.n	8001728 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	ea42 0103 	orr.w	r1, r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <HAL_ADC_ConfigChannel+0x50e>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0e9b      	lsrs	r3, r3, #26
 800174a:	3301      	adds	r3, #1
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	051b      	lsls	r3, r3, #20
 8001758:	e018      	b.n	800178c <HAL_ADC_ConfigChannel+0x540>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800176c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001772:	2320      	movs	r3, #32
 8001774:	e003      	b.n	800177e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800178c:	430b      	orrs	r3, r1
 800178e:	e080      	b.n	8001892 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x560>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	3301      	adds	r3, #1
 80017a4:	069b      	lsls	r3, r3, #26
 80017a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017aa:	e015      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x58c>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80017be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e003      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80017c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x5ac>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	3301      	adds	r3, #1
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	e017      	b.n	8001828 <HAL_ADC_ConfigChannel+0x5dc>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	61fb      	str	r3, [r7, #28]
  return result;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001810:	2320      	movs	r3, #32
 8001812:	e003      	b.n	800181c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10d      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x608>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0e9b      	lsrs	r3, r3, #26
 800183e:	3301      	adds	r3, #1
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	3b1e      	subs	r3, #30
 800184c:	051b      	lsls	r3, r3, #20
 800184e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001852:	e01d      	b.n	8001890 <HAL_ADC_ConfigChannel+0x644>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	613b      	str	r3, [r7, #16]
  return result;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e005      	b.n	800187c <HAL_ADC_ConfigChannel+0x630>
 8001870:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3301      	adds	r3, #1
 800187e:	f003 021f 	and.w	r2, r3, #31
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	3b1e      	subs	r3, #30
 800188a:	051b      	lsls	r3, r3, #20
 800188c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001890:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f9f4 	bl	8000c84 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <HAL_ADC_ConfigChannel+0x76c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d07c      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018a8:	4844      	ldr	r0, [pc, #272]	@ (80019bc <HAL_ADC_ConfigChannel+0x770>)
 80018aa:	f7ff f949 	bl	8000b40 <LL_ADC_GetCommonPathInternalCh>
 80018ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018b2:	4843      	ldr	r0, [pc, #268]	@ (80019c0 <HAL_ADC_ConfigChannel+0x774>)
 80018b4:	f7ff fa98 	bl	8000de8 <LL_ADC_IsEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d15e      	bne.n	800197c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a40      	ldr	r2, [pc, #256]	@ (80019c4 <HAL_ADC_ConfigChannel+0x778>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d127      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x6cc>
 80018c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d121      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <HAL_ADC_ConfigChannel+0x774>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d161      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80018de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018e6:	4619      	mov	r1, r3
 80018e8:	4834      	ldr	r0, [pc, #208]	@ (80019bc <HAL_ADC_ConfigChannel+0x770>)
 80018ea:	f7ff f916 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ee:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <HAL_ADC_ConfigChannel+0x77c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	4a35      	ldr	r2, [pc, #212]	@ (80019cc <HAL_ADC_ConfigChannel+0x780>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001908:	e002      	b.n	8001910 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f9      	bne.n	800190a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001916:	e044      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2c      	ldr	r2, [pc, #176]	@ (80019d0 <HAL_ADC_ConfigChannel+0x784>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d113      	bne.n	800194a <HAL_ADC_ConfigChannel+0x6fe>
 8001922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001926:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <HAL_ADC_ConfigChannel+0x774>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d134      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800193c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001940:	4619      	mov	r1, r3
 8001942:	481e      	ldr	r0, [pc, #120]	@ (80019bc <HAL_ADC_ConfigChannel+0x770>)
 8001944:	f7ff f8e9 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001948:	e02b      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_ADC_ConfigChannel+0x788>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d126      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
 8001954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d120      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a16      	ldr	r2, [pc, #88]	@ (80019c0 <HAL_ADC_ConfigChannel+0x774>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11b      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800196a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800196e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001972:	4619      	mov	r1, r3
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <HAL_ADC_ConfigChannel+0x770>)
 8001976:	f7ff f8d0 	bl	8000b1a <LL_ADC_SetCommonPathInternalCh>
 800197a:	e012      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800198e:	e008      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f043 0220 	orr.w	r2, r3, #32
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80019aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	37d8      	adds	r7, #216	@ 0xd8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	80080000 	.word	0x80080000
 80019bc:	50040300 	.word	0x50040300
 80019c0:	50040000 	.word	0x50040000
 80019c4:	c7520000 	.word	0xc7520000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	053e2d63 	.word	0x053e2d63
 80019d0:	cb840000 	.word	0xcb840000
 80019d4:	80000001 	.word	0x80000001

080019d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f9fd 	bl	8000de8 <LL_ADC_IsEnabled>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d15e      	bne.n	8001ab2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <ADC_Enable+0xe4>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a06:	f043 0210 	orr.w	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e04a      	b.n	8001ab4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f9cc 	bl	8000dc0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a28:	4825      	ldr	r0, [pc, #148]	@ (8001ac0 <ADC_Enable+0xe8>)
 8001a2a:	f7ff f889 	bl	8000b40 <LL_ADC_GetCommonPathInternalCh>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00f      	beq.n	8001a58 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <ADC_Enable+0xec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <ADC_Enable+0xf0>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	3301      	adds	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a4a:	e002      	b.n	8001a52 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a58:	f7ff f800 	bl	8000a5c <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a5e:	e021      	b.n	8001aa4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f9bf 	bl	8000de8 <LL_ADC_IsEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d104      	bne.n	8001a7a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff f9a3 	bl	8000dc0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a7a:	f7fe ffef 	bl	8000a5c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d90d      	bls.n	8001aa4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e007      	b.n	8001ab4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d1d6      	bne.n	8001a60 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	8000003f 	.word	0x8000003f
 8001ac0:	50040300 	.word	0x50040300
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	053e2d63 	.word	0x053e2d63

08001acc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d14b      	bne.n	8001b7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f87e 	bl	8000c06 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d032      	beq.n	8001b76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12b      	bne.n	8001b76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11f      	bne.n	8001b76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b42:	e018      	b.n	8001b76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d111      	bne.n	8001b76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7fe fb32 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b7c:	e00e      	b.n	8001b9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff fb54 	bl	8001238 <HAL_ADC_ErrorCallback>
}
 8001b90:	e004      	b.n	8001b9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7ff fb36 	bl	8001224 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f043 0204 	orr.w	r2, r3, #4
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff fb26 	bl	8001238 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	@ (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	@ (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	@ (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff29 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff40 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff33 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa4 	bl	8001d50 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e08e      	b.n	8001f44 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_DMA_Init+0x138>)
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d80f      	bhi.n	8001e52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <HAL_DMA_Init+0x13c>)
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a45      	ldr	r2, [pc, #276]	@ (8001f54 <HAL_DMA_Init+0x140>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	009a      	lsls	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a42      	ldr	r2, [pc, #264]	@ (8001f58 <HAL_DMA_Init+0x144>)
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e50:	e00e      	b.n	8001e70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b40      	ldr	r3, [pc, #256]	@ (8001f5c <HAL_DMA_Init+0x148>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f54 <HAL_DMA_Init+0x140>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	009a      	lsls	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f60 <HAL_DMA_Init+0x14c>)
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f9b6 	bl	8002234 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ed0:	d102      	bne.n	8001ed8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001eee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_DMA_Init+0x106>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d80c      	bhi.n	8001f1a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f9d5 	bl	80022b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	e008      	b.n	8001f2c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40020407 	.word	0x40020407
 8001f50:	bffdfff8 	.word	0xbffdfff8
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	bffdfbf8 	.word	0xbffdfbf8
 8001f60:	40020400 	.word	0x40020400

08001f64 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_DMA_Start_IT+0x20>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e066      	b.n	8002052 <HAL_DMA_Start_IT+0xee>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d155      	bne.n	8002044 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f8fb 	bl	80021b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 020e 	orr.w	r2, r2, #14
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e00f      	b.n	8001ffc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 020a 	orr.w	r2, r2, #10
 8001ffa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002018:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002030:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e005      	b.n	8002050 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800204c:	2302      	movs	r3, #2
 800204e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f003 031c 	and.w	r3, r3, #28
 800207a:	2204      	movs	r2, #4
 800207c:	409a      	lsls	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d026      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x7a>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d021      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0204 	bic.w	r2, r2, #4
 80020ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f003 021c 	and.w	r2, r3, #28
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	2104      	movs	r1, #4
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d071      	beq.n	80021ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020d2:	e06c      	b.n	80021ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d8:	f003 031c 	and.w	r3, r3, #28
 80020dc:	2202      	movs	r2, #2
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02e      	beq.n	8002146 <HAL_DMA_IRQHandler+0xec>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d029      	beq.n	8002146 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 020a 	bic.w	r2, r2, #10
 800210e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f003 021c 	and.w	r2, r3, #28
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2102      	movs	r1, #2
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d038      	beq.n	80021ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002144:	e033      	b.n	80021ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f003 031c 	and.w	r3, r3, #28
 800214e:	2208      	movs	r2, #8
 8002150:	409a      	lsls	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d02a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x156>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d025      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 020e 	bic.w	r2, r2, #14
 8002172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	f003 021c 	and.w	r2, r3, #28
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
}
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f003 021c 	and.w	r2, r3, #28
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f202 	lsl.w	r2, r1, r2
 80021f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d108      	bne.n	8002218 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002216:	e007      	b.n	8002228 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d80a      	bhi.n	800225e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002254:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6493      	str	r3, [r2, #72]	@ 0x48
 800225c:	e007      	b.n	800226e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002268:	4413      	add	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3b08      	subs	r3, #8
 8002276:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002284:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2201      	movs	r2, #1
 800228e:	409a      	lsls	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40020407 	.word	0x40020407
 80022a4:	4002081c 	.word	0x4002081c
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	40020880 	.word	0x40020880

080022b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80022d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2201      	movs	r2, #1
 80022e0:	409a      	lsls	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	1000823f 	.word	0x1000823f
 80022f8:	40020940 	.word	0x40020940

080022fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e14c      	b.n	80025a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 813e 	beq.w	80025a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d005      	beq.n	800233c <HAL_GPIO_Init+0x40>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d017      	beq.n	80023da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8098 	beq.w	80025a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a54      	ldr	r2, [pc, #336]	@ (80025c4 <HAL_GPIO_Init+0x2c8>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800249a:	d019      	beq.n	80024d0 <HAL_GPIO_Init+0x1d4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a4a      	ldr	r2, [pc, #296]	@ (80025c8 <HAL_GPIO_Init+0x2cc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_GPIO_Init+0x1d0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a49      	ldr	r2, [pc, #292]	@ (80025cc <HAL_GPIO_Init+0x2d0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00d      	beq.n	80024c8 <HAL_GPIO_Init+0x1cc>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a48      	ldr	r2, [pc, #288]	@ (80025d0 <HAL_GPIO_Init+0x2d4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0x1c8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a47      	ldr	r2, [pc, #284]	@ (80025d4 <HAL_GPIO_Init+0x2d8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_GPIO_Init+0x1c4>
 80024bc:	2304      	movs	r3, #4
 80024be:	e008      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024c0:	2307      	movs	r3, #7
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024d0:	2300      	movs	r3, #0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e2:	4938      	ldr	r1, [pc, #224]	@ (80025c4 <HAL_GPIO_Init+0x2c8>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f0:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002514:	4a30      	ldr	r2, [pc, #192]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800251a:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800253e:	4a26      	ldr	r2, [pc, #152]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002544:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 8002546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002598:	4a0f      	ldr	r2, [pc, #60]	@ (80025d8 <HAL_GPIO_Init+0x2dc>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f aeab 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40010000 	.word	0x40010000
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	48001000 	.word	0x48001000
 80025d8:	58000800 	.word	0x58000800

080025dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0c0      	b.n	8002770 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f008 f9e6 	bl	800a9d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 ff66 	bl	80064e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e03e      	b.n	800269e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	440b      	add	r3, r1
 800262e:	3311      	adds	r3, #17
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	3310      	adds	r3, #16
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	3313      	adds	r3, #19
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3320      	adds	r3, #32
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	3324      	adds	r3, #36	@ 0x24
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3301      	adds	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3bb      	bcc.n	8002620 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e044      	b.n	8002738 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3301      	adds	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3b5      	bcc.n	80026ae <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800274e:	f003 fee5 	bl	800651c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7a9b      	ldrb	r3, [r3, #10]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d102      	bne.n	800276e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fc44 	bl	8003ff6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_Start+0x16>
 800278a:	2302      	movs	r3, #2
 800278c:	e012      	b.n	80027b4 <HAL_PCD_Start+0x3c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fe8c 	bl	80064b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f006 f94c 	bl	8008a42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 f951 	bl	8008a70 <USB_ReadInterrupts>
 80027ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fb08 	bl	8002df0 <PCD_EP_ISR_Handler>

    return;
 80027e0:	e110      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fe:	b292      	uxth	r2, r2
 8002800:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f008 f972 	bl	800aaee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f8fc 	bl	8002a0a <HAL_PCD_SetAddress>

    return;
 8002812:	e0f7      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002830:	b292      	uxth	r2, r2
 8002832:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002836:	e0e5      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800285a:	e0d3      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d034      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0204 	bic.w	r2, r2, #4
 8002878:	b292      	uxth	r2, r2
 800287a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0208 	bic.w	r2, r2, #8
 8002890:	b292      	uxth	r2, r2
 8002892:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f008 faf0 	bl	800ae90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f008 f955 	bl	800ab60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028ce:	e099      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d027      	beq.n	800292a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0208 	orr.w	r2, r2, #8
 80028ec:	b292      	uxth	r2, r2
 80028ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002904:	b292      	uxth	r2, r2
 8002906:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002912:	b29a      	uxth	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0204 	orr.w	r2, r2, #4
 800291c:	b292      	uxth	r2, r2
 800291e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f008 f902 	bl	800ab2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002928:	e06c      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d040      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002946:	b292      	uxth	r2, r2
 8002948:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d12b      	bne.n	80029ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0204 	orr.w	r2, r2, #4
 8002968:	b292      	uxth	r2, r2
 800296a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0208 	orr.w	r2, r2, #8
 8002980:	b292      	uxth	r2, r2
 8002982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002996:	b29b      	uxth	r3, r3
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029a4:	2101      	movs	r1, #1
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f008 fa72 	bl	800ae90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80029ac:	e02a      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f008 f8bc 	bl	800ab2c <HAL_PCD_SuspendCallback>
    return;
 80029b4:	e026      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029d2:	b292      	uxth	r2, r2
 80029d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f008 f87a 	bl	800aad2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029de:	e011      	b.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029fc:	b292      	uxth	r2, r2
 80029fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a02:	bf00      	nop
  }
}
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_PCD_SetAddress+0x1a>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e012      	b.n	8002a4a <HAL_PCD_SetAddress+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 ffed 	bl	8008a1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	4608      	mov	r0, r1
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4603      	mov	r3, r0
 8002a62:	70fb      	strb	r3, [r7, #3]
 8002a64:	460b      	mov	r3, r1
 8002a66:	803b      	strh	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da0e      	bge.n	8002a96 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 0207 	and.w	r2, r3, #7
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	3310      	adds	r3, #16
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e00e      	b.n	8002ab4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0207 	and.w	r2, r3, #7
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ac0:	883a      	ldrh	r2, [r7, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	78ba      	ldrb	r2, [r7, #2]
 8002aca:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002acc:	78bb      	ldrb	r3, [r7, #2]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_EP_Open+0x94>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e00e      	b.n	8002b04 <HAL_PCD_EP_Open+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 fd2f 	bl	8006558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	da0e      	bge.n	8002b3e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	3310      	adds	r3, #16
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
 8002b3c:	e00e      	b.n	8002b5c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0207 	and.w	r2, r3, #7
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_PCD_EP_Close+0x6a>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e00e      	b.n	8002b94 <HAL_PCD_EP_Close+0x88>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 f8ab 	bl	8006ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	f003 0207 	and.w	r2, r3, #7
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6979      	ldr	r1, [r7, #20]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fa63 	bl	80070ba <USB_EPStartXfer>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
 8002c10:	f003 0207 	and.w	r2, r3, #7
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2201      	movs	r2, #1
 8002c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 fa2c 	bl	80070ba <USB_EPStartXfer>

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	7912      	ldrb	r2, [r2, #4]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e03e      	b.n	8002d08 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	da0e      	bge.n	8002cb0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 0207 	and.w	r2, r3, #7
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	705a      	strb	r2, [r3, #1]
 8002cae:	e00c      	b.n	8002cca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_PCD_EP_SetStall+0x7e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e00e      	b.n	8002d08 <HAL_PCD_EP_SetStall+0x9c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f005 fd8f 	bl	800881c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	7912      	ldrb	r2, [r2, #4]
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	da0e      	bge.n	8002d54 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 0207 	and.w	r2, r3, #7
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	3310      	adds	r3, #16
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e00e      	b.n	8002d72 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 0207 	and.w	r2, r3, #7
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_PCD_EP_ClrStall+0x82>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e00e      	b.n	8002db0 <HAL_PCD_EP_ClrStall+0xa0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f005 fd8c 	bl	80088be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f005 fe63 	bl	8008a90 <USB_ActivateRemoteWakeup>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f005 fe6a 	bl	8008aba <USB_DeActivateRemoteWakeup>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b096      	sub	sp, #88	@ 0x58
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002df8:	e3ad      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002e14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 816f 	bne.w	80030fc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d14c      	bne.n	8002ec4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3a:	81fb      	strh	r3, [r7, #14]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3310      	adds	r3, #16
 8002e52:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	441a      	add	r2, r3
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f007 fe06 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 835c 	beq.w	8003556 <PCD_EP_ISR_Handler+0x766>
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 8357 	bne.w	8003556 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7b1b      	ldrb	r3, [r3, #12]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	731a      	strb	r2, [r3, #12]
 8002ec2:	e348      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eca:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ed6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d032      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f005 fe23 	bl	8008b68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f2e:	4013      	ands	r3, r2
 8002f30:	823b      	strh	r3, [r7, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	8a3a      	ldrh	r2, [r7, #16]
 8002f38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f007 fd7f 	bl	800aa44 <HAL_PCD_SetupStageCallback>
 8002f46:	e306      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f280 8302 	bge.w	8003556 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f5e:	4013      	ands	r3, r2
 8002f60:	83fb      	strh	r3, [r7, #30]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	8bfa      	ldrh	r2, [r7, #30]
 8002f68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d019      	beq.n	8002fd4 <PCD_EP_ISR_Handler+0x1e4>
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f005 fdd5 	bl	8008b68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f007 fd4a 	bl	800aa68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 82b5 	bne.w	8003556 <PCD_EP_ISR_Handler+0x766>
 8002fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ff8:	f000 82ad 	beq.w	8003556 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b3e      	cmp	r3, #62	@ 0x3e
 8003032:	d91d      	bls.n	8003070 <PCD_EP_ISR_Handler+0x280>
 8003034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	647b      	str	r3, [r7, #68]	@ 0x44
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <PCD_EP_ISR_Handler+0x25e>
 8003048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304a:	3b01      	subs	r3, #1
 800304c:	647b      	str	r3, [r7, #68]	@ 0x44
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29a      	uxth	r2, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003056:	b29b      	uxth	r3, r3
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	b29b      	uxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29a      	uxth	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e026      	b.n	80030be <PCD_EP_ISR_Handler+0x2ce>
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <PCD_EP_ISR_Handler+0x29e>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29a      	uxth	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e017      	b.n	80030be <PCD_EP_ISR_Handler+0x2ce>
 800308e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	647b      	str	r3, [r7, #68]	@ 0x44
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x2b8>
 80030a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a4:	3301      	adds	r3, #1
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ce:	827b      	strh	r3, [r7, #18]
 80030d0:	8a7b      	ldrh	r3, [r7, #18]
 80030d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030d6:	827b      	strh	r3, [r7, #18]
 80030d8:	8a7b      	ldrh	r3, [r7, #18]
 80030da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030de:	827b      	strh	r3, [r7, #18]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	8a7b      	ldrh	r3, [r7, #18]
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
 80030fa:	e22c      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003110:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003114:	2b00      	cmp	r3, #0
 8003116:	f280 80f6 	bge.w	8003306 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29a      	uxth	r2, r3
 800312c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003130:	4013      	ands	r3, r2
 8003132:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003148:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800314c:	b292      	uxth	r2, r2
 800314e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003150:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	7b1b      	ldrb	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d123      	bne.n	80031b6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4413      	add	r3, r2
 8003188:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003192:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003196:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 808e 	beq.w	80032bc <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	6959      	ldr	r1, [r3, #20]
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	88da      	ldrh	r2, [r3, #6]
 80031ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031b0:	f005 fcda 	bl	8008b68 <USB_ReadPMA>
 80031b4:	e082      	b.n	80032bc <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b8:	78db      	ldrb	r3, [r3, #3]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d10a      	bne.n	80031d4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031c2:	461a      	mov	r2, r3
 80031c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f9d3 	bl	8003572 <HAL_PCD_EP_DB_Receive>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80031d2:	e073      	b.n	80032bc <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ee:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d022      	beq.n	8003278 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4413      	add	r3, r2
 800324c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800325a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800325e:	2b00      	cmp	r3, #0
 8003260:	d02c      	beq.n	80032bc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003268:	6959      	ldr	r1, [r3, #20]
 800326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326c:	891a      	ldrh	r2, [r3, #8]
 800326e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003272:	f005 fc79 	bl	8008b68 <USB_ReadPMA>
 8003276:	e021      	b.n	80032bc <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	4413      	add	r3, r2
 8003292:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80032a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	6959      	ldr	r1, [r3, #20]
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	895a      	ldrh	r2, [r3, #10]
 80032b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032b8:	f005 fc56 	bl	8008b68 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032c4:	441a      	add	r2, r3
 80032c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032d2:	441a      	add	r2, r3
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <PCD_EP_ISR_Handler+0x4fc>
 80032e0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80032e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d206      	bcs.n	80032fa <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f007 fbb8 	bl	800aa68 <HAL_PCD_DataOutStageCallback>
 80032f8:	e005      	b.n	8003306 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003300:	4618      	mov	r0, r3
 8003302:	f003 feda 	bl	80070ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003306:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8121 	beq.w	8003556 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003314:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	3310      	adds	r3, #16
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800333e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003342:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 80a2 	bne.w	80034b2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	7b1b      	ldrb	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8093 	beq.w	80034a4 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800337e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d046      	beq.n	8003418 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800338a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338c:	785b      	ldrb	r3, [r3, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d126      	bne.n	80033e0 <PCD_EP_ISR_Handler+0x5f0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	4413      	add	r3, r2
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	00da      	lsls	r2, r3, #3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	801a      	strh	r2, [r3, #0]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	e061      	b.n	80034a4 <PCD_EP_ISR_Handler+0x6b4>
 80033e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d15d      	bne.n	80034a4 <PCD_EP_ISR_Handler+0x6b4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fc:	4413      	add	r3, r2
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	4413      	add	r3, r2
 800340a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003412:	2200      	movs	r2, #0
 8003414:	801a      	strh	r2, [r3, #0]
 8003416:	e045      	b.n	80034a4 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d126      	bne.n	8003474 <PCD_EP_ISR_Handler+0x684>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	4413      	add	r3, r2
 800343c:	637b      	str	r3, [r7, #52]	@ 0x34
 800343e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	00da      	lsls	r2, r3, #3
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	4413      	add	r3, r2
 8003448:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800344c:	633b      	str	r3, [r7, #48]	@ 0x30
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003458:	b29a      	uxth	r2, r3
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346c:	b29a      	uxth	r2, r3
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	e017      	b.n	80034a4 <PCD_EP_ISR_Handler+0x6b4>
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	785b      	ldrb	r3, [r3, #1]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d113      	bne.n	80034a4 <PCD_EP_ISR_Handler+0x6b4>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800348a:	4413      	add	r3, r2
 800348c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00da      	lsls	r2, r3, #3
 8003494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003496:	4413      	add	r3, r2
 8003498:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f007 faf7 	bl	800aa9e <HAL_PCD_DataInStageCallback>
 80034b0:	e051      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d144      	bne.n	8003548 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80034e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d907      	bls.n	8003502 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	619a      	str	r2, [r3, #24]
 8003500:	e002      	b.n	8003508 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f007 fac1 	bl	800aa9e <HAL_PCD_DataInStageCallback>
 800351c:	e01b      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003526:	441a      	add	r2, r3
 8003528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003534:	441a      	add	r2, r3
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fdba 	bl	80070ba <USB_EPStartXfer>
 8003546:	e006      	b.n	8003556 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003548:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800354c:	461a      	mov	r2, r3
 800354e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f917 	bl	8003784 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800355e:	b29b      	uxth	r3, r3
 8003560:	b21b      	sxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	f6ff ac49 	blt.w	8002dfa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3758      	adds	r7, #88	@ 0x58
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b088      	sub	sp, #32
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d07c      	beq.n	8003684 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003592:	b29b      	uxth	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	8b7b      	ldrh	r3, [r7, #26]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d306      	bcc.n	80035c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	8b7b      	ldrh	r3, [r7, #26]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	e002      	b.n	80035ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d123      	bne.n	800361e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f0:	833b      	strh	r3, [r7, #24]
 80035f2:	8b3b      	ldrh	r3, [r7, #24]
 80035f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035f8:	833b      	strh	r3, [r7, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	441a      	add	r2, r3
 8003608:	8b3b      	ldrh	r3, [r7, #24]
 800360a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800360e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361a:	b29b      	uxth	r3, r3
 800361c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01f      	beq.n	8003668 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	82fb      	strh	r3, [r7, #22]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	8afb      	ldrh	r3, [r7, #22]
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800365c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003660:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003668:	8b7b      	ldrh	r3, [r7, #26]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8085 	beq.w	800377a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6959      	ldr	r1, [r3, #20]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	891a      	ldrh	r2, [r3, #8]
 800367c:	8b7b      	ldrh	r3, [r7, #26]
 800367e:	f005 fa73 	bl	8008b68 <USB_ReadPMA>
 8003682:	e07a      	b.n	800377a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800368c:	b29b      	uxth	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	4413      	add	r3, r2
 800369e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	8b7b      	ldrh	r3, [r7, #26]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d306      	bcc.n	80036c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	619a      	str	r2, [r3, #24]
 80036c0:	e002      	b.n	80036c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d123      	bne.n	8003718 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ea:	83fb      	strh	r3, [r7, #30]
 80036ec:	8bfb      	ldrh	r3, [r7, #30]
 80036ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036f2:	83fb      	strh	r3, [r7, #30]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	8bfb      	ldrh	r3, [r7, #30]
 8003704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800370c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800373c:	83bb      	strh	r3, [r7, #28]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	8bbb      	ldrh	r3, [r7, #28]
 800374e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800375e:	b29b      	uxth	r3, r3
 8003760:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003762:	8b7b      	ldrh	r3, [r7, #26]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6959      	ldr	r1, [r3, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	895a      	ldrh	r2, [r3, #10]
 8003774:	8b7b      	ldrh	r3, [r7, #26]
 8003776:	f005 f9f7 	bl	8008b68 <USB_ReadPMA>
    }
  }

  return count;
 800377a:	8b7b      	ldrh	r3, [r7, #26]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b0a4      	sub	sp, #144	@ 0x90
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 81db 	beq.w	8003b54 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d907      	bls.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	619a      	str	r2, [r3, #24]
 80037e0:	e002      	b.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 80b9 	bne.w	8003964 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d126      	bne.n	8003848 <HAL_PCD_EP_DB_Transmit+0xc4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	4413      	add	r3, r2
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00da      	lsls	r2, r3, #3
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	4413      	add	r3, r2
 800381c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800382c:	b29a      	uxth	r2, r3
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003840:	b29a      	uxth	r2, r3
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e01a      	b.n	800387e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d116      	bne.n	800387e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	4413      	add	r3, r2
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	00da      	lsls	r2, r3, #3
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	4413      	add	r3, r2
 8003872:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d126      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0x156>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	00da      	lsls	r2, r3, #3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038be:	b29a      	uxth	r2, r3
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e017      	b.n	800390a <HAL_PCD_EP_DB_Transmit+0x186>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d113      	bne.n	800390a <HAL_PCD_EP_DB_Transmit+0x186>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	4413      	add	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	00da      	lsls	r2, r3, #3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	4413      	add	r3, r2
 80038fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2200      	movs	r2, #0
 8003908:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f007 f8c4 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 82fa 	beq.w	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393c:	82fb      	strh	r3, [r7, #22]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	441a      	add	r2, r3
 800394c:	8afb      	ldrh	r3, [r7, #22]
 800394e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800395a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395e:	b29b      	uxth	r3, r3
 8003960:	8013      	strh	r3, [r2, #0]
 8003962:	e2d8      	b.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d021      	beq.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003988:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800399e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f040 82ac 	bne.w	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039c6:	441a      	add	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039d4:	441a      	add	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d30b      	bcc.n	80039fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	621a      	str	r2, [r3, #32]
 80039fc:	e017      	b.n	8003a2e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003a06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a16:	e00a      	b.n	8003a2e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d165      	bne.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a74:	d91d      	bls.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e044      	b.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e035      	b.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_PCD_EP_DB_Transmit+0x366>
 8003ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	029b      	lsls	r3, r3, #10
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e01c      	b.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	785b      	ldrb	r3, [r3, #1]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d118      	bne.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1e:	4413      	add	r3, r2
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	00da      	lsls	r2, r3, #3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6959      	ldr	r1, [r3, #20]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	891a      	ldrh	r2, [r3, #8]
 8003b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f004 ffc9 	bl	8008ae4 <USB_WritePMA>
 8003b52:	e1e0      	b.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b78:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d307      	bcc.n	8003b98 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	619a      	str	r2, [r3, #24]
 8003b96:	e002      	b.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 80c0 	bne.w	8003d28 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d126      	bne.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x47a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bc4:	4413      	add	r3, r2
 8003bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	00da      	lsls	r2, r3, #3
 8003bce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003bd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfa:	801a      	strh	r2, [r3, #0]
 8003bfc:	e01a      	b.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d116      	bne.n	8003c34 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c1a:	4413      	add	r3, r2
 8003c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	00da      	lsls	r2, r3, #3
 8003c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c30:	2200      	movs	r2, #0
 8003c32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	785b      	ldrb	r3, [r3, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d12b      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x516>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c56:	4413      	add	r3, r2
 8003c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	00da      	lsls	r2, r3, #3
 8003c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c62:	4413      	add	r3, r2
 8003c64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	e017      	b.n	8003cca <HAL_PCD_EP_DB_Transmit+0x546>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d113      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0x546>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb0:	4413      	add	r3, r2
 8003cb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	00da      	lsls	r2, r3, #3
 8003cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f006 fee4 	bl	800aa9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 811a 	bne.w	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]
 8003d26:	e0f6      	b.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d121      	bne.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 80ca 	bne.w	8003f16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d98:	441a      	add	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d30b      	bcc.n	8003dc2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6a1a      	ldr	r2, [r3, #32]
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dba:	1ad2      	subs	r2, r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	621a      	str	r2, [r3, #32]
 8003dc0:	e017      	b.n	8003df2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003dda:	e00a      	b.n	8003df2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d165      	bne.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x748>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e14:	4413      	add	r3, r2
 8003e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	00da      	lsls	r2, r3, #3
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e20:	4413      	add	r3, r2
 8003e22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e3e:	d91d      	bls.n	8003e7c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e56:	3b01      	subs	r3, #1
 8003e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e041      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_PCD_EP_DB_Transmit+0x716>
 8003e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e032      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_PCD_EP_DB_Transmit+0x730>
 8003eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e019      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d115      	bne.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee2:	4413      	add	r3, r2
 8003ee4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	00da      	lsls	r2, r3, #3
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	4413      	add	r3, r2
 8003ef0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003efe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6959      	ldr	r1, [r3, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	895a      	ldrh	r2, [r3, #10]
 8003f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f004 fde7 	bl	8008ae4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	82bb      	strh	r3, [r7, #20]
 8003f32:	8abb      	ldrh	r3, [r7, #20]
 8003f34:	f083 0310 	eor.w	r3, r3, #16
 8003f38:	82bb      	strh	r3, [r7, #20]
 8003f3a:	8abb      	ldrh	r3, [r7, #20]
 8003f3c:	f083 0320 	eor.w	r3, r3, #32
 8003f40:	82bb      	strh	r3, [r7, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	441a      	add	r2, r3
 8003f50:	8abb      	ldrh	r3, [r7, #20]
 8003f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3790      	adds	r7, #144	@ 0x90
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	817b      	strh	r3, [r7, #10]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	f003 0207 	and.w	r2, r3, #7
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e009      	b.n	8003fba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fa6:	897a      	ldrh	r2, [r7, #10]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fba:	893b      	ldrh	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	80da      	strh	r2, [r3, #6]
 8003fce:	e00b      	b.n	8003fe8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800401a:	b29b      	uxth	r3, r3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800402e:	b29b      	uxth	r3, r3
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	58000400 	.word	0x58000400

0800406c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004070:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <HAL_PWREx_GetVoltageRange+0x18>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	58000400 	.word	0x58000400

08004088 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a04      	ldr	r2, [pc, #16]	@ (80040a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004096:	6053      	str	r3, [r2, #4]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	58000400 	.word	0x58000400

080040a8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ba:	d101      	bne.n	80040c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	bf00      	nop
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800411a:	d101      	bne.n	8004120 <LL_RCC_HSE_IsReady+0x18>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <LL_RCC_HSE_IsReady+0x1a>
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800413a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800414e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417a:	d101      	bne.n	8004180 <LL_RCC_HSI_IsReady+0x18>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_RCC_HSI_IsReady+0x1a>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d101      	bne.n	8004212 <LL_RCC_HSI48_IsReady+0x18>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_RCC_HSI48_IsReady+0x1a>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d101      	bne.n	80042be <LL_RCC_LSE_IsReady+0x18>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_RCC_LSE_IsReady+0x1a>
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d101      	bne.n	8004326 <LL_RCC_LSI1_IsReady+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <LL_RCC_LSI1_IsReady+0x1a>
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	d101      	bne.n	800438e <LL_RCC_LSI2_IsReady+0x18>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_RCC_LSI2_IsReady+0x1a>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6013      	str	r3, [r2, #0]
}
 80043fa:	bf00      	nop
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d101      	bne.n	800441a <LL_RCC_MSI_IsReady+0x16>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_RCC_MSI_IsReady+0x18>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800445e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2bb0      	cmp	r3, #176	@ 0xb0
 8004464:	d901      	bls.n	800446a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004466:	23b0      	movs	r3, #176	@ 0xb0
 8004468:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800446a:	687b      	ldr	r3, [r7, #4]
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 0203 	bic.w	r2, r3, #3
 80044b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004516:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800451a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800451e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800453e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004542:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004546:	f023 020f 	bic.w	r2, r3, #15
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004576:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800459e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80045d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004618:	6013      	str	r3, [r2, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004636:	d101      	bne.n	800463c <LL_RCC_PLL_IsReady+0x18>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <LL_RCC_PLL_IsReady+0x1a>
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0303 	and.w	r3, r3, #3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80046ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046bc:	d101      	bne.n	80046c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80046ce:	b480      	push	{r7}
 80046d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80046da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046e2:	d101      	bne.n	80046e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004708:	d101      	bne.n	800470e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800471a:	b480      	push	{r7}
 800471c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800472c:	d101      	bne.n	8004732 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004750:	d101      	bne.n	8004756 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b08d      	sub	sp, #52	@ 0x34
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e363      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 808d 	beq.w	800489e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004784:	f7ff fea1 	bl	80044ca <LL_RCC_GetSysClkSource>
 8004788:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800478a:	f7ff ff82 	bl	8004692 <LL_RCC_PLL_GetMainSource>
 800478e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_RCC_OscConfig+0x3e>
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d147      	bne.n	800482c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d144      	bne.n	800482c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e347      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80047b2:	f7ff fe4c 	bl	800444e <LL_RCC_MSI_GetRange>
 80047b6:	4603      	mov	r3, r0
 80047b8:	429c      	cmp	r4, r3
 80047ba:	d914      	bls.n	80047e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fd03 	bl	80051cc <RCC_SetFlashLatencyFromMSIRange>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e336      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe26 	bl	8004426 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fe4a 	bl	8004478 <LL_RCC_MSI_SetCalibTrimming>
 80047e4:	e013      	b.n	800480e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fe1b 	bl	8004426 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fe3f 	bl	8004478 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fce4 	bl	80051cc <RCC_SetFlashLatencyFromMSIRange>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e317      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800480e:	f000 fcc9 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 8004812:	4603      	mov	r3, r0
 8004814:	4aa4      	ldr	r2, [pc, #656]	@ (8004aa8 <HAL_RCC_OscConfig+0x344>)
 8004816:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004818:	4ba4      	ldr	r3, [pc, #656]	@ (8004aac <HAL_RCC_OscConfig+0x348>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7fc f8cf 	bl	80009c0 <HAL_InitTick>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d039      	beq.n	800489c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e308      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01e      	beq.n	8004872 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004834:	f7ff fdc8 	bl	80043c8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004838:	f7fc f910 	bl	8000a5c <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004840:	f7fc f90c 	bl	8000a5c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e2f5      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004852:	f7ff fdd7 	bl	8004404 <LL_RCC_MSI_IsReady>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f1      	beq.n	8004840 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fde0 	bl	8004426 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fe04 	bl	8004478 <LL_RCC_MSI_SetCalibTrimming>
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004872:	f7ff fdb8 	bl	80043e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004876:	f7fc f8f1 	bl	8000a5c <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800487e:	f7fc f8ed 	bl	8000a5c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e2d6      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004890:	f7ff fdb8 	bl	8004404 <LL_RCC_MSI_IsReady>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f1      	bne.n	800487e <HAL_RCC_OscConfig+0x11a>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800489c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d047      	beq.n	800493a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048aa:	f7ff fe0e 	bl	80044ca <LL_RCC_GetSysClkSource>
 80048ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b0:	f7ff feef 	bl	8004692 <LL_RCC_PLL_GetMainSource>
 80048b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x164>
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	2b0c      	cmp	r3, #12
 80048c0:	d108      	bne.n	80048d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d105      	bne.n	80048d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d134      	bne.n	800493a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e2b4      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d102      	bne.n	80048e4 <HAL_RCC_OscConfig+0x180>
 80048de:	f7ff fbf5 	bl	80040cc <LL_RCC_HSE_Enable>
 80048e2:	e001      	b.n	80048e8 <HAL_RCC_OscConfig+0x184>
 80048e4:	f7ff fc01 	bl	80040ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fc f8b4 	bl	8000a5c <HAL_GetTick>
 80048f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fc f8b0 	bl	8000a5c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	@ 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e299      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800490a:	f7ff fbfd 	bl	8004108 <LL_RCC_HSE_IsReady>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f1      	beq.n	80048f8 <HAL_RCC_OscConfig+0x194>
 8004914:	e011      	b.n	800493a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fc f8a1 	bl	8000a5c <HAL_GetTick>
 800491a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491e:	f7fc f89d 	bl	8000a5c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	@ 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e286      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004930:	f7ff fbea 	bl	8004108 <LL_RCC_HSE_IsReady>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f1      	bne.n	800491e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004946:	f7ff fdc0 	bl	80044ca <LL_RCC_GetSysClkSource>
 800494a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494c:	f7ff fea1 	bl	8004692 <LL_RCC_PLL_GetMainSource>
 8004950:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d005      	beq.n	8004964 <HAL_RCC_OscConfig+0x200>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d10e      	bne.n	800497c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d10b      	bne.n	800497c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e266      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fc09 	bl	800418c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800497a:	e031      	b.n	80049e0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d019      	beq.n	80049b8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004984:	f7ff fbd2 	bl	800412c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fc f868 	bl	8000a5c <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004990:	f7fc f864 	bl	8000a5c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e24d      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049a2:	f7ff fbe1 	bl	8004168 <LL_RCC_HSI_IsReady>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f1      	beq.n	8004990 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fbeb 	bl	800418c <LL_RCC_HSI_SetCalibTrimming>
 80049b6:	e013      	b.n	80049e0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b8:	f7ff fbc7 	bl	800414a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fc f84e 	bl	8000a5c <HAL_GetTick>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c4:	f7fc f84a 	bl	8000a5c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e233      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049d6:	f7ff fbc7 	bl	8004168 <LL_RCC_HSI_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a3 	beq.w	8004b40 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d076      	beq.n	8004af0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d046      	beq.n	8004a9c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004a0e:	f7ff fc7e 	bl	800430e <LL_RCC_LSI1_IsReady>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a18:	f7ff fc57 	bl	80042ca <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a1c:	f7fc f81e 	bl	8000a5c <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a24:	f7fc f81a 	bl	8000a5c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e203      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a36:	f7ff fc6a 	bl	800430e <LL_RCC_LSI1_IsReady>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f1      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a40:	f7ff fc77 	bl	8004332 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fc f80a 	bl	8000a5c <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a4c:	f7fc f806 	bl	8000a5c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1ef      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a5e:	f7ff fc8a 	bl	8004376 <LL_RCC_LSI2_IsReady>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f1      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fc94 	bl	800439a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004a72:	f7ff fc3b 	bl	80042ec <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fb fff1 	bl	8000a5c <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a7e:	f7fb ffed 	bl	8000a5c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e1d6      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a90:	f7ff fc3d 	bl	800430e <LL_RCC_LSI1_IsReady>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f1      	bne.n	8004a7e <HAL_RCC_OscConfig+0x31a>
 8004a9a:	e051      	b.n	8004b40 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004a9c:	f7ff fc15 	bl	80042ca <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fb ffdc 	bl	8000a5c <HAL_GetTick>
 8004aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004aa6:	e00c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x35e>
 8004aa8:	20000008 	.word	0x20000008
 8004aac:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ab0:	f7fb ffd4 	bl	8000a5c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1bd      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ac2:	f7ff fc24 	bl	800430e <LL_RCC_LSI1_IsReady>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f1      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004acc:	f7ff fc42 	bl	8004354 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ad2:	f7fb ffc3 	bl	8000a5c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1ac      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ae4:	f7ff fc47 	bl	8004376 <LL_RCC_LSI2_IsReady>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f1      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x36e>
 8004aee:	e027      	b.n	8004b40 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004af0:	f7ff fc30 	bl	8004354 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fb ffb2 	bl	8000a5c <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004afc:	f7fb ffae 	bl	8000a5c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e197      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b0e:	f7ff fc32 	bl	8004376 <LL_RCC_LSI2_IsReady>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f1      	bne.n	8004afc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b18:	f7ff fbe8 	bl	80042ec <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fb ff9e 	bl	8000a5c <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b24:	f7fb ff9a 	bl	8000a5c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e183      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b36:	f7ff fbea 	bl	800430e <LL_RCC_LSI1_IsReady>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f1      	bne.n	8004b24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d05b      	beq.n	8004c04 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	4ba7      	ldr	r3, [pc, #668]	@ (8004dec <HAL_RCC_OscConfig+0x688>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d114      	bne.n	8004b82 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b58:	f7ff fa78 	bl	800404c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5c:	f7fb ff7e 	bl	8000a5c <HAL_GetTick>
 8004b60:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b64:	f7fb ff7a 	bl	8000a5c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e163      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b76:	4b9d      	ldr	r3, [pc, #628]	@ (8004dec <HAL_RCC_OscConfig+0x688>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d102      	bne.n	8004b90 <HAL_RCC_OscConfig+0x42c>
 8004b8a:	f7ff fb48 	bl	800421e <LL_RCC_LSE_Enable>
 8004b8e:	e00c      	b.n	8004baa <HAL_RCC_OscConfig+0x446>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d104      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x43e>
 8004b98:	f7ff fb63 	bl	8004262 <LL_RCC_LSE_EnableBypass>
 8004b9c:	f7ff fb3f 	bl	800421e <LL_RCC_LSE_Enable>
 8004ba0:	e003      	b.n	8004baa <HAL_RCC_OscConfig+0x446>
 8004ba2:	f7ff fb4d 	bl	8004240 <LL_RCC_LSE_Disable>
 8004ba6:	f7ff fb6d 	bl	8004284 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb2:	f7fb ff53 	bl	8000a5c <HAL_GetTick>
 8004bb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bb8:	e00a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bba:	f7fb ff4f 	bl	8000a5c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e136      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bd0:	f7ff fb69 	bl	80042a6 <LL_RCC_LSE_IsReady>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0ef      	beq.n	8004bba <HAL_RCC_OscConfig+0x456>
 8004bda:	e013      	b.n	8004c04 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fb ff3e 	bl	8000a5c <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fb ff3a 	bl	8000a5c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e121      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bfa:	f7ff fb54 	bl	80042a6 <LL_RCC_LSE_IsReady>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ef      	bne.n	8004be4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d02c      	beq.n	8004c6a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d014      	beq.n	8004c42 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c18:	f7ff facd 	bl	80041b6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fb ff1e 	bl	8000a5c <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c24:	f7fb ff1a 	bl	8000a5c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e103      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c36:	f7ff fae0 	bl	80041fa <LL_RCC_HSI48_IsReady>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f1      	beq.n	8004c24 <HAL_RCC_OscConfig+0x4c0>
 8004c40:	e013      	b.n	8004c6a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c42:	f7ff fac9 	bl	80041d8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fb ff09 	bl	8000a5c <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4e:	f7fb ff05 	bl	8000a5c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0ee      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c60:	f7ff facb 	bl	80041fa <LL_RCC_HSI48_IsReady>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f1      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80e4 	beq.w	8004e3c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c74:	f7ff fc29 	bl	80044ca <LL_RCC_GetSysClkSource>
 8004c78:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	f040 80b4 	bne.w	8004df4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0203 	and.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d123      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d11c      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d114      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10d      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d05d      	beq.n	8004d9e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d058      	beq.n	8004d9a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0a1      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cfa:	f7ff fc84 	bl	8004606 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cfe:	f7fb fead 	bl	8000a5c <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fb fea9 	bl	8000a5c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e092      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1ef      	bne.n	8004d06 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	4b30      	ldr	r3, [pc, #192]	@ (8004df0 <HAL_RCC_OscConfig+0x68c>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d38:	4311      	orrs	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d3e:	0212      	lsls	r2, r2, #8
 8004d40:	4311      	orrs	r1, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d4c:	4311      	orrs	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d52:	430a      	orrs	r2, r1
 8004d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d5c:	f7ff fc44 	bl	80045e8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d70:	f7fb fe74 	bl	8000a5c <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fb fe70 	bl	8000a5c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e059      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ef      	beq.n	8004d78 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d98:	e050      	b.n	8004e3c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e04f      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d147      	bne.n	8004e3c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dac:	f7ff fc1c 	bl	80045e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dc0:	f7fb fe4c 	bl	8000a5c <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fb fe48 	bl	8000a5c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e031      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ef      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x664>
 8004de8:	e028      	b.n	8004e3c <HAL_RCC_OscConfig+0x6d8>
 8004dea:	bf00      	nop
 8004dec:	58000400 	.word	0x58000400
 8004df0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d01e      	beq.n	8004e38 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	f7ff fc04 	bl	8004606 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fb fe2d 	bl	8000a5c <HAL_GetTick>
 8004e02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fb fe29 	bl	8000a5c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e012      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ef      	bne.n	8004e06 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e30:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <HAL_RCC_OscConfig+0x6e4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
 8004e36:	e001      	b.n	8004e3c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3734      	adds	r7, #52	@ 0x34
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	bf00      	nop
 8004e48:	eefefffc 	.word	0xeefefffc

08004e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e12d      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b98      	ldr	r3, [pc, #608]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d91b      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b95      	ldr	r3, [pc, #596]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	4993      	ldr	r1, [pc, #588]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fb fded 	bl	8000a5c <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e86:	f7fb fde9 	bl	8000a5c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e111      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e98:	4b8a      	ldr	r3, [pc, #552]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d1ef      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fb13 	bl	80044e2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ebc:	f7fb fdce 	bl	8000a5c <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ec4:	f7fb fdca 	bl	8000a5c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0f2      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ed6:	f7ff fbe8 	bl	80046aa <LL_RCC_IsActiveFlag_HPRE>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f1      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d016      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fb0a 	bl	800450a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ef6:	f7fb fdb1 	bl	8000a5c <HAL_GetTick>
 8004efa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004efe:	f7fb fdad 	bl	8000a5c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0d5      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f10:	f7ff fbdd 	bl	80046ce <LL_RCC_IsActiveFlag_C2HPRE>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f1      	beq.n	8004efe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fb03 	bl	8004536 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f30:	f7fb fd94 	bl	8000a5c <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f38:	f7fb fd90 	bl	8000a5c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e0b8      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f4a:	f7ff fbd3 	bl	80046f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f1      	beq.n	8004f38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d016      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fafd 	bl	8004564 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f6a:	f7fb fd77 	bl	8000a5c <HAL_GetTick>
 8004f6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f72:	f7fb fd73 	bl	8000a5c <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e09b      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f84:	f7ff fbc9 	bl	800471a <LL_RCC_IsActiveFlag_PPRE1>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f1      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d017      	beq.n	8004fca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff faf3 	bl	800458c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fa6:	f7fb fd59 	bl	8000a5c <HAL_GetTick>
 8004faa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fae:	f7fb fd55 	bl	8000a5c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e07d      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fc0:	f7ff fbbd 	bl	800473e <LL_RCC_IsActiveFlag_PPRE2>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f1      	beq.n	8004fae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d043      	beq.n	800505e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004fde:	f7ff f893 	bl	8004108 <LL_RCC_HSE_IsReady>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11e      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e067      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ff4:	f7ff fb16 	bl	8004624 <LL_RCC_PLL_IsReady>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e05c      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800500a:	f7ff f9fb 	bl	8004404 <LL_RCC_MSI_IsReady>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d108      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e051      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005018:	f7ff f8a6 	bl	8004168 <LL_RCC_HSI_IsReady>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e04a      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fa39 	bl	80044a2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fb fd14 	bl	8000a5c <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	e00a      	b.n	800504e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005038:	f7fb fd10 	bl	8000a5c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e036      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	f7ff fa3c 	bl	80044ca <LL_RCC_GetSysClkSource>
 8005052:	4602      	mov	r2, r0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	429a      	cmp	r2, r3
 800505c:	d1ec      	bne.n	8005038 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800505e:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d21b      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506c:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f023 0207 	bic.w	r2, r3, #7
 8005074:	4913      	ldr	r1, [pc, #76]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507c:	f7fb fcee 	bl	8000a5c <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	e008      	b.n	8005096 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005084:	f7fb fcea 	bl	8000a5c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e012      	b.n	80050bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_ClockConfig+0x278>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d1ef      	bne.n	8005084 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050a4:	f000 f87e 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4a07      	ldr	r2, [pc, #28]	@ (80050c8 <HAL_RCC_ClockConfig+0x27c>)
 80050ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80050ae:	f7fb fce1 	bl	8000a74 <HAL_GetTickPrio>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fb fc83 	bl	80009c0 <HAL_InitTick>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	58004000 	.word	0x58004000
 80050c8:	20000008 	.word	0x20000008

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050d2:	f7ff f9fa 	bl	80044ca <LL_RCC_GetSysClkSource>
 80050d6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050de:	f7ff f9b6 	bl	800444e <LL_RCC_MSI_GetRange>
 80050e2:	4603      	mov	r3, r0
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	4a2b      	ldr	r2, [pc, #172]	@ (8005198 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e04b      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d102      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050fa:	4b28      	ldr	r3, [pc, #160]	@ (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e045      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d10a      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005106:	f7fe ffcf 	bl	80040a8 <LL_RCC_HSE_IsEnabledDiv2>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005110:	4b22      	ldr	r3, [pc, #136]	@ (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e03a      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005116:	4b22      	ldr	r3, [pc, #136]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e037      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800511c:	f7ff fab9 	bl	8004692 <LL_RCC_PLL_GetMainSource>
 8005120:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d003      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x64>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d003      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0x6a>
 800512e:	e00d      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005130:	4b1a      	ldr	r3, [pc, #104]	@ (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005132:	60bb      	str	r3, [r7, #8]
        break;
 8005134:	e015      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005136:	f7fe ffb7 	bl	80040a8 <LL_RCC_HSE_IsEnabledDiv2>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d102      	bne.n	8005146 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005140:	4b16      	ldr	r3, [pc, #88]	@ (800519c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005142:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005144:	e00d      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005146:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005148:	60bb      	str	r3, [r7, #8]
        break;
 800514a:	e00a      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800514c:	f7ff f97f 	bl	800444e <LL_RCC_MSI_GetRange>
 8005150:	4603      	mov	r3, r0
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4a0f      	ldr	r2, [pc, #60]	@ (8005198 <HAL_RCC_GetSysClockFreq+0xcc>)
 800515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515e:	60bb      	str	r3, [r7, #8]
        break;
 8005160:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005162:	f7ff fa71 	bl	8004648 <LL_RCC_PLL_GetN>
 8005166:	4602      	mov	r2, r0
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	fb03 f402 	mul.w	r4, r3, r2
 800516e:	f7ff fa84 	bl	800467a <LL_RCC_PLL_GetDivider>
 8005172:	4603      	mov	r3, r0
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	3301      	adds	r3, #1
 8005178:	fbb4 f4f3 	udiv	r4, r4, r3
 800517c:	f7ff fa71 	bl	8004662 <LL_RCC_PLL_GetR>
 8005180:	4603      	mov	r3, r0
 8005182:	0f5b      	lsrs	r3, r3, #29
 8005184:	3301      	adds	r3, #1
 8005186:	fbb4 f3f3 	udiv	r3, r4, r3
 800518a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	bf00      	nop
 8005198:	0800b0b8 	.word	0x0800b0b8
 800519c:	00f42400 	.word	0x00f42400
 80051a0:	01e84800 	.word	0x01e84800

080051a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b598      	push	{r3, r4, r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051a8:	f7ff ff90 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80051ac:	4604      	mov	r4, r0
 80051ae:	f7ff fa01 	bl	80045b4 <LL_RCC_GetAHBPrescaler>
 80051b2:	4603      	mov	r3, r0
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	4a03      	ldr	r2, [pc, #12]	@ (80051c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd98      	pop	{r3, r4, r7, pc}
 80051c8:	0800b078 	.word	0x0800b078

080051cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2bb0      	cmp	r3, #176	@ 0xb0
 80051d8:	d903      	bls.n	80051e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e007      	b.n	80051f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80051f2:	f7ff f9eb 	bl	80045cc <LL_RCC_GetAHB4Prescaler>
 80051f6:	4603      	mov	r3, r0
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005234 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	0c9c      	lsrs	r4, r3, #18
 8005216:	f7fe ff29 	bl	800406c <HAL_PWREx_GetVoltageRange>
 800521a:	4603      	mov	r3, r0
 800521c:	4619      	mov	r1, r3
 800521e:	4620      	mov	r0, r4
 8005220:	f000 f80c 	bl	800523c <RCC_SetFlashLatency>
 8005224:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}
 800522e:	bf00      	nop
 8005230:	0800b0b8 	.word	0x0800b0b8
 8005234:	0800b078 	.word	0x0800b078
 8005238:	431bde83 	.word	0x431bde83

0800523c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b093      	sub	sp, #76	@ 0x4c
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005246:	4b37      	ldr	r3, [pc, #220]	@ (8005324 <RCC_SetFlashLatency+0xe8>)
 8005248:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800524c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800524e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005252:	4a35      	ldr	r2, [pc, #212]	@ (8005328 <RCC_SetFlashLatency+0xec>)
 8005254:	f107 031c 	add.w	r3, r7, #28
 8005258:	ca07      	ldmia	r2, {r0, r1, r2}
 800525a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800525e:	4b33      	ldr	r3, [pc, #204]	@ (800532c <RCC_SetFlashLatency+0xf0>)
 8005260:	f107 040c 	add.w	r4, r7, #12
 8005264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800526a:	2300      	movs	r3, #0
 800526c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005274:	d11a      	bne.n	80052ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005276:	2300      	movs	r3, #0
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
 800527a:	e013      	b.n	80052a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800527c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	3348      	adds	r3, #72	@ 0x48
 8005282:	443b      	add	r3, r7
 8005284:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d807      	bhi.n	800529e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800528e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	3348      	adds	r3, #72	@ 0x48
 8005294:	443b      	add	r3, r7
 8005296:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800529a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800529c:	e020      	b.n	80052e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800529e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a0:	3301      	adds	r3, #1
 80052a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d9e8      	bls.n	800527c <RCC_SetFlashLatency+0x40>
 80052aa:	e019      	b.n	80052e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052b0:	e013      	b.n	80052da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	3348      	adds	r3, #72	@ 0x48
 80052b8:	443b      	add	r3, r7
 80052ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d807      	bhi.n	80052d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	3348      	adds	r3, #72	@ 0x48
 80052ca:	443b      	add	r3, r7
 80052cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80052d0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80052d2:	e005      	b.n	80052e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d6:	3301      	adds	r3, #1
 80052d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d9e8      	bls.n	80052b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80052e0:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <RCC_SetFlashLatency+0xf4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 0207 	bic.w	r2, r3, #7
 80052e8:	4911      	ldr	r1, [pc, #68]	@ (8005330 <RCC_SetFlashLatency+0xf4>)
 80052ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052f0:	f7fb fbb4 	bl	8000a5c <HAL_GetTick>
 80052f4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80052f6:	e008      	b.n	800530a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052f8:	f7fb fbb0 	bl	8000a5c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e007      	b.n	800531a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800530a:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <RCC_SetFlashLatency+0xf4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005314:	429a      	cmp	r2, r3
 8005316:	d1ef      	bne.n	80052f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	374c      	adds	r7, #76	@ 0x4c
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}
 8005322:	bf00      	nop
 8005324:	0800b004 	.word	0x0800b004
 8005328:	0800b014 	.word	0x0800b014
 800532c:	0800b020 	.word	0x0800b020
 8005330:	58004000 	.word	0x58004000

08005334 <LL_RCC_LSE_IsEnabled>:
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <LL_RCC_LSE_IsEnabled+0x18>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <LL_RCC_LSE_IsEnabled+0x1a>
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_RCC_LSE_IsReady>:
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800535c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d101      	bne.n	8005370 <LL_RCC_LSE_IsReady+0x18>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <LL_RCC_LSE_IsReady+0x1a>
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_RCC_MSI_EnablePLLMode>:
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800538a:	f043 0304 	orr.w	r3, r3, #4
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <LL_RCC_SetRFWKPClockSource>:
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80053a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_SetSMPSClockSource>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	f023 0203 	bic.w	r2, r3, #3
 80053d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4313      	orrs	r3, r2
 80053e0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_RCC_SetSMPSPrescaler>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005400:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4313      	orrs	r3, r2
 8005408:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <LL_RCC_SetUSARTClockSource>:
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800541e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <LL_RCC_SetLPUARTClockSource>:
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005452:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_RCC_SetI2CClockSource>:
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005486:	43db      	mvns	r3, r3
 8005488:	401a      	ands	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_RCC_SetLPTIMClockSource>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	43db      	mvns	r3, r3
 80054c0:	401a      	ands	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_RCC_SetSAIClockSource>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_RCC_SetRNGClockSource>:
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005518:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800551c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_RCC_SetCLK48ClockSource>:
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005544:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005548:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <LL_RCC_SetUSBClockSource>:
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ffe3 	bl	8005534 <LL_RCC_SetCLK48ClockSource>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <LL_RCC_SetADCClockSource>:
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800557e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005586:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800558a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_RCC_SetRTCClockSource>:
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_RCC_GetRTCClockSource>:
{
 80055ce:	b480      	push	{r7}
 80055d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_RCC_ForceBackupDomainReset>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <LL_RCC_ReleaseBackupDomainReset>:
{
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800561a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <LL_RCC_PLLSAI1_Enable>:
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800563a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_RCC_PLLSAI1_Disable>:
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800564e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005658:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800565c:	6013      	str	r3, [r2, #0]
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_RCC_PLLSAI1_IsReady>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800567a:	d101      	bne.n	8005680 <LL_RCC_PLLSAI1_IsReady+0x18>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <LL_APB1_GRP1_ForceReset>:
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <LL_APB1_GRP1_ReleaseReset>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80056b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c6:	4013      	ands	r3, r2
 80056c8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80056de:	2300      	movs	r3, #0
 80056e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80056e2:	2300      	movs	r3, #0
 80056e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d034      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056fa:	d021      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80056fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005700:	d81b      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005702:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005706:	d01d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005708:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800570c:	d815      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005716:	d110      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005726:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005728:	e00d      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f988 	bl	8005a44 <RCCEx_PLLSAI1_ConfigNP>
 8005734:	4603      	mov	r3, r0
 8005736:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005738:	e005      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	77fb      	strb	r3, [r7, #31]
        break;
 800573e:	e002      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fec3 	bl	80054dc <LL_RCC_SetSAIClockSource>
 8005756:	e001      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	7ffb      	ldrb	r3, [r7, #31]
 800575a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005764:	2b00      	cmp	r3, #0
 8005766:	d046      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005768:	f7ff ff31 	bl	80055ce <LL_RCC_GetRTCClockSource>
 800576c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	429a      	cmp	r2, r3
 8005776:	d03c      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005778:	f7fe fc68 	bl	800404c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff0b 	bl	80055a2 <LL_RCC_SetRTCClockSource>
 800578c:	e02e      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005798:	f7ff ff26 	bl	80055e8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800579c:	f7ff ff35 	bl	800560a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80057ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80057b8:	f7ff fdbc 	bl	8005334 <LL_RCC_LSE_IsEnabled>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d114      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057c2:	f7fb f94b 	bl	8000a5c <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80057c8:	e00b      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fb f947 	bl	8000a5c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d902      	bls.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	77fb      	strb	r3, [r7, #31]
              break;
 80057e0:	e004      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80057e2:	f7ff fdb9 	bl	8005358 <LL_RCC_LSE_IsReady>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d1ee      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80057ec:	7ffb      	ldrb	r3, [r7, #31]
 80057ee:	77bb      	strb	r3, [r7, #30]
 80057f0:	e001      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fe05 	bl	8005416 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff fe10 	bl	8005442 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fe38 	bl	80054a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fe2d 	bl	80054a8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fe05 	bl	800546e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fdfa 	bl	800546e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d022      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fe68 	bl	8005560 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005898:	d107      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058b2:	d10b      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f91e 	bl	8005afa <RCCEx_PLLSAI1_ConfigNQ>
 80058be:	4603      	mov	r3, r0
 80058c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80058c8:	7ffb      	ldrb	r3, [r7, #31]
 80058ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02b      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e0:	d008      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fe05 	bl	8005508 <LL_RCC_SetRNGClockSource>
 80058fe:	e00a      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	2000      	movs	r0, #0
 800590c:	f7ff fdfc 	bl	8005508 <LL_RCC_SetRNGClockSource>
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff fe0f 	bl	8005534 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800591e:	d107      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800592e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d022      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fe18 	bl	8005576 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594e:	d107      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800595a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005968:	d10b      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f91e 	bl	8005bb0 <RCCEx_PLLSAI1_ConfigNR>
 8005974:	4603      	mov	r3, r0
 8005976:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005978:	7ffb      	ldrb	r3, [r7, #31]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800597e:	7ffb      	ldrb	r3, [r7, #31]
 8005980:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fd01 	bl	800539a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fd20 	bl	80053ee <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fd07 	bl	80053c6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80059b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80059c6:	f7ff fcd9 	bl	800537c <LL_RCC_MSI_EnablePLLMode>
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80059d8:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80059dc:	f7ff fe56 	bl	800568c <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80059e0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80059e4:	f7ff fe64 	bl	80056b0 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005a10:	4a0b      	ldr	r2, [pc, #44]	@ (8005a40 <HAL_RCCEx_CRSConfig+0x70>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005a16:	4b0a      	ldr	r3, [pc, #40]	@ (8005a40 <HAL_RCCEx_CRSConfig+0x70>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	4906      	ldr	r1, [pc, #24]	@ (8005a40 <HAL_RCCEx_CRSConfig+0x70>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005a2a:	4b05      	ldr	r3, [pc, #20]	@ (8005a40 <HAL_RCCEx_CRSConfig+0x70>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <HAL_RCCEx_CRSConfig+0x70>)
 8005a30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a34:	6013      	str	r3, [r2, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40006000 	.word	0x40006000

08005a44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a50:	f7ff fdfb 	bl	800564a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a54:	f7fb f802 	bl	8000a5c <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a5a:	e009      	b.n	8005a70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a5c:	f7fa fffe 	bl	8000a5c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6e:	e004      	b.n	8005a7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a70:	f7ff fdfa 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d137      	bne.n	8005af0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005aae:	f7ff fdbd 	bl	800562c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab2:	f7fa ffd3 	bl	8000a5c <HAL_GetTick>
 8005ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ab8:	e009      	b.n	8005ace <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aba:	f7fa ffcf 	bl	8000a5c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d902      	bls.n	8005ace <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	73fb      	strb	r3, [r7, #15]
        break;
 8005acc:	e004      	b.n	8005ad8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ace:	f7ff fdcb 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d1f0      	bne.n	8005aba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aec:	4313      	orrs	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b06:	f7ff fda0 	bl	800564a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b0a:	f7fa ffa7 	bl	8000a5c <HAL_GetTick>
 8005b0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b10:	e009      	b.n	8005b26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b12:	f7fa ffa3 	bl	8000a5c <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d902      	bls.n	8005b26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	e004      	b.n	8005b30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b26:	f7ff fd9f 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d137      	bne.n	8005ba6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b60:	4313      	orrs	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b64:	f7ff fd62 	bl	800562c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b68:	f7fa ff78 	bl	8000a5c <HAL_GetTick>
 8005b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b6e:	e009      	b.n	8005b84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b70:	f7fa ff74 	bl	8000a5c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d902      	bls.n	8005b84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	73fb      	strb	r3, [r7, #15]
        break;
 8005b82:	e004      	b.n	8005b8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b84:	f7ff fd70 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d1f0      	bne.n	8005b70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d108      	bne.n	8005ba6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005bbc:	f7ff fd45 	bl	800564a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bc0:	f7fa ff4c 	bl	8000a5c <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bc6:	e009      	b.n	8005bdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc8:	f7fa ff48 	bl	8000a5c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bda:	e004      	b.n	8005be6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bdc:	f7ff fd44 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d137      	bne.n	8005c5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c00:	4313      	orrs	r3, r2
 8005c02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c16:	4313      	orrs	r3, r2
 8005c18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c1a:	f7ff fd07 	bl	800562c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1e:	f7fa ff1d 	bl	8000a5c <HAL_GetTick>
 8005c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c24:	e009      	b.n	8005c3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c26:	f7fa ff19 	bl	8000a5c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d902      	bls.n	8005c3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	73fb      	strb	r3, [r7, #15]
        break;
 8005c38:	e004      	b.n	8005c44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c3a:	f7ff fd15 	bl	8005668 <LL_RCC_PLLSAI1_IsReady>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d1f0      	bne.n	8005c26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e049      	b.n	8005d0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fa fd6f 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 fa7d 	bl	80061a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d001      	beq.n	8005d2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e02e      	b.n	8005d8a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a17      	ldr	r2, [pc, #92]	@ (8005d98 <HAL_TIM_Base_Start+0x84>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_Base_Start+0x34>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d46:	d115      	bne.n	8005d74 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <HAL_TIM_Base_Start+0x88>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d015      	beq.n	8005d86 <HAL_TIM_Base_Start+0x72>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d60:	d011      	beq.n	8005d86 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	e008      	b.n	8005d86 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	00010007 	.word	0x00010007

08005da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d020      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0202 	mvn.w	r2, #2
 8005dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9bc 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9ae 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9bf 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d020      	beq.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01b      	beq.n	8005e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0204 	mvn.w	r2, #4
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f996 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f988 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f999 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d020      	beq.n	8005e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01b      	beq.n	8005e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0208 	mvn.w	r2, #8
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f970 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f962 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f973 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f06f 0210 	mvn.w	r2, #16
 8005eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f94a 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005ed4:	e005      	b.n	8005ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f93c 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f94d 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00c      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0201 	mvn.w	r2, #1
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f91a 	bl	8006140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 faab 	bl	8006490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 faa3 	bl	80064a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f907 	bl	8006190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0220 	mvn.w	r2, #32
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa6b 	bl	800647c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_ConfigClockSource+0x1c>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0b6      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x18a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005fe8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ff4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006006:	d03e      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0xd8>
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600c:	f200 8087 	bhi.w	800611e <HAL_TIM_ConfigClockSource+0x170>
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006014:	f000 8086 	beq.w	8006124 <HAL_TIM_ConfigClockSource+0x176>
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601c:	d87f      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 800601e:	2b70      	cmp	r3, #112	@ 0x70
 8006020:	d01a      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0xaa>
 8006022:	2b70      	cmp	r3, #112	@ 0x70
 8006024:	d87b      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 8006026:	2b60      	cmp	r3, #96	@ 0x60
 8006028:	d050      	beq.n	80060cc <HAL_TIM_ConfigClockSource+0x11e>
 800602a:	2b60      	cmp	r3, #96	@ 0x60
 800602c:	d877      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 800602e:	2b50      	cmp	r3, #80	@ 0x50
 8006030:	d03c      	beq.n	80060ac <HAL_TIM_ConfigClockSource+0xfe>
 8006032:	2b50      	cmp	r3, #80	@ 0x50
 8006034:	d873      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d058      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x13e>
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d86f      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 800603e:	2b30      	cmp	r3, #48	@ 0x30
 8006040:	d064      	beq.n	800610c <HAL_TIM_ConfigClockSource+0x15e>
 8006042:	2b30      	cmp	r3, #48	@ 0x30
 8006044:	d86b      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 8006046:	2b20      	cmp	r3, #32
 8006048:	d060      	beq.n	800610c <HAL_TIM_ConfigClockSource+0x15e>
 800604a:	2b20      	cmp	r3, #32
 800604c:	d867      	bhi.n	800611e <HAL_TIM_ConfigClockSource+0x170>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d05c      	beq.n	800610c <HAL_TIM_ConfigClockSource+0x15e>
 8006052:	2b10      	cmp	r3, #16
 8006054:	d05a      	beq.n	800610c <HAL_TIM_ConfigClockSource+0x15e>
 8006056:	e062      	b.n	800611e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006068:	f000 f988 	bl	800637c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800607a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	609a      	str	r2, [r3, #8]
      break;
 8006084:	e04f      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006096:	f000 f971 	bl	800637c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a8:	609a      	str	r2, [r3, #8]
      break;
 80060aa:	e03c      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b8:	461a      	mov	r2, r3
 80060ba:	f000 f8e3 	bl	8006284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2150      	movs	r1, #80	@ 0x50
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f93c 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 80060ca:	e02c      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060d8:	461a      	mov	r2, r3
 80060da:	f000 f902 	bl	80062e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2160      	movs	r1, #96	@ 0x60
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 f92c 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 80060ea:	e01c      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f8:	461a      	mov	r2, r3
 80060fa:	f000 f8c3 	bl	8006284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2140      	movs	r1, #64	@ 0x40
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f91c 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 800610a:	e00c      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f000 f913 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 800611c:	e003      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
      break;
 8006122:	e000      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a30      	ldr	r2, [pc, #192]	@ (8006278 <TIM_Base_SetConfig+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0x20>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c2:	d108      	bne.n	80061d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a27      	ldr	r2, [pc, #156]	@ (8006278 <TIM_Base_SetConfig+0xd4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00b      	beq.n	80061f6 <TIM_Base_SetConfig+0x52>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e4:	d007      	beq.n	80061f6 <TIM_Base_SetConfig+0x52>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a24      	ldr	r2, [pc, #144]	@ (800627c <TIM_Base_SetConfig+0xd8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <TIM_Base_SetConfig+0x52>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a23      	ldr	r2, [pc, #140]	@ (8006280 <TIM_Base_SetConfig+0xdc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d108      	bne.n	8006208 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a12      	ldr	r2, [pc, #72]	@ (8006278 <TIM_Base_SetConfig+0xd4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0xa0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a11      	ldr	r2, [pc, #68]	@ (800627c <TIM_Base_SetConfig+0xd8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0xa0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <TIM_Base_SetConfig+0xdc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d103      	bne.n	800624c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]
  }
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f023 0201 	bic.w	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 030a 	bic.w	r3, r3, #10
 80062c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	f023 0210 	bic.w	r2, r3, #16
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800630c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800631e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	f043 0307 	orr.w	r3, r3, #7
 8006368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e04a      	b.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006404:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a12      	ldr	r2, [pc, #72]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643c:	d10c      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00

0800647c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064c8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064ee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80064f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	4013      	ands	r3, r2
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006558:	b480      	push	{r7}
 800655a:	b09d      	sub	sp, #116	@ 0x74
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	78db      	ldrb	r3, [r3, #3]
 8006586:	2b03      	cmp	r3, #3
 8006588:	d81f      	bhi.n	80065ca <USB_ActivateEndpoint+0x72>
 800658a:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <USB_ActivateEndpoint+0x38>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065a1 	.word	0x080065a1
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065d3 	.word	0x080065d3
 800659c:	080065af 	.word	0x080065af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065ac:	e012      	b.n	80065d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065b2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80065b6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065ba:	e00b      	b.n	80065d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065c8:	e004      	b.n	80065d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065d0:	e000      	b.n	80065d4 <USB_ActivateEndpoint+0x7c>
      break;
 80065d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	b21b      	sxth	r3, r3
 8006606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660e:	b21a      	sxth	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b21b      	sxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7b1b      	ldrb	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8178 	bne.w	800693a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8084 	beq.w	800675c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	4413      	add	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	00da      	lsls	r2, r3, #3
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	827b      	strh	r3, [r7, #18]
 8006696:	8a7b      	ldrh	r3, [r7, #18]
 8006698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <USB_ActivateEndpoint+0x180>
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	823b      	strh	r3, [r7, #16]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	8a3b      	ldrh	r3, [r7, #16]
 80066c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d020      	beq.n	8006722 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f6:	81bb      	strh	r3, [r7, #12]
 80066f8:	89bb      	ldrh	r3, [r7, #12]
 80066fa:	f083 0320 	eor.w	r3, r3, #32
 80066fe:	81bb      	strh	r3, [r7, #12]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	89bb      	ldrh	r3, [r7, #12]
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
 8006720:	e2d5      	b.n	8006cce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006738:	81fb      	strh	r3, [r7, #14]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
 800675a:	e2b8      	b.n	8006cce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	4413      	add	r3, r2
 800676e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	00da      	lsls	r2, r3, #3
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	4413      	add	r3, r2
 800677a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	88db      	ldrh	r3, [r3, #6]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	4413      	add	r3, r2
 80067a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	00da      	lsls	r2, r3, #3
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067be:	b29a      	uxth	r2, r3
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067ca:	d91d      	bls.n	8006808 <USB_ActivateEndpoint+0x2b0>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <USB_ActivateEndpoint+0x28e>
 80067e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067e2:	3b01      	subs	r3, #1
 80067e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	4313      	orrs	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e026      	b.n	8006856 <USB_ActivateEndpoint+0x2fe>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <USB_ActivateEndpoint+0x2ce>
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e017      	b.n	8006856 <USB_ActivateEndpoint+0x2fe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <USB_ActivateEndpoint+0x2e8>
 800683a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800683c:	3301      	adds	r3, #1
 800683e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006848:	b29b      	uxth	r3, r3
 800684a:	029b      	lsls	r3, r3, #10
 800684c:	b29b      	uxth	r3, r3
 800684e:	4313      	orrs	r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006864:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d01b      	beq.n	80068a6 <USB_ActivateEndpoint+0x34e>
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006884:	843b      	strh	r3, [r7, #32]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	8c3b      	ldrh	r3, [r7, #32]
 8006892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d124      	bne.n	80068f8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c4:	83bb      	strh	r3, [r7, #28]
 80068c6:	8bbb      	ldrh	r3, [r7, #28]
 80068c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068cc:	83bb      	strh	r3, [r7, #28]
 80068ce:	8bbb      	ldrh	r3, [r7, #28]
 80068d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068d4:	83bb      	strh	r3, [r7, #28]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	8bbb      	ldrh	r3, [r7, #28]
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
 80068f6:	e1ea      	b.n	8006cce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	83fb      	strh	r3, [r7, #30]
 8006910:	8bfb      	ldrh	r3, [r7, #30]
 8006912:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006916:	83fb      	strh	r3, [r7, #30]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	8bfb      	ldrh	r3, [r7, #30]
 8006924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800692c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006934:	b29b      	uxth	r3, r3
 8006936:	8013      	strh	r3, [r2, #0]
 8006938:	e1c9      	b.n	8006cce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d11e      	bne.n	8006980 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006958:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006972:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
 800697e:	e01d      	b.n	80069bc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006996:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069cc:	4413      	add	r3, r2
 80069ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	00da      	lsls	r2, r3, #3
 80069d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	891b      	ldrh	r3, [r3, #8]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a00:	4413      	add	r3, r2
 8006a02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	00da      	lsls	r2, r3, #3
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	895b      	ldrh	r3, [r3, #10]
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 8093 	bne.w	8006b54 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01b      	beq.n	8006a82 <USB_ActivateEndpoint+0x52a>
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006a90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01b      	beq.n	8006ad2 <USB_ActivateEndpoint+0x57a>
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006aea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006aec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006af0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006af2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006af4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006af8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b30:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
 8006b52:	e0bc      	b.n	8006cce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01d      	beq.n	8006bac <USB_ActivateEndpoint+0x654>
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006bbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01d      	beq.n	8006c04 <USB_ActivateEndpoint+0x6ac>
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d024      	beq.n	8006c56 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c2a:	f083 0320 	eor.w	r3, r3, #32
 8006c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8013      	strh	r3, [r2, #0]
 8006c54:	e01d      	b.n	8006c92 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006cce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3774      	adds	r7, #116	@ 0x74
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop

08006ce0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b08d      	sub	sp, #52	@ 0x34
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	7b1b      	ldrb	r3, [r3, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f040 808e 	bne.w	8006e10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d044      	beq.n	8006d86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	81bb      	strh	r3, [r7, #12]
 8006d0a:	89bb      	ldrh	r3, [r7, #12]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01b      	beq.n	8006d4c <USB_DeactivateEndpoint+0x6c>
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	817b      	strh	r3, [r7, #10]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	897b      	ldrh	r3, [r7, #10]
 8006d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d62:	813b      	strh	r3, [r7, #8]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	441a      	add	r2, r3
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	8013      	strh	r3, [r2, #0]
 8006d84:	e192      	b.n	80070ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	827b      	strh	r3, [r7, #18]
 8006d94:	8a7b      	ldrh	r3, [r7, #18]
 8006d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01b      	beq.n	8006dd6 <USB_DeactivateEndpoint+0xf6>
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db4:	823b      	strh	r3, [r7, #16]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	8a3b      	ldrh	r3, [r7, #16]
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	81fb      	strh	r3, [r7, #14]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	89fb      	ldrh	r3, [r7, #14]
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]
 8006e0e:	e14d      	b.n	80070ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 80a5 	bne.w	8006f64 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	843b      	strh	r3, [r7, #32]
 8006e28:	8c3b      	ldrh	r3, [r7, #32]
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01b      	beq.n	8006e6a <USB_DeactivateEndpoint+0x18a>
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e48:	83fb      	strh	r3, [r7, #30]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	8bfb      	ldrh	r3, [r7, #30]
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	83bb      	strh	r3, [r7, #28]
 8006e78:	8bbb      	ldrh	r3, [r7, #28]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d01b      	beq.n	8006eba <USB_DeactivateEndpoint+0x1da>
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e98:	837b      	strh	r3, [r7, #26]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	8b7b      	ldrh	r3, [r7, #26]
 8006ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eb2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed0:	833b      	strh	r3, [r7, #24]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	8b3b      	ldrh	r3, [r7, #24]
 8006ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f08:	82fb      	strh	r3, [r7, #22]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	8afb      	ldrh	r3, [r7, #22]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f40:	82bb      	strh	r3, [r7, #20]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	441a      	add	r2, r3
 8006f4c:	8abb      	ldrh	r3, [r7, #20]
 8006f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8013      	strh	r3, [r2, #0]
 8006f62:	e0a3      	b.n	80070ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01b      	beq.n	8006fb4 <USB_DeactivateEndpoint+0x2d4>
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006fc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01b      	beq.n	8007004 <USB_DeactivateEndpoint+0x324>
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ffc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007000:	b29b      	uxth	r3, r3
 8007002:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800701a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007052:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	441a      	add	r2, r3
 800705e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800706c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007070:	b29b      	uxth	r3, r3
 8007072:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	441a      	add	r2, r3
 8007096:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800709c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3734      	adds	r7, #52	@ 0x34
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b0c2      	sub	sp, #264	@ 0x108
 80070be:	af00      	add	r7, sp, #0
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c8:	6018      	str	r0, [r3, #0]
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 86b7 	bne.w	8007e54 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d908      	bls.n	8007114 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007112:	e007      	b.n	8007124 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	7b1b      	ldrb	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d13a      	bne.n	80071aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6959      	ldr	r1, [r3, #20]
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	88da      	ldrh	r2, [r3, #6]
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	b29b      	uxth	r3, r3
 8007152:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007156:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	f001 fcc2 	bl	8008ae4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800717a:	b29b      	uxth	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	4413      	add	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	00da      	lsls	r2, r3, #3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4413      	add	r3, r2
 8007196:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	f000 be1f 	b.w	8007de8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	78db      	ldrb	r3, [r3, #3]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	f040 8462 	bne.w	8007a80 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	f240 83df 	bls.w	8007998 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007200:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800722a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800722e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007232:	b29b      	uxth	r3, r3
 8007234:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 81c7 	beq.w	800760a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	633b      	str	r3, [r7, #48]	@ 0x30
 8007288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d177      	bne.n	8007388 <USB_EPStartXfer+0x2ce>
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	4413      	add	r3, r2
 80072ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	00da      	lsls	r2, r3, #3
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ea:	d921      	bls.n	8007330 <USB_EPStartXfer+0x276>
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <USB_EPStartXfer+0x252>
 8007302:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007306:	3b01      	subs	r3, #1
 8007308:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007328:	b29a      	uxth	r2, r3
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e050      	b.n	80073d2 <USB_EPStartXfer+0x318>
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <USB_EPStartXfer+0x294>
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007346:	b29a      	uxth	r2, r3
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e041      	b.n	80073d2 <USB_EPStartXfer+0x318>
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USB_EPStartXfer+0x2b4>
 8007364:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007368:	3301      	adds	r3, #1
 800736a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007378:	b29b      	uxth	r3, r3
 800737a:	029b      	lsls	r3, r3, #10
 800737c:	b29b      	uxth	r3, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	b29a      	uxth	r2, r3
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e024      	b.n	80073d2 <USB_EPStartXfer+0x318>
 8007388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d11c      	bne.n	80073d2 <USB_EPStartXfer+0x318>
 8007398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	4413      	add	r3, r2
 80073ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00da      	lsls	r2, r3, #3
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	4413      	add	r3, r2
 80073c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	895b      	ldrh	r3, [r3, #10]
 80073de:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6959      	ldr	r1, [r3, #20]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007400:	6800      	ldr	r0, [r0, #0]
 8007402:	f001 fb6f 	bl	8008ae4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	441a      	add	r2, r3
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	429a      	cmp	r2, r3
 800743e:	d90f      	bls.n	8007460 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007450:	1ad2      	subs	r2, r2, r3
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	621a      	str	r2, [r3, #32]
 800745e:	e00e      	b.n	800747e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d177      	bne.n	800757e <USB_EPStartXfer+0x4c4>
 800748e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	4413      	add	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00da      	lsls	r2, r3, #3
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074de:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e0:	d921      	bls.n	8007526 <USB_EPStartXfer+0x46c>
 80074e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <USB_EPStartXfer+0x448>
 80074f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750c:	b29b      	uxth	r3, r3
 800750e:	029b      	lsls	r3, r3, #10
 8007510:	b29b      	uxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800751e:	b29a      	uxth	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	e056      	b.n	80075d4 <USB_EPStartXfer+0x51a>
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <USB_EPStartXfer+0x48a>
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753c:	b29a      	uxth	r2, r3
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	e047      	b.n	80075d4 <USB_EPStartXfer+0x51a>
 8007544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <USB_EPStartXfer+0x4aa>
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755e:	3301      	adds	r3, #1
 8007560:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29a      	uxth	r2, r3
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756e:	b29b      	uxth	r3, r3
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29b      	uxth	r3, r3
 8007574:	4313      	orrs	r3, r2
 8007576:	b29a      	uxth	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e02a      	b.n	80075d4 <USB_EPStartXfer+0x51a>
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d122      	bne.n	80075d4 <USB_EPStartXfer+0x51a>
 800758e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	623b      	str	r3, [r7, #32]
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	4413      	add	r3, r2
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	00da      	lsls	r2, r3, #3
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	891b      	ldrh	r3, [r3, #8]
 80075e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6959      	ldr	r1, [r3, #20]
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	f001 fa6e 	bl	8008ae4 <USB_WritePMA>
 8007608:	e3ee      	b.n	8007de8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800760a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d177      	bne.n	800770a <USB_EPStartXfer+0x650>
 800761a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007634:	b29b      	uxth	r3, r3
 8007636:	461a      	mov	r2, r3
 8007638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800763a:	4413      	add	r3, r2
 800763c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800763e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	00da      	lsls	r2, r3, #3
 800764c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764e:	4413      	add	r3, r2
 8007650:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007654:	647b      	str	r3, [r7, #68]	@ 0x44
 8007656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007660:	b29a      	uxth	r2, r3
 8007662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766a:	2b3e      	cmp	r3, #62	@ 0x3e
 800766c:	d921      	bls.n	80076b2 <USB_EPStartXfer+0x5f8>
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <USB_EPStartXfer+0x5d4>
 8007684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007688:	3b01      	subs	r3, #1
 800768a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800768e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29a      	uxth	r2, r3
 8007694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007698:	b29b      	uxth	r3, r3
 800769a:	029b      	lsls	r3, r3, #10
 800769c:	b29b      	uxth	r3, r3
 800769e:	4313      	orrs	r3, r2
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e056      	b.n	8007760 <USB_EPStartXfer+0x6a6>
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <USB_EPStartXfer+0x616>
 80076ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	e047      	b.n	8007760 <USB_EPStartXfer+0x6a6>
 80076d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <USB_EPStartXfer+0x636>
 80076e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ea:	3301      	adds	r3, #1
 80076ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b29a      	uxth	r2, r3
 8007704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e02a      	b.n	8007760 <USB_EPStartXfer+0x6a6>
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d122      	bne.n	8007760 <USB_EPStartXfer+0x6a6>
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	653b      	str	r3, [r7, #80]	@ 0x50
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007734:	b29b      	uxth	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773a:	4413      	add	r3, r2
 800773c:	653b      	str	r3, [r7, #80]	@ 0x50
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	00da      	lsls	r2, r3, #3
 800774c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800774e:	4413      	add	r3, r2
 8007750:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	b29a      	uxth	r2, r3
 800775c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	891b      	ldrh	r3, [r3, #8]
 800776c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6959      	ldr	r1, [r3, #20]
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	b29b      	uxth	r3, r3
 8007782:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007786:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800778a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800778e:	6800      	ldr	r0, [r0, #0]
 8007790:	f001 f9a8 	bl	8008ae4 <USB_WritePMA>
            ep->xfer_buff += len;
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695a      	ldr	r2, [r3, #20]
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	441a      	add	r2, r3
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a1a      	ldr	r2, [r3, #32]
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d90f      	bls.n	80077ee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80077ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	621a      	str	r2, [r3, #32]
 80077ec:	e00e      	b.n	800780c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2200      	movs	r2, #0
 800780a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	643b      	str	r3, [r7, #64]	@ 0x40
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d177      	bne.n	8007918 <USB_EPStartXfer+0x85e>
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007842:	b29b      	uxth	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	4413      	add	r3, r2
 800784a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	00da      	lsls	r2, r3, #3
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	4413      	add	r3, r2
 800785e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800786e:	b29a      	uxth	r2, r3
 8007870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007878:	2b3e      	cmp	r3, #62	@ 0x3e
 800787a:	d921      	bls.n	80078c0 <USB_EPStartXfer+0x806>
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <USB_EPStartXfer+0x7e2>
 8007892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007896:	3b01      	subs	r3, #1
 8007898:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	029b      	lsls	r3, r3, #10
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	e050      	b.n	8007962 <USB_EPStartXfer+0x8a8>
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <USB_EPStartXfer+0x824>
 80078c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	e041      	b.n	8007962 <USB_EPStartXfer+0x8a8>
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <USB_EPStartXfer+0x844>
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f8:	3301      	adds	r3, #1
 80078fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	b29b      	uxth	r3, r3
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	b29b      	uxth	r3, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	b29a      	uxth	r2, r3
 8007912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	e024      	b.n	8007962 <USB_EPStartXfer+0x8a8>
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d11c      	bne.n	8007962 <USB_EPStartXfer+0x8a8>
 8007928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793c:	4413      	add	r3, r2
 800793e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007950:	4413      	add	r3, r2
 8007952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795c:	b29a      	uxth	r2, r3
 800795e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	895b      	ldrh	r3, [r3, #10]
 800796e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6959      	ldr	r1, [r3, #20]
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	b29b      	uxth	r3, r3
 8007984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007988:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800798c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007990:	6800      	ldr	r0, [r0, #0]
 8007992:	f001 f8a7 	bl	8008ae4 <USB_WritePMA>
 8007996:	e227      	b.n	8007de8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	441a      	add	r2, r3
 80079ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a24:	4413      	add	r3, r2
 8007a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	00da      	lsls	r2, r3, #3
 8007a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a38:	4413      	add	r3, r2
 8007a3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	891b      	ldrh	r3, [r3, #8]
 8007a56:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6959      	ldr	r1, [r3, #20]
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a70:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a74:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a78:	6800      	ldr	r0, [r0, #0]
 8007a7a:	f001 f833 	bl	8008ae4 <USB_WritePMA>
 8007a7e:	e1b3      	b.n	8007de8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80c6 	beq.w	8007c52 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d177      	bne.n	8007bd2 <USB_EPStartXfer+0xb18>
 8007ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b02:	4413      	add	r3, r2
 8007b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	00da      	lsls	r2, r3, #3
 8007b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b16:	4413      	add	r3, r2
 8007b18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b34:	d921      	bls.n	8007b7a <USB_EPStartXfer+0xac0>
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <USB_EPStartXfer+0xa9c>
 8007b4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b50:	3b01      	subs	r3, #1
 8007b52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	029b      	lsls	r3, r3, #10
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e050      	b.n	8007c1c <USB_EPStartXfer+0xb62>
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <USB_EPStartXfer+0xade>
 8007b82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	e041      	b.n	8007c1c <USB_EPStartXfer+0xb62>
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <USB_EPStartXfer+0xafe>
 8007bae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e024      	b.n	8007c1c <USB_EPStartXfer+0xb62>
 8007bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d11c      	bne.n	8007c1c <USB_EPStartXfer+0xb62>
 8007be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf6:	4413      	add	r3, r2
 8007bf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00da      	lsls	r2, r3, #3
 8007c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	895b      	ldrh	r3, [r3, #10]
 8007c28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6959      	ldr	r1, [r3, #20]
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c4a:	6800      	ldr	r0, [r0, #0]
 8007c4c:	f000 ff4a 	bl	8008ae4 <USB_WritePMA>
 8007c50:	e0ca      	b.n	8007de8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d177      	bne.n	8007d52 <USB_EPStartXfer+0xc98>
 8007c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c82:	4413      	add	r3, r2
 8007c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	00da      	lsls	r2, r3, #3
 8007c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c96:	4413      	add	r3, r2
 8007c98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cb4:	d921      	bls.n	8007cfa <USB_EPStartXfer+0xc40>
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <USB_EPStartXfer+0xc1c>
 8007ccc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e05c      	b.n	8007db4 <USB_EPStartXfer+0xcfa>
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <USB_EPStartXfer+0xc5e>
 8007d02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e04d      	b.n	8007db4 <USB_EPStartXfer+0xcfa>
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USB_EPStartXfer+0xc7e>
 8007d2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d32:	3301      	adds	r3, #1
 8007d34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	029b      	lsls	r3, r3, #10
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d4e:	801a      	strh	r2, [r3, #0]
 8007d50:	e030      	b.n	8007db4 <USB_EPStartXfer+0xcfa>
 8007d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d128      	bne.n	8007db4 <USB_EPStartXfer+0xcfa>
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d86:	4413      	add	r3, r2
 8007d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d9e:	4413      	add	r3, r2
 8007da0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007db2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	891b      	ldrh	r3, [r3, #8]
 8007dc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6959      	ldr	r1, [r3, #20]
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007de2:	6800      	ldr	r0, [r0, #0]
 8007de4:	f000 fe7e 	bl	8008ae4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e0e:	817b      	strh	r3, [r7, #10]
 8007e10:	897b      	ldrh	r3, [r7, #10]
 8007e12:	f083 0310 	eor.w	r3, r3, #16
 8007e16:	817b      	strh	r3, [r7, #10]
 8007e18:	897b      	ldrh	r3, [r7, #10]
 8007e1a:	f083 0320 	eor.w	r3, r3, #32
 8007e1e:	817b      	strh	r3, [r7, #10]
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	897b      	ldrh	r3, [r7, #10]
 8007e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	8013      	strh	r3, [r2, #0]
 8007e50:	f000 bcde 	b.w	8008810 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	7b1b      	ldrb	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 80bb 	bne.w	8007fdc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d917      	bls.n	8007eb2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	619a      	str	r2, [r3, #24]
 8007eb0:	e00e      	b.n	8007ed0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	00da      	lsls	r2, r3, #3
 8007f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f28:	801a      	strh	r2, [r3, #0]
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f30:	d924      	bls.n	8007f7c <USB_EPStartXfer+0xec2>
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USB_EPStartXfer+0xe98>
 8007f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	029b      	lsls	r3, r3, #10
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4313      	orrs	r3, r2
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	f000 bc10 	b.w	800879c <USB_EPStartXfer+0x16e2>
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10c      	bne.n	8007f9e <USB_EPStartXfer+0xee4>
 8007f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e3fe      	b.n	800879c <USB_EPStartXfer+0x16e2>
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <USB_EPStartXfer+0xf04>
 8007fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fb8:	3301      	adds	r3, #1
 8007fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fd8:	801a      	strh	r2, [r3, #0]
 8007fda:	e3df      	b.n	800879c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	78db      	ldrb	r3, [r3, #3]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f040 8218 	bne.w	800841e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f040 809d 	bne.w	800813a <USB_EPStartXfer+0x1080>
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800800e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800801c:	b29b      	uxth	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008024:	4413      	add	r3, r2
 8008026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800802a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	00da      	lsls	r2, r3, #3
 8008038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800803c:	4413      	add	r3, r2
 800803e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008052:	b29a      	uxth	r2, r3
 8008054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b3e      	cmp	r3, #62	@ 0x3e
 8008068:	d92b      	bls.n	80080c2 <USB_EPStartXfer+0x1008>
 800806a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <USB_EPStartXfer+0xfe0>
 8008090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008094:	3b01      	subs	r3, #1
 8008096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800809a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	029b      	lsls	r3, r3, #10
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	e070      	b.n	80081a4 <USB_EPStartXfer+0x10ea>
 80080c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10c      	bne.n	80080ec <USB_EPStartXfer+0x1032>
 80080d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080e8:	801a      	strh	r2, [r3, #0]
 80080ea:	e05b      	b.n	80081a4 <USB_EPStartXfer+0x10ea>
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	085b      	lsrs	r3, r3, #1
 80080fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <USB_EPStartXfer+0x1062>
 8008112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008116:	3301      	adds	r3, #1
 8008118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800811c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008128:	b29b      	uxth	r3, r3
 800812a:	029b      	lsls	r3, r3, #10
 800812c:	b29b      	uxth	r3, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e034      	b.n	80081a4 <USB_EPStartXfer+0x10ea>
 800813a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d12c      	bne.n	80081a4 <USB_EPStartXfer+0x10ea>
 800814a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008166:	b29b      	uxth	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800816e:	4413      	add	r3, r2
 8008170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008186:	4413      	add	r3, r2
 8008188:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800818c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	b29a      	uxth	r2, r3
 800819e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 809d 	bne.w	80082fe <USB_EPStartXfer+0x1244>
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081e8:	4413      	add	r3, r2
 80081ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	00da      	lsls	r2, r3, #3
 80081fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008200:	4413      	add	r3, r2
 8008202:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008206:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800820a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b3e      	cmp	r3, #62	@ 0x3e
 800822c:	d92b      	bls.n	8008286 <USB_EPStartXfer+0x11cc>
 800822e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <USB_EPStartXfer+0x11a4>
 8008254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008258:	3b01      	subs	r3, #1
 800825a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800825e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e069      	b.n	800835a <USB_EPStartXfer+0x12a0>
 8008286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10c      	bne.n	80082b0 <USB_EPStartXfer+0x11f6>
 8008296:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	e054      	b.n	800835a <USB_EPStartXfer+0x12a0>
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <USB_EPStartXfer+0x1226>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082da:	3301      	adds	r3, #1
 80082dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	029b      	lsls	r3, r3, #10
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	e02d      	b.n	800835a <USB_EPStartXfer+0x12a0>
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d125      	bne.n	800835a <USB_EPStartXfer+0x12a0>
 800830e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800831c:	b29b      	uxth	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008324:	4413      	add	r3, r2
 8008326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800832a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	00da      	lsls	r2, r3, #3
 8008338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800833c:	4413      	add	r3, r2
 800833e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	b29a      	uxth	r2, r3
 8008354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008358:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 8218 	beq.w	800879c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800838c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <USB_EPStartXfer+0x12ea>
 8008398:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800839c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10d      	bne.n	80083c0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 81f5 	bne.w	800879c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 81ee 	bne.w	800879c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	441a      	add	r2, r3
 8008404:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008414:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008418:	b29b      	uxth	r3, r3
 800841a:	8013      	strh	r3, [r2, #0]
 800841c:	e1be      	b.n	800879c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800841e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	78db      	ldrb	r3, [r3, #3]
 800842a:	2b01      	cmp	r3, #1
 800842c:	f040 81b4 	bne.w	8008798 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d917      	bls.n	800847c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846c:	1ad2      	subs	r2, r2, r3
 800846e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	619a      	str	r2, [r3, #24]
 800847a:	e00e      	b.n	800849a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800849a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 8085 	bne.w	80085b6 <USB_EPStartXfer+0x14fc>
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084d0:	4413      	add	r3, r2
 80084d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	00da      	lsls	r2, r3, #3
 80084e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084e8:	4413      	add	r3, r2
 80084ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084fe:	b29a      	uxth	r2, r3
 8008500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008504:	801a      	strh	r2, [r3, #0]
 8008506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850a:	2b3e      	cmp	r3, #62	@ 0x3e
 800850c:	d923      	bls.n	8008556 <USB_EPStartXfer+0x149c>
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	f003 031f 	and.w	r3, r3, #31
 8008520:	2b00      	cmp	r3, #0
 8008522:	d104      	bne.n	800852e <USB_EPStartXfer+0x1474>
 8008524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008528:	3b01      	subs	r3, #1
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800852e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853a:	b29b      	uxth	r3, r3
 800853c:	029b      	lsls	r3, r3, #10
 800853e:	b29b      	uxth	r3, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	b29b      	uxth	r3, r3
 8008544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854c:	b29a      	uxth	r2, r3
 800854e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008552:	801a      	strh	r2, [r3, #0]
 8008554:	e060      	b.n	8008618 <USB_EPStartXfer+0x155e>
 8008556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10c      	bne.n	8008578 <USB_EPStartXfer+0x14be>
 800855e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856e:	b29a      	uxth	r2, r3
 8008570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e04f      	b.n	8008618 <USB_EPStartXfer+0x155e>
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <USB_EPStartXfer+0x14de>
 800858e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008592:	3301      	adds	r3, #1
 8008594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29a      	uxth	r2, r3
 80085a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	029b      	lsls	r3, r3, #10
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4313      	orrs	r3, r2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	e030      	b.n	8008618 <USB_EPStartXfer+0x155e>
 80085b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d128      	bne.n	8008618 <USB_EPStartXfer+0x155e>
 80085c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085ea:	4413      	add	r3, r2
 80085ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	00da      	lsls	r2, r3, #3
 80085fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008602:	4413      	add	r3, r2
 8008604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008610:	b29a      	uxth	r2, r3
 8008612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008616:	801a      	strh	r2, [r3, #0]
 8008618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 8085 	bne.w	8008742 <USB_EPStartXfer+0x1688>
 8008638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008654:	b29b      	uxth	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800865c:	4413      	add	r3, r2
 800865e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	00da      	lsls	r2, r3, #3
 8008670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008674:	4413      	add	r3, r2
 8008676:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800867a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800867e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800868a:	b29a      	uxth	r2, r3
 800868c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008696:	2b3e      	cmp	r3, #62	@ 0x3e
 8008698:	d923      	bls.n	80086e2 <USB_EPStartXfer+0x1628>
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <USB_EPStartXfer+0x1600>
 80086b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b4:	3b01      	subs	r3, #1
 80086b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4313      	orrs	r3, r2
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d8:	b29a      	uxth	r2, r3
 80086da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	e05c      	b.n	800879c <USB_EPStartXfer+0x16e2>
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10c      	bne.n	8008704 <USB_EPStartXfer+0x164a>
 80086ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	e04b      	b.n	800879c <USB_EPStartXfer+0x16e2>
 8008704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800870e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <USB_EPStartXfer+0x166a>
 800871a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800871e:	3301      	adds	r3, #1
 8008720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29a      	uxth	r2, r3
 800872c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008730:	b29b      	uxth	r3, r3
 8008732:	029b      	lsls	r3, r3, #10
 8008734:	b29b      	uxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b29a      	uxth	r2, r3
 800873a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e02c      	b.n	800879c <USB_EPStartXfer+0x16e2>
 8008742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	785b      	ldrb	r3, [r3, #1]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d124      	bne.n	800879c <USB_EPStartXfer+0x16e2>
 8008752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008768:	4413      	add	r3, r2
 800876a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800876e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	00da      	lsls	r2, r3, #3
 800877c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008780:	4413      	add	r3, r2
 8008782:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008786:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800878a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	e001      	b.n	800879c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e03a      	b.n	8008812 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800879c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	441a      	add	r2, r3
 80087f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880c:	b29b      	uxth	r3, r3
 800880e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d020      	beq.n	8008870 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008844:	81bb      	strh	r3, [r7, #12]
 8008846:	89bb      	ldrh	r3, [r7, #12]
 8008848:	f083 0310 	eor.w	r3, r3, #16
 800884c:	81bb      	strh	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	441a      	add	r2, r3
 8008858:	89bb      	ldrh	r3, [r7, #12]
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]
 800886e:	e01f      	b.n	80088b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008886:	81fb      	strh	r3, [r7, #14]
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800888e:	81fb      	strh	r3, [r7, #14]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	441a      	add	r2, r3
 800889a:	89fb      	ldrh	r3, [r7, #14]
 800889c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088be:	b480      	push	{r7}
 80088c0:	b087      	sub	sp, #28
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	7b1b      	ldrb	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 809d 	bne.w	8008a0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d04c      	beq.n	8008974 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	823b      	strh	r3, [r7, #16]
 80088e8:	8a3b      	ldrh	r3, [r7, #16]
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01b      	beq.n	800892a <USB_EPClearStall+0x6c>
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008908:	81fb      	strh	r3, [r7, #14]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	89fb      	ldrh	r3, [r7, #14]
 8008916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800891a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008922:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008926:	b29b      	uxth	r3, r3
 8008928:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d06c      	beq.n	8008a0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008948:	81bb      	strh	r3, [r7, #12]
 800894a:	89bb      	ldrh	r3, [r7, #12]
 800894c:	f083 0320 	eor.w	r3, r3, #32
 8008950:	81bb      	strh	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	89bb      	ldrh	r3, [r7, #12]
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
 8008972:	e04b      	b.n	8008a0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	82fb      	strh	r3, [r7, #22]
 8008982:	8afb      	ldrh	r3, [r7, #22]
 8008984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01b      	beq.n	80089c4 <USB_EPClearStall+0x106>
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a2:	82bb      	strh	r3, [r7, #20]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	441a      	add	r2, r3
 80089ae:	8abb      	ldrh	r3, [r7, #20]
 80089b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089da:	827b      	strh	r3, [r7, #18]
 80089dc:	8a7b      	ldrh	r3, [r7, #18]
 80089de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089e2:	827b      	strh	r3, [r7, #18]
 80089e4:	8a7b      	ldrh	r3, [r7, #18]
 80089e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089ea:	827b      	strh	r3, [r7, #18]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	441a      	add	r2, r3
 80089f6:	8a7b      	ldrh	r3, [r7, #18]
 80089f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2280      	movs	r2, #128	@ 0x80
 8008a30:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= (uint16_t)USB_CNTR_RESUME;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f043 0310 	orr.w	r3, r3, #16
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b08b      	sub	sp, #44	@ 0x2c
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	460b      	mov	r3, r1
 8008af4:	80fb      	strh	r3, [r7, #6]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008afa:	88bb      	ldrh	r3, [r7, #4]
 8008afc:	3301      	adds	r3, #1
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b1a:	e01b      	b.n	8008b54 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	3301      	adds	r3, #1
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b21a      	sxth	r2, r3
 8008b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	b21b      	sxth	r3, r3
 8008b34:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	8a7a      	ldrh	r2, [r7, #18]
 8008b3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	3302      	adds	r3, #2
 8008b40:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	3301      	adds	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	3b01      	subs	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e0      	bne.n	8008b1c <USB_WritePMA+0x38>
  }
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	372c      	adds	r7, #44	@ 0x2c
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b08b      	sub	sp, #44	@ 0x2c
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4611      	mov	r1, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	460b      	mov	r3, r1
 8008b78:	80fb      	strh	r3, [r7, #6]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b7e:	88bb      	ldrh	r3, [r7, #4]
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b9e:	e018      	b.n	8008bd2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	3302      	adds	r3, #2
 8008bac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e3      	bne.n	8008ba0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008bd8:	88bb      	ldrh	r3, [r7, #4]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	701a      	strb	r2, [r3, #0]
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	372c      	adds	r7, #44	@ 0x2c
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008c0c:	2010      	movs	r0, #16
 8008c0e:	f002 f975 	bl	800aefc <USBD_static_malloc>
 8008c12:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	@ 0xb0
 8008c24:	2100      	movs	r1, #0
 8008c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e048      	b.n	8008cc0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	32b0      	adds	r2, #176	@ 0xb0
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	32b0      	adds	r2, #176	@ 0xb0
 8008c48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	7c1b      	ldrb	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10d      	bne.n	8008c76 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc8 <USBD_HID_Init+0xc8>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	f003 020f 	and.w	r2, r3, #15
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3326      	adds	r3, #38	@ 0x26
 8008c70:	2207      	movs	r2, #7
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e00c      	b.n	8008c90 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008c76:	4b14      	ldr	r3, [pc, #80]	@ (8008cc8 <USBD_HID_Init+0xc8>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	f003 020f 	and.w	r2, r3, #15
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	3326      	adds	r3, #38	@ 0x26
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008c90:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <USBD_HID_Init+0xc8>)
 8008c92:	7819      	ldrb	r1, [r3, #0]
 8008c94:	2304      	movs	r3, #4
 8008c96:	2203      	movs	r2, #3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 ffe8 	bl	800ac6e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <USBD_HID_Init+0xc8>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	f003 020f 	and.w	r2, r3, #15
 8008ca6:	6879      	ldr	r1, [r7, #4]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	3324      	adds	r3, #36	@ 0x24
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	200000be 	.word	0x200000be

08008ccc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8008d58 <USBD_HID_DeInit+0x8c>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 ffeb 	bl	800acba <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d58 <USBD_HID_DeInit+0x8c>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 020f 	and.w	r2, r3, #15
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	3324      	adds	r3, #36	@ 0x24
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008cfe:	4b16      	ldr	r3, [pc, #88]	@ (8008d58 <USBD_HID_DeInit+0x8c>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 020f 	and.w	r2, r3, #15
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	3326      	adds	r3, #38	@ 0x26
 8008d14:	2200      	movs	r2, #0
 8008d16:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32b0      	adds	r2, #176	@ 0xb0
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d011      	beq.n	8008d4e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	32b0      	adds	r2, #176	@ 0xb0
 8008d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f002 f8ed 	bl	800af18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	32b0      	adds	r2, #176	@ 0xb0
 8008d48:	2100      	movs	r1, #0
 8008d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	200000be 	.word	0x200000be

08008d5c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	32b0      	adds	r2, #176	@ 0xb0
 8008d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d74:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e0e8      	b.n	8008f5a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d046      	beq.n	8008e22 <USBD_HID_Setup+0xc6>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	f040 80d8 	bne.w	8008f4a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	3b02      	subs	r3, #2
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d836      	bhi.n	8008e12 <USBD_HID_Setup+0xb6>
 8008da4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <USBD_HID_Setup+0x50>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008e03 	.word	0x08008e03
 8008db0:	08008de3 	.word	0x08008de3
 8008db4:	08008e13 	.word	0x08008e13
 8008db8:	08008e13 	.word	0x08008e13
 8008dbc:	08008e13 	.word	0x08008e13
 8008dc0:	08008e13 	.word	0x08008e13
 8008dc4:	08008e13 	.word	0x08008e13
 8008dc8:	08008e13 	.word	0x08008e13
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008dd5 	.word	0x08008dd5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	885b      	ldrh	r3, [r3, #2]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	601a      	str	r2, [r3, #0]
          break;
 8008de0:	e01e      	b.n	8008e20 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fb71 	bl	800a4d0 <USBD_CtlSendData>
          break;
 8008dee:	e017      	b.n	8008e20 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	885b      	ldrh	r3, [r3, #2]
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	605a      	str	r2, [r3, #4]
          break;
 8008e00:	e00e      	b.n	8008e20 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3304      	adds	r3, #4
 8008e06:	2201      	movs	r2, #1
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fb60 	bl	800a4d0 <USBD_CtlSendData>
          break;
 8008e10:	e006      	b.n	8008e20 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 faea 	bl	800a3ee <USBD_CtlError>
          ret = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e1e:	bf00      	nop
      }
      break;
 8008e20:	e09a      	b.n	8008f58 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b0b      	cmp	r3, #11
 8008e28:	f200 8086 	bhi.w	8008f38 <USBD_HID_Setup+0x1dc>
 8008e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <USBD_HID_Setup+0xd8>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008f47 	.word	0x08008f47
 8008e3c:	08008f39 	.word	0x08008f39
 8008e40:	08008f39 	.word	0x08008f39
 8008e44:	08008f39 	.word	0x08008f39
 8008e48:	08008f39 	.word	0x08008f39
 8008e4c:	08008e8f 	.word	0x08008e8f
 8008e50:	08008f39 	.word	0x08008f39
 8008e54:	08008f39 	.word	0x08008f39
 8008e58:	08008f39 	.word	0x08008f39
 8008e5c:	08008ee7 	.word	0x08008ee7
 8008e60:	08008f11 	.word	0x08008f11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d107      	bne.n	8008e80 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e70:	f107 030a 	add.w	r3, r7, #10
 8008e74:	2202      	movs	r2, #2
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fb29 	bl	800a4d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e7e:	e063      	b.n	8008f48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fab3 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8008e8c:	e05c      	b.n	8008f48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	2b22      	cmp	r3, #34	@ 0x22
 8008e98:	d108      	bne.n	8008eac <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	88db      	ldrh	r3, [r3, #6]
 8008e9e:	2b36      	cmp	r3, #54	@ 0x36
 8008ea0:	bf28      	it	cs
 8008ea2:	2336      	movcs	r3, #54	@ 0x36
 8008ea4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8008f64 <USBD_HID_Setup+0x208>)
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	e015      	b.n	8008ed8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	885b      	ldrh	r3, [r3, #2]
 8008eb0:	0a1b      	lsrs	r3, r3, #8
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b21      	cmp	r3, #33	@ 0x21
 8008eb6:	d108      	bne.n	8008eca <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8008f68 <USBD_HID_Setup+0x20c>)
 8008eba:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	88db      	ldrh	r3, [r3, #6]
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	bf28      	it	cs
 8008ec4:	2309      	movcs	r3, #9
 8008ec6:	82bb      	strh	r3, [r7, #20]
 8008ec8:	e006      	b.n	8008ed8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 fa8e 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	75fb      	strb	r3, [r7, #23]
            break;
 8008ed6:	e037      	b.n	8008f48 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ed8:	8abb      	ldrh	r3, [r7, #20]
 8008eda:	461a      	mov	r2, r3
 8008edc:	6939      	ldr	r1, [r7, #16]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 faf6 	bl	800a4d0 <USBD_CtlSendData>
          break;
 8008ee4:	e030      	b.n	8008f48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d107      	bne.n	8008f02 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fae8 	bl	800a4d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f00:	e022      	b.n	8008f48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fa72 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f0e:	e01b      	b.n	8008f48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d106      	bne.n	8008f2a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	885b      	ldrh	r3, [r3, #2]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	461a      	mov	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f28:	e00e      	b.n	8008f48 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 fa5e 	bl	800a3ee <USBD_CtlError>
            ret = USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	75fb      	strb	r3, [r7, #23]
          break;
 8008f36:	e007      	b.n	8008f48 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 fa57 	bl	800a3ee <USBD_CtlError>
          ret = USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	75fb      	strb	r3, [r7, #23]
          break;
 8008f44:	e000      	b.n	8008f48 <USBD_HID_Setup+0x1ec>
          break;
 8008f46:	bf00      	nop
      }
      break;
 8008f48:	e006      	b.n	8008f58 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fa4e 	bl	800a3ee <USBD_CtlError>
      ret = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	75fb      	strb	r3, [r7, #23]
      break;
 8008f56:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000088 	.word	0x20000088
 8008f68:	20000070 	.word	0x20000070

08008f6c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	32b0      	adds	r2, #176	@ 0xb0
 8008f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f88:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e014      	b.n	8008fbe <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d10d      	bne.n	8008fbc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	7b1b      	ldrb	r3, [r3, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d109      	bne.n	8008fbc <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	2201      	movs	r2, #1
 8008fac:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008fae:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <USBD_HID_SendReport+0x5c>)
 8008fb0:	7819      	ldrb	r1, [r3, #0]
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f001 ff27 	bl	800ae0a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200000be 	.word	0x200000be

08008fcc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008fd4:	2181      	movs	r1, #129	@ 0x81
 8008fd6:	4809      	ldr	r0, [pc, #36]	@ (8008ffc <USBD_HID_GetFSCfgDesc+0x30>)
 8008fd8:	f000 fba9 	bl	800972e <USBD_GetEpDesc>
 8008fdc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	220a      	movs	r2, #10
 8008fe8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2222      	movs	r2, #34	@ 0x22
 8008fee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008ff0:	4b02      	ldr	r3, [pc, #8]	@ (8008ffc <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000004c 	.word	0x2000004c

08009000 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009008:	2181      	movs	r1, #129	@ 0x81
 800900a:	4809      	ldr	r0, [pc, #36]	@ (8009030 <USBD_HID_GetHSCfgDesc+0x30>)
 800900c:	f000 fb8f 	bl	800972e <USBD_GetEpDesc>
 8009010:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2207      	movs	r2, #7
 800901c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2222      	movs	r2, #34	@ 0x22
 8009022:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	2000004c 	.word	0x2000004c

08009034 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800903c:	2181      	movs	r1, #129	@ 0x81
 800903e:	4809      	ldr	r0, [pc, #36]	@ (8009064 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009040:	f000 fb75 	bl	800972e <USBD_GetEpDesc>
 8009044:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	220a      	movs	r2, #10
 8009050:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2222      	movs	r2, #34	@ 0x22
 8009056:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009058:	4b02      	ldr	r3, [pc, #8]	@ (8009064 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	2000004c 	.word	0x2000004c

08009068 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	32b0      	adds	r2, #176	@ 0xb0
 800907e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009082:	2200      	movs	r2, #0
 8009084:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	220a      	movs	r2, #10
 80090a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80090a2:	4b03      	ldr	r3, [pc, #12]	@ (80090b0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	2000007c 	.word	0x2000007c

080090b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e01f      	b.n	800910c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f001 fd49 	bl	800ab98 <USBD_LL_Init>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]

  return ret;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	e025      	b.n	8009178 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	32ae      	adds	r2, #174	@ 0xae
 800913e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00f      	beq.n	8009168 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	32ae      	adds	r2, #174	@ 0xae
 8009152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	f107 020e 	add.w	r2, r7, #14
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	4602      	mov	r2, r0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 fd55 	bl	800ac38 <USBD_LL_Start>
 800918e:	4603      	mov	r3, r0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f8a4 	bl	800a37a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009240:	461a      	mov	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	2b02      	cmp	r3, #2
 8009254:	d01a      	beq.n	800928c <USBD_LL_SetupStage+0x72>
 8009256:	2b02      	cmp	r3, #2
 8009258:	d822      	bhi.n	80092a0 <USBD_LL_SetupStage+0x86>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USBD_LL_SetupStage+0x4a>
 800925e:	2b01      	cmp	r3, #1
 8009260:	d00a      	beq.n	8009278 <USBD_LL_SetupStage+0x5e>
 8009262:	e01d      	b.n	80092a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fad1 	bl	8009814 <USBD_StdDevReq>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
      break;
 8009276:	e020      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fb39 	bl	80098f8 <USBD_StdItfReq>
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
      break;
 800928a:	e016      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb9b 	bl	80099d0 <USBD_StdEPReq>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
      break;
 800929e:	e00c      	b.n	80092ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 fd22 	bl	800acf8 <USBD_LL_StallEP>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73fb      	strb	r3, [r7, #15]
      break;
 80092b8:	bf00      	nop
  }

  return ret;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	460b      	mov	r3, r1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d16e      	bne.n	80093ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	f040 8098 	bne.w	8009420 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d913      	bls.n	8009324 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	1ad2      	subs	r2, r2, r3
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	4293      	cmp	r3, r2
 8009314:	bf28      	it	cs
 8009316:	4613      	movcs	r3, r2
 8009318:	461a      	mov	r2, r3
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f001 f903 	bl	800a528 <USBD_CtlContinueRx>
 8009322:	e07d      	b.n	8009420 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2b02      	cmp	r3, #2
 8009330:	d014      	beq.n	800935c <USBD_LL_DataOutStage+0x98>
 8009332:	2b02      	cmp	r3, #2
 8009334:	d81d      	bhi.n	8009372 <USBD_LL_DataOutStage+0xae>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <USBD_LL_DataOutStage+0x7c>
 800933a:	2b01      	cmp	r3, #1
 800933c:	d003      	beq.n	8009346 <USBD_LL_DataOutStage+0x82>
 800933e:	e018      	b.n	8009372 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	75bb      	strb	r3, [r7, #22]
            break;
 8009344:	e018      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f9d2 	bl	80096fa <USBD_CoreFindIF>
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]
            break;
 800935a:	e00d      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009362:	b2db      	uxtb	r3, r3
 8009364:	4619      	mov	r1, r3
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 f9d4 	bl	8009714 <USBD_CoreFindEP>
 800936c:	4603      	mov	r3, r0
 800936e:	75bb      	strb	r3, [r7, #22]
            break;
 8009370:	e002      	b.n	8009378 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	75bb      	strb	r3, [r7, #22]
            break;
 8009376:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009378:	7dbb      	ldrb	r3, [r7, #22]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d119      	bne.n	80093b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b03      	cmp	r3, #3
 8009388:	d113      	bne.n	80093b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800938a:	7dba      	ldrb	r2, [r7, #22]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	32ae      	adds	r2, #174	@ 0xae
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800939a:	7dba      	ldrb	r2, [r7, #22]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32ae      	adds	r2, #174	@ 0xae
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f001 f8c9 	bl	800a54a <USBD_CtlSendStatus>
 80093b8:	e032      	b.n	8009420 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	4619      	mov	r1, r3
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f9a5 	bl	8009714 <USBD_CoreFindEP>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ce:	7dbb      	ldrb	r3, [r7, #22]
 80093d0:	2bff      	cmp	r3, #255	@ 0xff
 80093d2:	d025      	beq.n	8009420 <USBD_LL_DataOutStage+0x15c>
 80093d4:	7dbb      	ldrb	r3, [r7, #22]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d122      	bne.n	8009420 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d117      	bne.n	8009416 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093e6:	7dba      	ldrb	r2, [r7, #22]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	32ae      	adds	r2, #174	@ 0xae
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00f      	beq.n	8009416 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093f6:	7dba      	ldrb	r2, [r7, #22]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093fe:	7dba      	ldrb	r2, [r7, #22]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	32ae      	adds	r2, #174	@ 0xae
 8009404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	7afa      	ldrb	r2, [r7, #11]
 800940c:	4611      	mov	r1, r2
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	e000      	b.n	8009422 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	460b      	mov	r3, r1
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d16f      	bne.n	800951e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3314      	adds	r3, #20
 8009442:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800944a:	2b02      	cmp	r3, #2
 800944c:	d15a      	bne.n	8009504 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	429a      	cmp	r2, r3
 8009458:	d914      	bls.n	8009484 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	461a      	mov	r2, r3
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 f848 	bl	800a506 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009476:	2300      	movs	r3, #0
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f001 fce5 	bl	800ae4c <USBD_LL_PrepareReceive>
 8009482:	e03f      	b.n	8009504 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d11c      	bne.n	80094ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009498:	429a      	cmp	r2, r3
 800949a:	d316      	bcc.n	80094ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d20f      	bcs.n	80094ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f001 f829 	bl	800a506 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094bc:	2300      	movs	r3, #0
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f001 fcc2 	bl	800ae4c <USBD_LL_PrepareReceive>
 80094c8:	e01c      	b.n	8009504 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d10f      	bne.n	80094f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f001 fbfd 	bl	800acf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f001 f836 	bl	800a570 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d03a      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f7ff fe42 	bl	8009198 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800951c:	e032      	b.n	8009584 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009524:	b2db      	uxtb	r3, r3
 8009526:	4619      	mov	r1, r3
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f8f3 	bl	8009714 <USBD_CoreFindEP>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	2bff      	cmp	r3, #255	@ 0xff
 8009536:	d025      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d122      	bne.n	8009584 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d11c      	bne.n	8009584 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800954a:	7dfa      	ldrb	r2, [r7, #23]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	32ae      	adds	r2, #174	@ 0xae
 8009550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d014      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800955a:	7dfa      	ldrb	r2, [r7, #23]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009562:	7dfa      	ldrb	r2, [r7, #23]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	@ 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	7afa      	ldrb	r2, [r7, #11]
 8009570:	4611      	mov	r1, r2
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009580:	7dbb      	ldrb	r3, [r7, #22]
 8009582:	e000      	b.n	8009586 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d014      	beq.n	80095f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00e      	beq.n	80095f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6852      	ldr	r2, [r2, #4]
 80095e2:	b2d2      	uxtb	r2, r2
 80095e4:	4611      	mov	r1, r2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	2200      	movs	r2, #0
 80095f8:	2100      	movs	r1, #0
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fb37 	bl	800ac6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2240      	movs	r2, #64	@ 0x40
 800960c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009610:	2340      	movs	r3, #64	@ 0x40
 8009612:	2200      	movs	r2, #0
 8009614:	2180      	movs	r1, #128	@ 0x80
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fb29 	bl	800ac6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2240      	movs	r2, #64	@ 0x40
 8009626:	621a      	str	r2, [r3, #32]

  return ret;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	78fa      	ldrb	r2, [r7, #3]
 8009642:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b04      	cmp	r3, #4
 8009664:	d006      	beq.n	8009674 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b04      	cmp	r3, #4
 800969c:	d106      	bne.n	80096ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d110      	bne.n	80096f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009706:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009720:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	b29b      	uxth	r3, r3
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	4293      	cmp	r3, r2
 8009752:	d91f      	bls.n	8009794 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800975a:	e013      	b.n	8009784 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800975c:	f107 030a 	add.w	r3, r7, #10
 8009760:	4619      	mov	r1, r3
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f000 f81b 	bl	800979e <USBD_GetNextDesc>
 8009768:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b05      	cmp	r3, #5
 8009770:	d108      	bne.n	8009784 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	789b      	ldrb	r3, [r3, #2]
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	429a      	cmp	r2, r3
 800977e:	d008      	beq.n	8009792 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	b29a      	uxth	r2, r3
 800978a:	897b      	ldrh	r3, [r7, #10]
 800978c:	429a      	cmp	r2, r3
 800978e:	d8e5      	bhi.n	800975c <USBD_GetEpDesc+0x2e>
 8009790:	e000      	b.n	8009794 <USBD_GetEpDesc+0x66>
          break;
 8009792:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009794:	693b      	ldr	r3, [r7, #16]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	461a      	mov	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80097c8:	68fb      	ldr	r3, [r7, #12]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b087      	sub	sp, #28
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	3301      	adds	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097f4:	8a3b      	ldrh	r3, [r7, #16]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	b21a      	sxth	r2, r3
 80097fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097fe:	4313      	orrs	r3, r2
 8009800:	b21b      	sxth	r3, r3
 8009802:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009804:	89fb      	ldrh	r3, [r7, #14]
}
 8009806:	4618      	mov	r0, r3
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
	...

08009814 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d005      	beq.n	800983a <USBD_StdDevReq+0x26>
 800982e:	2b40      	cmp	r3, #64	@ 0x40
 8009830:	d857      	bhi.n	80098e2 <USBD_StdDevReq+0xce>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <USBD_StdDevReq+0x42>
 8009836:	2b20      	cmp	r3, #32
 8009838:	d153      	bne.n	80098e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	32ae      	adds	r2, #174	@ 0xae
 8009844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]
      break;
 8009854:	e04a      	b.n	80098ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	2b09      	cmp	r3, #9
 800985c:	d83b      	bhi.n	80098d6 <USBD_StdDevReq+0xc2>
 800985e:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <USBD_StdDevReq+0x50>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	080098b9 	.word	0x080098b9
 8009868:	080098cd 	.word	0x080098cd
 800986c:	080098d7 	.word	0x080098d7
 8009870:	080098c3 	.word	0x080098c3
 8009874:	080098d7 	.word	0x080098d7
 8009878:	08009897 	.word	0x08009897
 800987c:	0800988d 	.word	0x0800988d
 8009880:	080098d7 	.word	0x080098d7
 8009884:	080098af 	.word	0x080098af
 8009888:	080098a1 	.word	0x080098a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa3c 	bl	8009d0c <USBD_GetDescriptor>
          break;
 8009894:	e024      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fbcb 	bl	800a034 <USBD_SetAddress>
          break;
 800989e:	e01f      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fc0a 	bl	800a0bc <USBD_SetConfig>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]
          break;
 80098ac:	e018      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fcad 	bl	800a210 <USBD_GetConfig>
          break;
 80098b6:	e013      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fcde 	bl	800a27c <USBD_GetStatus>
          break;
 80098c0:	e00e      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fd0d 	bl	800a2e4 <USBD_SetFeature>
          break;
 80098ca:	e009      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fd31 	bl	800a336 <USBD_ClrFeature>
          break;
 80098d4:	e004      	b.n	80098e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fd88 	bl	800a3ee <USBD_CtlError>
          break;
 80098de:	bf00      	nop
      }
      break;
 80098e0:	e004      	b.n	80098ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fd82 	bl	800a3ee <USBD_CtlError>
      break;
 80098ea:	bf00      	nop
  }

  return ret;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop

080098f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800990e:	2b40      	cmp	r3, #64	@ 0x40
 8009910:	d005      	beq.n	800991e <USBD_StdItfReq+0x26>
 8009912:	2b40      	cmp	r3, #64	@ 0x40
 8009914:	d852      	bhi.n	80099bc <USBD_StdItfReq+0xc4>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <USBD_StdItfReq+0x26>
 800991a:	2b20      	cmp	r3, #32
 800991c:	d14e      	bne.n	80099bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009924:	b2db      	uxtb	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	2b02      	cmp	r3, #2
 800992a:	d840      	bhi.n	80099ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	889b      	ldrh	r3, [r3, #4]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b01      	cmp	r3, #1
 8009934:	d836      	bhi.n	80099a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	889b      	ldrh	r3, [r3, #4]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff fedb 	bl	80096fa <USBD_CoreFindIF>
 8009944:	4603      	mov	r3, r0
 8009946:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2bff      	cmp	r3, #255	@ 0xff
 800994c:	d01d      	beq.n	800998a <USBD_StdItfReq+0x92>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11a      	bne.n	800998a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009954:	7bba      	ldrb	r2, [r7, #14]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	32ae      	adds	r2, #174	@ 0xae
 800995a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00f      	beq.n	8009984 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009964:	7bba      	ldrb	r2, [r7, #14]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800996c:	7bba      	ldrb	r2, [r7, #14]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32ae      	adds	r2, #174	@ 0xae
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009982:	e004      	b.n	800998e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009988:	e001      	b.n	800998e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	88db      	ldrh	r3, [r3, #6]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d110      	bne.n	80099b8 <USBD_StdItfReq+0xc0>
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10d      	bne.n	80099b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fdd4 	bl	800a54a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099a2:	e009      	b.n	80099b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fd21 	bl	800a3ee <USBD_CtlError>
          break;
 80099ac:	e004      	b.n	80099b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fd1c 	bl	800a3ee <USBD_CtlError>
          break;
 80099b6:	e000      	b.n	80099ba <USBD_StdItfReq+0xc2>
          break;
 80099b8:	bf00      	nop
      }
      break;
 80099ba:	e004      	b.n	80099c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fd15 	bl	800a3ee <USBD_CtlError>
      break;
 80099c4:	bf00      	nop
  }

  return ret;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	889b      	ldrh	r3, [r3, #4]
 80099e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80099ec:	2b40      	cmp	r3, #64	@ 0x40
 80099ee:	d007      	beq.n	8009a00 <USBD_StdEPReq+0x30>
 80099f0:	2b40      	cmp	r3, #64	@ 0x40
 80099f2:	f200 817f 	bhi.w	8009cf4 <USBD_StdEPReq+0x324>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02a      	beq.n	8009a50 <USBD_StdEPReq+0x80>
 80099fa:	2b20      	cmp	r3, #32
 80099fc:	f040 817a 	bne.w	8009cf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fe85 	bl	8009714 <USBD_CoreFindEP>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a0e:	7b7b      	ldrb	r3, [r7, #13]
 8009a10:	2bff      	cmp	r3, #255	@ 0xff
 8009a12:	f000 8174 	beq.w	8009cfe <USBD_StdEPReq+0x32e>
 8009a16:	7b7b      	ldrb	r3, [r7, #13]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f040 8170 	bne.w	8009cfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a1e:	7b7a      	ldrb	r2, [r7, #13]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a26:	7b7a      	ldrb	r2, [r7, #13]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32ae      	adds	r2, #174	@ 0xae
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8163 	beq.w	8009cfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a38:	7b7a      	ldrb	r2, [r7, #13]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	32ae      	adds	r2, #174	@ 0xae
 8009a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a4e:	e156      	b.n	8009cfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d008      	beq.n	8009a6a <USBD_StdEPReq+0x9a>
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	f300 8145 	bgt.w	8009ce8 <USBD_StdEPReq+0x318>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 809b 	beq.w	8009b9a <USBD_StdEPReq+0x1ca>
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d03c      	beq.n	8009ae2 <USBD_StdEPReq+0x112>
 8009a68:	e13e      	b.n	8009ce8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d002      	beq.n	8009a7c <USBD_StdEPReq+0xac>
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d016      	beq.n	8009aa8 <USBD_StdEPReq+0xd8>
 8009a7a:	e02c      	b.n	8009ad6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00d      	beq.n	8009a9e <USBD_StdEPReq+0xce>
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b80      	cmp	r3, #128	@ 0x80
 8009a86:	d00a      	beq.n	8009a9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f933 	bl	800acf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a92:	2180      	movs	r1, #128	@ 0x80
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 f92f 	bl	800acf8 <USBD_LL_StallEP>
 8009a9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a9c:	e020      	b.n	8009ae0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fca4 	bl	800a3ee <USBD_CtlError>
              break;
 8009aa6:	e01b      	b.n	8009ae0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	885b      	ldrh	r3, [r3, #2]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10e      	bne.n	8009ace <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <USBD_StdEPReq+0xfe>
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	2b80      	cmp	r3, #128	@ 0x80
 8009aba:	d008      	beq.n	8009ace <USBD_StdEPReq+0xfe>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	88db      	ldrh	r3, [r3, #6]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 f915 	bl	800acf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fd3b 	bl	800a54a <USBD_CtlSendStatus>

              break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc88 	bl	800a3ee <USBD_CtlError>
              break;
 8009ade:	bf00      	nop
          }
          break;
 8009ae0:	e107      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d002      	beq.n	8009af4 <USBD_StdEPReq+0x124>
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d016      	beq.n	8009b20 <USBD_StdEPReq+0x150>
 8009af2:	e04b      	b.n	8009b8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00d      	beq.n	8009b16 <USBD_StdEPReq+0x146>
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b80      	cmp	r3, #128	@ 0x80
 8009afe:	d00a      	beq.n	8009b16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 f8f7 	bl	800acf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b0a:	2180      	movs	r1, #128	@ 0x80
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 f8f3 	bl	800acf8 <USBD_LL_StallEP>
 8009b12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b14:	e040      	b.n	8009b98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fc68 	bl	800a3ee <USBD_CtlError>
              break;
 8009b1e:	e03b      	b.n	8009b98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d136      	bne.n	8009b96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f8fd 	bl	800ad36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fd04 	bl	800a54a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff fde4 	bl	8009714 <USBD_CoreFindEP>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b50:	7b7b      	ldrb	r3, [r7, #13]
 8009b52:	2bff      	cmp	r3, #255	@ 0xff
 8009b54:	d01f      	beq.n	8009b96 <USBD_StdEPReq+0x1c6>
 8009b56:	7b7b      	ldrb	r3, [r7, #13]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d11c      	bne.n	8009b96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009b5c:	7b7a      	ldrb	r2, [r7, #13]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b64:	7b7a      	ldrb	r2, [r7, #13]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32ae      	adds	r2, #174	@ 0xae
 8009b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d010      	beq.n	8009b96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b74:	7b7a      	ldrb	r2, [r7, #13]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	32ae      	adds	r2, #174	@ 0xae
 8009b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fc2d 	bl	800a3ee <USBD_CtlError>
              break;
 8009b94:	e000      	b.n	8009b98 <USBD_StdEPReq+0x1c8>
              break;
 8009b96:	bf00      	nop
          }
          break;
 8009b98:	e0ab      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d002      	beq.n	8009bac <USBD_StdEPReq+0x1dc>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d032      	beq.n	8009c10 <USBD_StdEPReq+0x240>
 8009baa:	e097      	b.n	8009cdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d007      	beq.n	8009bc2 <USBD_StdEPReq+0x1f2>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	@ 0x80
 8009bb6:	d004      	beq.n	8009bc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc17 	bl	800a3ee <USBD_CtlError>
                break;
 8009bc0:	e091      	b.n	8009ce6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da0b      	bge.n	8009be2 <USBD_StdEPReq+0x212>
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	3310      	adds	r3, #16
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3304      	adds	r3, #4
 8009be0:	e00b      	b.n	8009bfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2202      	movs	r2, #2
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc61 	bl	800a4d0 <USBD_CtlSendData>
              break;
 8009c0e:	e06a      	b.n	8009ce6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da11      	bge.n	8009c3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	3324      	adds	r3, #36	@ 0x24
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d117      	bne.n	8009c62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fbda 	bl	800a3ee <USBD_CtlError>
                  break;
 8009c3a:	e054      	b.n	8009ce6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fbc7 	bl	800a3ee <USBD_CtlError>
                  break;
 8009c60:	e041      	b.n	8009ce6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0b      	bge.n	8009c82 <USBD_StdEPReq+0x2b2>
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	3310      	adds	r3, #16
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	3304      	adds	r3, #4
 8009c80:	e00b      	b.n	8009c9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	3304      	adds	r3, #4
 8009c9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <USBD_StdEPReq+0x2d8>
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b80      	cmp	r3, #128	@ 0x80
 8009ca6:	d103      	bne.n	8009cb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	e00e      	b.n	8009cce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 f85d 	bl	800ad74 <USBD_LL_IsStallEP>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	e002      	b.n	8009cce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fbfb 	bl	800a4d0 <USBD_CtlSendData>
              break;
 8009cda:	e004      	b.n	8009ce6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb85 	bl	800a3ee <USBD_CtlError>
              break;
 8009ce4:	bf00      	nop
          }
          break;
 8009ce6:	e004      	b.n	8009cf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fb7f 	bl	800a3ee <USBD_CtlError>
          break;
 8009cf0:	bf00      	nop
      }
      break;
 8009cf2:	e005      	b.n	8009d00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb79 	bl	800a3ee <USBD_CtlError>
      break;
 8009cfc:	e000      	b.n	8009d00 <USBD_StdEPReq+0x330>
      break;
 8009cfe:	bf00      	nop
  }

  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	2b0e      	cmp	r3, #14
 8009d2e:	f200 8152 	bhi.w	8009fd6 <USBD_GetDescriptor+0x2ca>
 8009d32:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <USBD_GetDescriptor+0x2c>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009da9 	.word	0x08009da9
 8009d3c:	08009dc1 	.word	0x08009dc1
 8009d40:	08009e01 	.word	0x08009e01
 8009d44:	08009fd7 	.word	0x08009fd7
 8009d48:	08009fd7 	.word	0x08009fd7
 8009d4c:	08009f77 	.word	0x08009f77
 8009d50:	08009fa3 	.word	0x08009fa3
 8009d54:	08009fd7 	.word	0x08009fd7
 8009d58:	08009fd7 	.word	0x08009fd7
 8009d5c:	08009fd7 	.word	0x08009fd7
 8009d60:	08009fd7 	.word	0x08009fd7
 8009d64:	08009fd7 	.word	0x08009fd7
 8009d68:	08009fd7 	.word	0x08009fd7
 8009d6c:	08009fd7 	.word	0x08009fd7
 8009d70:	08009d75 	.word	0x08009d75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d96:	e126      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fb27 	bl	800a3ee <USBD_CtlError>
        err++;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	3301      	adds	r3, #1
 8009da4:	72fb      	strb	r3, [r7, #11]
      break;
 8009da6:	e11e      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	7c12      	ldrb	r2, [r2, #16]
 8009db4:	f107 0108 	add.w	r1, r7, #8
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
 8009dbc:	60f8      	str	r0, [r7, #12]
      break;
 8009dbe:	e112      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7c1b      	ldrb	r3, [r3, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10d      	bne.n	8009de4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd0:	f107 0208 	add.w	r2, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	2202      	movs	r2, #2
 8009de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009de2:	e100      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	701a      	strb	r2, [r3, #0]
      break;
 8009dfe:	e0f2      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	885b      	ldrh	r3, [r3, #2]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	f200 80ac 	bhi.w	8009f64 <USBD_GetDescriptor+0x258>
 8009e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e14 <USBD_GetDescriptor+0x108>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e2d 	.word	0x08009e2d
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e95 	.word	0x08009e95
 8009e20:	08009ec9 	.word	0x08009ec9
 8009e24:	08009efd 	.word	0x08009efd
 8009e28:	08009f31 	.word	0x08009f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00b      	beq.n	8009e50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	7c12      	ldrb	r2, [r2, #16]
 8009e44:	f107 0108 	add.w	r1, r7, #8
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e4e:	e091      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 facb 	bl	800a3ee <USBD_CtlError>
            err++;
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e5e:	e089      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	7c12      	ldrb	r2, [r2, #16]
 8009e78:	f107 0108 	add.w	r1, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e82:	e077      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fab1 	bl	800a3ee <USBD_CtlError>
            err++;
 8009e8c:	7afb      	ldrb	r3, [r7, #11]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	72fb      	strb	r3, [r7, #11]
          break;
 8009e92:	e06f      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	7c12      	ldrb	r2, [r2, #16]
 8009eac:	f107 0108 	add.w	r1, r7, #8
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4798      	blx	r3
 8009eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eb6:	e05d      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa97 	bl	800a3ee <USBD_CtlError>
            err++;
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ec6:	e055      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7c12      	ldrb	r2, [r2, #16]
 8009ee0:	f107 0108 	add.w	r1, r7, #8
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4798      	blx	r3
 8009ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eea:	e043      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa7d 	bl	800a3ee <USBD_CtlError>
            err++;
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8009efa:	e03b      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7c12      	ldrb	r2, [r2, #16]
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	4610      	mov	r0, r2
 8009f1a:	4798      	blx	r3
 8009f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1e:	e029      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fa63 	bl	800a3ee <USBD_CtlError>
            err++;
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2e:	e021      	b.n	8009f74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7c12      	ldrb	r2, [r2, #16]
 8009f48:	f107 0108 	add.w	r1, r7, #8
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f52:	e00f      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa49 	bl	800a3ee <USBD_CtlError>
            err++;
 8009f5c:	7afb      	ldrb	r3, [r7, #11]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	72fb      	strb	r3, [r7, #11]
          break;
 8009f62:	e007      	b.n	8009f74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa41 	bl	800a3ee <USBD_CtlError>
          err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f72:	bf00      	nop
      }
      break;
 8009f74:	e037      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	7c1b      	ldrb	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f86:	f107 0208 	add.w	r2, r7, #8
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4798      	blx	r3
 8009f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f90:	e029      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fa2a 	bl	800a3ee <USBD_CtlError>
        err++;
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009fa0:	e021      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10d      	bne.n	8009fc6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb2:	f107 0208 	add.w	r2, r7, #8
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
 8009fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fc4:	e00f      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fa10 	bl	800a3ee <USBD_CtlError>
        err++;
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd4:	e007      	b.n	8009fe6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa08 	bl	800a3ee <USBD_CtlError>
      err++;
 8009fde:	7afb      	ldrb	r3, [r7, #11]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fe4:	bf00      	nop
  }

  if (err != 0U)
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d11e      	bne.n	800a02a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	88db      	ldrh	r3, [r3, #6]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d016      	beq.n	800a022 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ff4:	893b      	ldrh	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00e      	beq.n	800a018 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	88da      	ldrh	r2, [r3, #6]
 8009ffe:	893b      	ldrh	r3, [r7, #8]
 800a000:	4293      	cmp	r3, r2
 800a002:	bf28      	it	cs
 800a004:	4613      	movcs	r3, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a00a:	893b      	ldrh	r3, [r7, #8]
 800a00c:	461a      	mov	r2, r3
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fa5d 	bl	800a4d0 <USBD_CtlSendData>
 800a016:	e009      	b.n	800a02c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f9e7 	bl	800a3ee <USBD_CtlError>
 800a020:	e004      	b.n	800a02c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa91 	bl	800a54a <USBD_CtlSendStatus>
 800a028:	e000      	b.n	800a02c <USBD_GetDescriptor+0x320>
    return;
 800a02a:	bf00      	nop
  }
}
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop

0800a034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d131      	bne.n	800a0aa <USBD_SetAddress+0x76>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	88db      	ldrh	r3, [r3, #6]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d12d      	bne.n	800a0aa <USBD_SetAddress+0x76>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	2b7f      	cmp	r3, #127	@ 0x7f
 800a054:	d829      	bhi.n	800a0aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d104      	bne.n	800a078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9bc 	bl	800a3ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a076:	e01d      	b.n	800a0b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7bfa      	ldrb	r2, [r7, #15]
 800a07c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fea1 	bl	800adcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa5d 	bl	800a54a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a09e:	e009      	b.n	800a0b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a8:	e004      	b.n	800a0b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f99e 	bl	800a3ee <USBD_CtlError>
  }
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	4b4e      	ldr	r3, [pc, #312]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d905      	bls.n	800a0e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f985 	bl	800a3ee <USBD_CtlError>
    return USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e08c      	b.n	800a202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d002      	beq.n	800a0fa <USBD_SetConfig+0x3e>
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d029      	beq.n	800a14c <USBD_SetConfig+0x90>
 800a0f8:	e075      	b.n	800a1e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0fa:	4b44      	ldr	r3, [pc, #272]	@ (800a20c <USBD_SetConfig+0x150>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d020      	beq.n	800a144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a102:	4b42      	ldr	r3, [pc, #264]	@ (800a20c <USBD_SetConfig+0x150>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a10c:	4b3f      	ldr	r3, [pc, #252]	@ (800a20c <USBD_SetConfig+0x150>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff f84b 	bl	80091ae <USBD_SetClassConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d008      	beq.n	800a134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f962 	bl	800a3ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a132:	e065      	b.n	800a200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa08 	bl	800a54a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2203      	movs	r2, #3
 800a13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a142:	e05d      	b.n	800a200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa00 	bl	800a54a <USBD_CtlSendStatus>
      break;
 800a14a:	e059      	b.n	800a200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a14c:	4b2f      	ldr	r3, [pc, #188]	@ (800a20c <USBD_SetConfig+0x150>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d112      	bne.n	800a17a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a15c:	4b2b      	ldr	r3, [pc, #172]	@ (800a20c <USBD_SetConfig+0x150>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a166:	4b29      	ldr	r3, [pc, #164]	@ (800a20c <USBD_SetConfig+0x150>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff f83a 	bl	80091e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9e9 	bl	800a54a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a178:	e042      	b.n	800a200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a17a:	4b24      	ldr	r3, [pc, #144]	@ (800a20c <USBD_SetConfig+0x150>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d02a      	beq.n	800a1de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff f828 	bl	80091e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a196:	4b1d      	ldr	r3, [pc, #116]	@ (800a20c <USBD_SetConfig+0x150>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a20c <USBD_SetConfig+0x150>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f801 	bl	80091ae <USBD_SetClassConfig>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00f      	beq.n	800a1d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f918 	bl	800a3ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff f80d 	bl	80091e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1d4:	e014      	b.n	800a200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f9b7 	bl	800a54a <USBD_CtlSendStatus>
      break;
 800a1dc:	e010      	b.n	800a200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f9b3 	bl	800a54a <USBD_CtlSendStatus>
      break;
 800a1e4:	e00c      	b.n	800a200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f900 	bl	800a3ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1ee:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <USBD_SetConfig+0x150>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fe fff6 	bl	80091e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fe:	bf00      	nop
  }

  return ret;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	2000024c 	.word	0x2000024c

0800a210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88db      	ldrh	r3, [r3, #6]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d004      	beq.n	800a22c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8e2 	bl	800a3ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a22a:	e023      	b.n	800a274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	dc02      	bgt.n	800a23e <USBD_GetConfig+0x2e>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc03      	bgt.n	800a244 <USBD_GetConfig+0x34>
 800a23c:	e015      	b.n	800a26a <USBD_GetConfig+0x5a>
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d00b      	beq.n	800a25a <USBD_GetConfig+0x4a>
 800a242:	e012      	b.n	800a26a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3308      	adds	r3, #8
 800a24e:	2201      	movs	r2, #1
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f93c 	bl	800a4d0 <USBD_CtlSendData>
        break;
 800a258:	e00c      	b.n	800a274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3304      	adds	r3, #4
 800a25e:	2201      	movs	r2, #1
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f934 	bl	800a4d0 <USBD_CtlSendData>
        break;
 800a268:	e004      	b.n	800a274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f8be 	bl	800a3ee <USBD_CtlError>
        break;
 800a272:	bf00      	nop
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b02      	cmp	r3, #2
 800a292:	d81e      	bhi.n	800a2d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	88db      	ldrh	r3, [r3, #6]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d004      	beq.n	800a2a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8a5 	bl	800a3ee <USBD_CtlError>
        break;
 800a2a4:	e01a      	b.n	800a2dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f043 0202 	orr.w	r2, r3, #2
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	330c      	adds	r3, #12
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f900 	bl	800a4d0 <USBD_CtlSendData>
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f88a 	bl	800a3ee <USBD_CtlError>
      break;
 800a2da:	bf00      	nop
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d107      	bne.n	800a306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f923 	bl	800a54a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a304:	e013      	b.n	800a32e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d10b      	bne.n	800a326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	889b      	ldrh	r3, [r3, #4]
 800a312:	0a1b      	lsrs	r3, r3, #8
 800a314:	b29b      	uxth	r3, r3
 800a316:	b2da      	uxtb	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f913 	bl	800a54a <USBD_CtlSendStatus>
}
 800a324:	e003      	b.n	800a32e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f860 	bl	800a3ee <USBD_CtlError>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a346:	b2db      	uxtb	r3, r3
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d80b      	bhi.n	800a366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10c      	bne.n	800a370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f8f3 	bl	800a54a <USBD_CtlSendStatus>
      }
      break;
 800a364:	e004      	b.n	800a370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f840 	bl	800a3ee <USBD_CtlError>
      break;
 800a36e:	e000      	b.n	800a372 <USBD_ClrFeature+0x3c>
      break;
 800a370:	bf00      	nop
  }
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff fa16 	bl	80097d6 <SWAPBYTE>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fa09 	bl	80097d6 <SWAPBYTE>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff f9fc 	bl	80097d6 <SWAPBYTE>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	80da      	strh	r2, [r3, #6]
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3f8:	2180      	movs	r1, #128	@ 0x80
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fc7c 	bl	800acf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a400:	2100      	movs	r1, #0
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fc78 	bl	800acf8 <USBD_LL_StallEP>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d036      	beq.n	800a494 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 f836 	bl	800a49c <USBD_GetLen>
 800a430:	4603      	mov	r3, r0
 800a432:	3301      	adds	r3, #1
 800a434:	b29b      	uxth	r3, r3
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	701a      	strb	r2, [r3, #0]
  idx++;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	4413      	add	r3, r2
 800a456:	2203      	movs	r2, #3
 800a458:	701a      	strb	r2, [r3, #0]
  idx++;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	3301      	adds	r3, #1
 800a45e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a460:	e013      	b.n	800a48a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	4413      	add	r3, r2
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	7812      	ldrb	r2, [r2, #0]
 800a46c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3301      	adds	r3, #1
 800a472:	613b      	str	r3, [r7, #16]
    idx++;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	3301      	adds	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	4413      	add	r3, r2
 800a480:	2200      	movs	r2, #0
 800a482:	701a      	strb	r2, [r3, #0]
    idx++;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	3301      	adds	r3, #1
 800a488:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e7      	bne.n	800a462 <USBD_GetString+0x52>
 800a492:	e000      	b.n	800a496 <USBD_GetString+0x86>
    return;
 800a494:	bf00      	nop
  }
}
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4ac:	e005      	b.n	800a4ba <USBD_GetLen+0x1e>
  {
    len++;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1f5      	bne.n	800a4ae <USBD_GetLen+0x12>
  }

  return len;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fc87 	bl	800ae0a <USBD_LL_Transmit>

  return USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	2100      	movs	r1, #0
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 fc76 	bl	800ae0a <USBD_LL_Transmit>

  return USBD_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	2100      	movs	r1, #0
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fc86 	bl	800ae4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2204      	movs	r2, #4
 800a556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a55a:	2300      	movs	r3, #0
 800a55c:	2200      	movs	r2, #0
 800a55e:	2100      	movs	r1, #0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fc52 	bl	800ae0a <USBD_LL_Transmit>

  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2205      	movs	r2, #5
 800a57c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a580:	2300      	movs	r3, #0
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fc60 	bl	800ae4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <LL_APB1_GRP1_EnableClock>:
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a59e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
}
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b098      	sub	sp, #96	@ 0x60
 800a5cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a5ce:	f107 0318 	add.w	r3, r7, #24
 800a5d2:	2248      	movs	r2, #72	@ 0x48
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fcdc 	bl	800af94 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 800a5dc:	463b      	mov	r3, r7
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	605a      	str	r2, [r3, #4]
 800a5e4:	609a      	str	r2, [r3, #8]
 800a5e6:	60da      	str	r2, [r3, #12]
 800a5e8:	611a      	str	r2, [r3, #16]
 800a5ea:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800a5ec:	2340      	movs	r3, #64	@ 0x40
 800a5ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800a5f8:	f107 0318 	add.w	r3, r7, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fa f8b1 	bl	8004764 <HAL_RCC_OscConfig>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800a608:	f7f6 f808 	bl	800061c <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 800a60c:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800a610:	f7ff ffc1 	bl	800a596 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800a614:	2300      	movs	r3, #0
 800a616:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800a618:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a61c:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 800a61e:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800a622:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800a624:	2322      	movs	r3, #34	@ 0x22
 800a626:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800a628:	2320      	movs	r3, #32
 800a62a:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 800a62c:	463b      	mov	r3, r7
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fb f9ce 	bl	80059d0 <HAL_RCCEx_CRSConfig>
}
 800a634:	bf00      	nop
 800a636:	3760      	adds	r7, #96	@ 0x60
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <JoystickControl>:
  *         Handle joystick ADC input to control the mouse through USB Device
  * @param  None
  * @retval None
  */
void JoystickControl(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
	if ((((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup == 1) && (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_SUSPENDED))
 800a642:	4b28      	ldr	r3, [pc, #160]	@ (800a6e4 <JoystickControl+0xa8>)
 800a644:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a648:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d128      	bne.n	800a6a2 <JoystickControl+0x66>
 800a650:	4b24      	ldr	r3, [pc, #144]	@ (800a6e4 <JoystickControl+0xa8>)
 800a652:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	d120      	bne.n	800a6a2 <JoystickControl+0x66>
	{
		if ((&hpcd_USB_FS)->Init.low_power_enable)
 800a660:	4b20      	ldr	r3, [pc, #128]	@ (800a6e4 <JoystickControl+0xa8>)
 800a662:	7a5b      	ldrb	r3, [r3, #9]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <JoystickControl+0x34>
		{
			HAL_ResumeTick();
 800a668:	f7f6 fa34 	bl	8000ad4 <HAL_ResumeTick>
			SystemClockConfig_Resume();
 800a66c:	f000 fc5e 	bl	800af2c <SystemClockConfig_Resume>
		}
		/* Activate Remote wakeup */
		HAL_PCD_ActivateRemoteWakeup((&hpcd_USB_FS));
 800a670:	481c      	ldr	r0, [pc, #112]	@ (800a6e4 <JoystickControl+0xa8>)
 800a672:	f7f8 fba1 	bl	8002db8 <HAL_PCD_ActivateRemoteWakeup>

		/* Remote wakeup delay */
		HAL_Delay(10);
 800a676:	200a      	movs	r0, #10
 800a678:	f7f6 fa08 	bl	8000a8c <HAL_Delay>

		/* Disable Remote wakeup */
		HAL_PCD_DeActivateRemoteWakeup((&hpcd_USB_FS));
 800a67c:	4819      	ldr	r0, [pc, #100]	@ (800a6e4 <JoystickControl+0xa8>)
 800a67e:	f7f8 fba9 	bl	8002dd4 <HAL_PCD_DeActivateRemoteWakeup>

		/* change state to configured */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state = USBD_STATE_CONFIGURED;
 800a682:	4b18      	ldr	r3, [pc, #96]	@ (800a6e4 <JoystickControl+0xa8>)
 800a684:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a688:	2203      	movs	r2, #3
 800a68a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

		/* Change remote_wakeup feature to 0 */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup = 0;
 800a68e:	4b15      	ldr	r3, [pc, #84]	@ (800a6e4 <JoystickControl+0xa8>)
 800a690:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
		remotewakeupon = 1;
 800a69a:	4b13      	ldr	r3, [pc, #76]	@ (800a6e8 <JoystickControl+0xac>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	601a      	str	r2, [r3, #0]
		_buff[2] =  joystick_RX;
		_buff[3] =  joystick_RY;
		_buff[4] =  0;
		USBD_HID_SendReport(&hUsbDeviceFS, _buff, 5);
	}
}
 800a6a0:	e01b      	b.n	800a6da <JoystickControl+0x9e>
	else if (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_CONFIGURED){
 800a6a2:	4b10      	ldr	r3, [pc, #64]	@ (800a6e4 <JoystickControl+0xa8>)
 800a6a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d113      	bne.n	800a6da <JoystickControl+0x9e>
		_buff[0] =  joystick_X;
 800a6b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ec <JoystickControl+0xb0>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	703b      	strb	r3, [r7, #0]
		_buff[1] =  joystick_Y;
 800a6b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f0 <JoystickControl+0xb4>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	707b      	strb	r3, [r7, #1]
		_buff[2] =  joystick_RX;
 800a6be:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <JoystickControl+0xb8>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	70bb      	strb	r3, [r7, #2]
		_buff[3] =  joystick_RY;
 800a6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f8 <JoystickControl+0xbc>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	70fb      	strb	r3, [r7, #3]
		_buff[4] =  0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	713b      	strb	r3, [r7, #4]
		USBD_HID_SendReport(&hUsbDeviceFS, _buff, 5);
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	2205      	movs	r2, #5
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4809      	ldr	r0, [pc, #36]	@ (800a6fc <JoystickControl+0xc0>)
 800a6d6:	f7fe fc49 	bl	8008f6c <USBD_HID_SendReport>
}
 800a6da:	bf00      	nop
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	2000057c 	.word	0x2000057c
 800a6e8:	20000250 	.word	0x20000250
 800a6ec:	20000240 	.word	0x20000240
 800a6f0:	20000241 	.word	0x20000241
 800a6f4:	20000242 	.word	0x20000242
 800a6f8:	20000243 	.word	0x20000243
 800a6fc:	20000254 	.word	0x20000254

0800a700 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
  USBD_Clock_Config();
 800a704:	f7ff ff60 	bl	800a5c8 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800a708:	2200      	movs	r2, #0
 800a70a:	490e      	ldr	r1, [pc, #56]	@ (800a744 <MX_USB_Device_Init+0x44>)
 800a70c:	480e      	ldr	r0, [pc, #56]	@ (800a748 <MX_USB_Device_Init+0x48>)
 800a70e:	f7fe fcd1 	bl	80090b4 <USBD_Init>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <MX_USB_Device_Init+0x1c>
    Error_Handler();
 800a718:	f7f5 ff80 	bl	800061c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800a71c:	490b      	ldr	r1, [pc, #44]	@ (800a74c <MX_USB_Device_Init+0x4c>)
 800a71e:	480a      	ldr	r0, [pc, #40]	@ (800a748 <MX_USB_Device_Init+0x48>)
 800a720:	f7fe fcf8 	bl	8009114 <USBD_RegisterClass>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800a72a:	f7f5 ff77 	bl	800061c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a72e:	4806      	ldr	r0, [pc, #24]	@ (800a748 <MX_USB_Device_Init+0x48>)
 800a730:	f7fe fd26 	bl	8009180 <USBD_Start>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <MX_USB_Device_Init+0x3e>
    Error_Handler();
 800a73a:	f7f5 ff6f 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	200000c0 	.word	0x200000c0
 800a748:	20000254 	.word	0x20000254
 800a74c:	20000014 	.word	0x20000014

0800a750 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2212      	movs	r2, #18
 800a760:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800a762:	4b03      	ldr	r3, [pc, #12]	@ (800a770 <USBD_HID_DeviceDescriptor+0x20>)
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	200000e0 	.word	0x200000e0

0800a774 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	6039      	str	r1, [r7, #0]
 800a77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2204      	movs	r2, #4
 800a784:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a786:	4b03      	ldr	r3, [pc, #12]	@ (800a794 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	200000f4 	.word	0x200000f4

0800a798 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4907      	ldr	r1, [pc, #28]	@ (800a7cc <USBD_HID_ProductStrDescriptor+0x34>)
 800a7ae:	4808      	ldr	r0, [pc, #32]	@ (800a7d0 <USBD_HID_ProductStrDescriptor+0x38>)
 800a7b0:	f7ff fe2e 	bl	800a410 <USBD_GetString>
 800a7b4:	e004      	b.n	800a7c0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4904      	ldr	r1, [pc, #16]	@ (800a7cc <USBD_HID_ProductStrDescriptor+0x34>)
 800a7ba:	4805      	ldr	r0, [pc, #20]	@ (800a7d0 <USBD_HID_ProductStrDescriptor+0x38>)
 800a7bc:	f7ff fe28 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7c0:	4b02      	ldr	r3, [pc, #8]	@ (800a7cc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000530 	.word	0x20000530
 800a7d0:	0800b030 	.word	0x0800b030

0800a7d4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	4904      	ldr	r1, [pc, #16]	@ (800a7f4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800a7e4:	4804      	ldr	r0, [pc, #16]	@ (800a7f8 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800a7e6:	f7ff fe13 	bl	800a410 <USBD_GetString>
  return USBD_StrDesc;
 800a7ea:	4b02      	ldr	r3, [pc, #8]	@ (800a7f4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000530 	.word	0x20000530
 800a7f8:	0800b044 	.word	0x0800b044

0800a7fc <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	221a      	movs	r2, #26
 800a80c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a80e:	f000 f843 	bl	800a898 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a812:	4b02      	ldr	r3, [pc, #8]	@ (800a81c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200000f8 	.word	0x200000f8

0800a820 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	6039      	str	r1, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d105      	bne.n	800a83e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4907      	ldr	r1, [pc, #28]	@ (800a854 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a836:	4808      	ldr	r0, [pc, #32]	@ (800a858 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a838:	f7ff fdea 	bl	800a410 <USBD_GetString>
 800a83c:	e004      	b.n	800a848 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	4904      	ldr	r1, [pc, #16]	@ (800a854 <USBD_HID_ConfigStrDescriptor+0x34>)
 800a842:	4805      	ldr	r0, [pc, #20]	@ (800a858 <USBD_HID_ConfigStrDescriptor+0x38>)
 800a844:	f7ff fde4 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a848:	4b02      	ldr	r3, [pc, #8]	@ (800a854 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20000530 	.word	0x20000530
 800a858:	0800b05c 	.word	0x0800b05c

0800a85c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	6039      	str	r1, [r7, #0]
 800a866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	4907      	ldr	r1, [pc, #28]	@ (800a890 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a872:	4808      	ldr	r0, [pc, #32]	@ (800a894 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a874:	f7ff fdcc 	bl	800a410 <USBD_GetString>
 800a878:	e004      	b.n	800a884 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4904      	ldr	r1, [pc, #16]	@ (800a890 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800a87e:	4805      	ldr	r0, [pc, #20]	@ (800a894 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800a880:	f7ff fdc6 	bl	800a410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a884:	4b02      	ldr	r3, [pc, #8]	@ (800a890 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000530 	.word	0x20000530
 800a894:	0800b068 	.word	0x0800b068

0800a898 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a89e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8dc <Get_SerialNum+0x44>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e0 <Get_SerialNum+0x48>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <Get_SerialNum+0x4c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8be:	2208      	movs	r2, #8
 800a8c0:	4909      	ldr	r1, [pc, #36]	@ (800a8e8 <Get_SerialNum+0x50>)
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f814 	bl	800a8f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	4908      	ldr	r1, [pc, #32]	@ (800a8ec <Get_SerialNum+0x54>)
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f000 f80f 	bl	800a8f0 <IntToUnicode>
  }
}
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	1fff7590 	.word	0x1fff7590
 800a8e0:	1fff7594 	.word	0x1fff7594
 800a8e4:	1fff7598 	.word	0x1fff7598
 800a8e8:	200000fa 	.word	0x200000fa
 800a8ec:	2000010a 	.word	0x2000010a

0800a8f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]
 800a906:	e027      	b.n	800a958 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	0f1b      	lsrs	r3, r3, #28
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d80b      	bhi.n	800a928 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	0f1b      	lsrs	r3, r3, #28
 800a914:	b2da      	uxtb	r2, r3
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	4619      	mov	r1, r3
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	440b      	add	r3, r1
 800a920:	3230      	adds	r2, #48	@ 0x30
 800a922:	b2d2      	uxtb	r2, r2
 800a924:	701a      	strb	r2, [r3, #0]
 800a926:	e00a      	b.n	800a93e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	0f1b      	lsrs	r3, r3, #28
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4619      	mov	r1, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	440b      	add	r3, r1
 800a938:	3237      	adds	r2, #55	@ 0x37
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	3301      	adds	r3, #1
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4413      	add	r3, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	3301      	adds	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
 800a958:	7dfa      	ldrb	r2, [r7, #23]
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3d3      	bcc.n	800a908 <IntToUnicode+0x18>
  }
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <LL_AHB2_GRP1_EnableClock>:
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a97a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a97c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4313      	orrs	r3, r2
 800a984:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a98a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4013      	ands	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	bf00      	nop
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <LL_APB1_GRP1_EnableClock>:
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a9a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a9ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a9b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a13      	ldr	r2, [pc, #76]	@ (800aa40 <HAL_PCD_MspInit+0x6c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d120      	bne.n	800aa38 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	f7ff ffb9 	bl	800a96e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aa00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa02:	2302      	movs	r3, #2
 800aa04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800aa0e:	230a      	movs	r3, #10
 800aa10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa12:	f107 030c 	add.w	r3, r7, #12
 800aa16:	4619      	mov	r1, r3
 800aa18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aa1c:	f7f7 fc6e 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa20:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800aa24:	f7ff ffbc 	bl	800a9a0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	2014      	movs	r0, #20
 800aa2e:	f7f7 f9bc 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800aa32:	2014      	movs	r0, #20
 800aa34:	f7f7 f9d3 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa38:	bf00      	nop
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	40006800 	.word	0x40006800

0800aa44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f7fe fbdd 	bl	800921a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	440b      	add	r3, r1
 800aa88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	4619      	mov	r1, r3
 800aa92:	f7fe fc17 	bl	80092c4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800aab0:	78fa      	ldrb	r2, [r7, #3]
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	440b      	add	r3, r1
 800aabe:	3324      	adds	r3, #36	@ 0x24
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	4619      	mov	r1, r3
 800aac6:	f7fe fcb0 	bl	800942a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fdea 	bl	80096ba <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d001      	beq.n	800ab06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab02:	f7f5 fd8b 	bl	800061c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab0c:	7bfa      	ldrb	r2, [r7, #15]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fd8e 	bl	8009632 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fd36 	bl	800958e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fd89 	bl	8009652 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7a5b      	ldrb	r3, [r3, #9]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab48:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <HAL_PCD_SuspendCallback+0x30>)
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	4a03      	ldr	r2, [pc, #12]	@ (800ab5c <HAL_PCD_SuspendCallback+0x30>)
 800ab4e:	f043 0306 	orr.w	r3, r3, #6
 800ab52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	e000ed00 	.word	0xe000ed00

0800ab60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7a5b      	ldrb	r3, [r3, #9]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d007      	beq.n	800ab80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab70:	4b08      	ldr	r3, [pc, #32]	@ (800ab94 <HAL_PCD_ResumeCallback+0x34>)
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	4a07      	ldr	r2, [pc, #28]	@ (800ab94 <HAL_PCD_ResumeCallback+0x34>)
 800ab76:	f023 0306 	bic.w	r3, r3, #6
 800ab7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ab7c:	f000 f9d6 	bl	800af2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fd7f 	bl	800968a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00

0800ab98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aba0:	4a23      	ldr	r2, [pc, #140]	@ (800ac30 <USBD_LL_Init+0x98>)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a21      	ldr	r2, [pc, #132]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800abb0:	f7f9 fa6a 	bl	8004088 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800abb4:	4b1e      	ldr	r3, [pc, #120]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abb6:	4a1f      	ldr	r2, [pc, #124]	@ (800ac34 <USBD_LL_Init+0x9c>)
 800abb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abba:	4b1d      	ldr	r3, [pc, #116]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abbc:	2208      	movs	r2, #8
 800abbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abc0:	4b1b      	ldr	r3, [pc, #108]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abc2:	2202      	movs	r2, #2
 800abc4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abc8:	2202      	movs	r2, #2
 800abca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800abcc:	4b18      	ldr	r3, [pc, #96]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abce:	2200      	movs	r2, #0
 800abd0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abd2:	4b17      	ldr	r3, [pc, #92]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800abd8:	4b15      	ldr	r3, [pc, #84]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abda:	2200      	movs	r2, #0
 800abdc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800abde:	4b14      	ldr	r3, [pc, #80]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800abe4:	4812      	ldr	r0, [pc, #72]	@ (800ac30 <USBD_LL_Init+0x98>)
 800abe6:	f7f7 fcf9 	bl	80025dc <HAL_PCD_Init>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800abf0:	f7f5 fd14 	bl	800061c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abfa:	2318      	movs	r3, #24
 800abfc:	2200      	movs	r2, #0
 800abfe:	2100      	movs	r1, #0
 800ac00:	f7f9 f9b6 	bl	8003f70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac0a:	2358      	movs	r3, #88	@ 0x58
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2180      	movs	r1, #128	@ 0x80
 800ac10:	f7f9 f9ae 	bl	8003f70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2181      	movs	r1, #129	@ 0x81
 800ac22:	f7f9 f9a5 	bl	8003f70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	2000057c 	.word	0x2000057c
 800ac34:	40006800 	.word	0x40006800

0800ac38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f7 fd92 	bl	8002778 <HAL_PCD_Start>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f96e 	bl	800af3c <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	4608      	mov	r0, r1
 800ac78:	4611      	mov	r1, r2
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	70fb      	strb	r3, [r7, #3]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70bb      	strb	r3, [r7, #2]
 800ac84:	4613      	mov	r3, r2
 800ac86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac96:	78bb      	ldrb	r3, [r7, #2]
 800ac98:	883a      	ldrh	r2, [r7, #0]
 800ac9a:	78f9      	ldrb	r1, [r7, #3]
 800ac9c:	f7f7 fed9 	bl	8002a52 <HAL_PCD_EP_Open>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f948 	bl	800af3c <USBD_Get_USB_Status>
 800acac:	4603      	mov	r3, r0
 800acae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acd4:	78fa      	ldrb	r2, [r7, #3]
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f7 ff17 	bl	8002b0c <HAL_PCD_EP_Close>
 800acde:	4603      	mov	r3, r0
 800ace0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f929 	bl	800af3c <USBD_Get_USB_Status>
 800acea:	4603      	mov	r3, r0
 800acec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acee:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad12:	78fa      	ldrb	r2, [r7, #3]
 800ad14:	4611      	mov	r1, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f7 ffa8 	bl	8002c6c <HAL_PCD_EP_SetStall>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 f90a 	bl	800af3c <USBD_Get_USB_Status>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f7 ffdb 	bl	8002d10 <HAL_PCD_EP_ClrStall>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 f8eb 	bl	800af3c <USBD_Get_USB_Status>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	da0b      	bge.n	800ada8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	440b      	add	r3, r1
 800ada2:	3312      	adds	r3, #18
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	e00b      	b.n	800adc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adae:	68f9      	ldr	r1, [r7, #12]
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	440b      	add	r3, r1
 800adba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800adbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ade6:	78fa      	ldrb	r2, [r7, #3]
 800ade8:	4611      	mov	r1, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f7f7 fe0d 	bl	8002a0a <HAL_PCD_SetAddress>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f8a0 	bl	800af3c <USBD_Get_USB_Status>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b086      	sub	sp, #24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	460b      	mov	r3, r1
 800ae18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae28:	7af9      	ldrb	r1, [r7, #11]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	f7f7 fee6 	bl	8002bfe <HAL_PCD_EP_Transmit>
 800ae32:	4603      	mov	r3, r0
 800ae34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f87f 	bl	800af3c <USBD_Get_USB_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae42:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae6a:	7af9      	ldrb	r1, [r7, #11]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	f7f7 fe94 	bl	8002b9c <HAL_PCD_EP_Receive>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 f85e 	bl	800af3c <USBD_Get_USB_Status>
 800ae80:	4603      	mov	r3, r0
 800ae82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae84:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <HAL_PCDEx_LPM_Callback+0x18>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d013      	beq.n	800aece <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aea6:	e023      	b.n	800aef0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7a5b      	ldrb	r3, [r3, #9]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d007      	beq.n	800aec0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aeb0:	f000 f83c 	bl	800af2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aeb4:	4b10      	ldr	r3, [pc, #64]	@ (800aef8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	4a0f      	ldr	r2, [pc, #60]	@ (800aef8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aeba:	f023 0306 	bic.w	r3, r3, #6
 800aebe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fbdf 	bl	800968a <USBD_LL_Resume>
    break;
 800aecc:	e010      	b.n	800aef0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe fbbc 	bl	8009652 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7a5b      	ldrb	r3, [r3, #9]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d005      	beq.n	800aeee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	4a04      	ldr	r2, [pc, #16]	@ (800aef8 <HAL_PCDEx_LPM_Callback+0x68>)
 800aee8:	f043 0306 	orr.w	r3, r3, #6
 800aeec:	6113      	str	r3, [r2, #16]
    break;
 800aeee:	bf00      	nop
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	e000ed00 	.word	0xe000ed00

0800aefc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af04:	4b03      	ldr	r3, [pc, #12]	@ (800af14 <USBD_static_malloc+0x18>)
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20000858 	.word	0x20000858

0800af18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
void SystemClockConfig_Resume(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800af30:	f7f5 f9aa 	bl	8000288 <SystemClock_Config>
  USBD_Clock_Config();
 800af34:	f7ff fb48 	bl	800a5c8 <USBD_Clock_Config>
}
 800af38:	bf00      	nop
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d817      	bhi.n	800af80 <USBD_Get_USB_Status+0x44>
 800af50:	a201      	add	r2, pc, #4	@ (adr r2, 800af58 <USBD_Get_USB_Status+0x1c>)
 800af52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af56:	bf00      	nop
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af6f 	.word	0x0800af6f
 800af60:	0800af75 	.word	0x0800af75
 800af64:	0800af7b 	.word	0x0800af7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af68:	2300      	movs	r3, #0
 800af6a:	73fb      	strb	r3, [r7, #15]
    break;
 800af6c:	e00b      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	73fb      	strb	r3, [r7, #15]
    break;
 800af72:	e008      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af74:	2301      	movs	r3, #1
 800af76:	73fb      	strb	r3, [r7, #15]
    break;
 800af78:	e005      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af7a:	2303      	movs	r3, #3
 800af7c:	73fb      	strb	r3, [r7, #15]
    break;
 800af7e:	e002      	b.n	800af86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	73fb      	strb	r3, [r7, #15]
    break;
 800af84:	bf00      	nop
  }
  return usb_status;
 800af86:	7bfb      	ldrb	r3, [r7, #15]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <memset>:
 800af94:	4402      	add	r2, r0
 800af96:	4603      	mov	r3, r0
 800af98:	4293      	cmp	r3, r2
 800af9a:	d100      	bne.n	800af9e <memset+0xa>
 800af9c:	4770      	bx	lr
 800af9e:	f803 1b01 	strb.w	r1, [r3], #1
 800afa2:	e7f9      	b.n	800af98 <memset+0x4>

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	4d0d      	ldr	r5, [pc, #52]	@ (800afdc <__libc_init_array+0x38>)
 800afa8:	4c0d      	ldr	r4, [pc, #52]	@ (800afe0 <__libc_init_array+0x3c>)
 800afaa:	1b64      	subs	r4, r4, r5
 800afac:	10a4      	asrs	r4, r4, #2
 800afae:	2600      	movs	r6, #0
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	4d0b      	ldr	r5, [pc, #44]	@ (800afe4 <__libc_init_array+0x40>)
 800afb6:	4c0c      	ldr	r4, [pc, #48]	@ (800afe8 <__libc_init_array+0x44>)
 800afb8:	f000 f818 	bl	800afec <_init>
 800afbc:	1b64      	subs	r4, r4, r5
 800afbe:	10a4      	asrs	r4, r4, #2
 800afc0:	2600      	movs	r6, #0
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	0800b0f8 	.word	0x0800b0f8
 800afe0:	0800b0f8 	.word	0x0800b0f8
 800afe4:	0800b0f8 	.word	0x0800b0f8
 800afe8:	0800b0fc 	.word	0x0800b0fc

0800afec <_init>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr

0800aff8 <_fini>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr
