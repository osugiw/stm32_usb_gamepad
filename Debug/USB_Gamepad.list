
USB_Gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a54c  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800a688  0800a688  0000b688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a77c  0800a77c  0000b77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a780  0800a780  0000b780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000010c  20000008  0800a784  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000071c  20000114  0800a890  0000c114  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000830  0800a890  0000c830  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000c114  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016181  00000000  00000000  0000c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000039a8  00000000  00000000  000222c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000017b0  00000000  00000000  00025c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000011af  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024bba  00000000  00000000  000285cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001648c  00000000  00000000  0004d189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e3024  00000000  00000000  00063615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00146639  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000061c4  00000000  00000000  0014667c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  0014c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000114 	.word	0x20000114
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a670 	.word	0x0800a670

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000118 	.word	0x20000118
 8000178:	0800a670 	.word	0x0800a670

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	joystick_X = (int8_t)rawADC[0] - 128;
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	3b80      	subs	r3, #128	@ 0x80
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <HAL_ADC_ConvCpltCallback+0x50>)
 80001f4:	701a      	strb	r2, [r3, #0]
	joystick_Y = (int8_t)rawADC[1] - 128;
 80001f6:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	3b80      	subs	r3, #128	@ 0x80
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <HAL_ADC_ConvCpltCallback+0x54>)
 8000202:	701a      	strb	r2, [r3, #0]
	joystick_RX = (int8_t)rawADC[2] - 128;
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	3b80      	subs	r3, #128	@ 0x80
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <HAL_ADC_ConvCpltCallback+0x58>)
 8000210:	701a      	strb	r2, [r3, #0]
	joystick_RY = (int8_t)rawADC[3] - 128;
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	b2db      	uxtb	r3, r3
 8000218:	3b80      	subs	r3, #128	@ 0x80
 800021a:	b2da      	uxtb	r2, r3
 800021c:	4b07      	ldr	r3, [pc, #28]	@ (800023c <HAL_ADC_ConvCpltCallback+0x5c>)
 800021e:	701a      	strb	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	200001f8 	.word	0x200001f8
 8000230:	200001f4 	.word	0x200001f4
 8000234:	200001f5 	.word	0x200001f5
 8000238:	200001f6 	.word	0x200001f6
 800023c:	200001f7 	.word	0x200001f7

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fb06 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f82e 	bl	80002a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800024c:	f000 f898 	bl	8000380 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f96e 	bl	8000530 <MX_GPIO_Init>
  MX_DMA_Init();
 8000254:	f000 f95a 	bl	800050c <MX_DMA_Init>
  MX_ADC1_Init();
 8000258:	f000 f8c4 	bl	80003e4 <MX_ADC1_Init>
  MX_USB_Device_Init();
 800025c:	f009 fd92 	bl	8009d84 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, rawADC, 4);
 8000260:	2204      	movs	r2, #4
 8000262:	490e      	ldr	r1, [pc, #56]	@ (800029c <main+0x5c>)
 8000264:	480e      	ldr	r0, [pc, #56]	@ (80002a0 <main+0x60>)
 8000266:	f000 fec3 	bl	8000ff0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - adc_lastTime > ADC_SCAN_RATE){
 800026a:	f000 fb61 	bl	8000930 <HAL_GetTick>
 800026e:	4602      	mov	r2, r0
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <main+0x64>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	2b64      	cmp	r3, #100	@ 0x64
 8000278:	d909      	bls.n	800028e <main+0x4e>
		  adc_lastTime = HAL_GetTick();
 800027a:	f000 fb59 	bl	8000930 <HAL_GetTick>
 800027e:	4603      	mov	r3, r0
 8000280:	4a08      	ldr	r2, [pc, #32]	@ (80002a4 <main+0x64>)
 8000282:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Start_DMA(&hadc1, rawADC, 4);
 8000284:	2204      	movs	r2, #4
 8000286:	4905      	ldr	r1, [pc, #20]	@ (800029c <main+0x5c>)
 8000288:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <main+0x60>)
 800028a:	f000 feb1 	bl	8000ff0 <HAL_ADC_Start_DMA>
	  }

	  // Detect user input and control the mouse
	  JoystickControl();
 800028e:	f009 fd17 	bl	8009cc0 <JoystickControl>
	  HAL_Delay(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f000 fb64 	bl	8000960 <HAL_Delay>
	  if(HAL_GetTick() - adc_lastTime > ADC_SCAN_RATE){
 8000298:	e7e7      	b.n	800026a <main+0x2a>
 800029a:	bf00      	nop
 800029c:	200001f8 	.word	0x200001f8
 80002a0:	20000130 	.word	0x20000130
 80002a4:	20000208 	.word	0x20000208

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b09a      	sub	sp, #104	@ 0x68
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0320 	add.w	r3, r7, #32
 80002b2:	2248      	movs	r2, #72	@ 0x48
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f00a f9ae 	bl	800a618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ce:	4b2b      	ldr	r3, [pc, #172]	@ (800037c <SystemClock_Config+0xd4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80002d6:	4a29      	ldr	r2, [pc, #164]	@ (800037c <SystemClock_Config+0xd4>)
 80002d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002dc:	6013      	str	r3, [r2, #0]
 80002de:	4b27      	ldr	r3, [pc, #156]	@ (800037c <SystemClock_Config+0xd4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80002ea:	2326      	movs	r3, #38	@ 0x26
 80002ec:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80002ee:	2300      	movs	r3, #0
 80002f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000300:	2300      	movs	r3, #0
 8000302:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000304:	2360      	movs	r3, #96	@ 0x60
 8000306:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800030c:	2301      	movs	r3, #1
 800030e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000314:	2320      	movs	r3, #32
 8000316:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800031c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000322:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000328:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0320 	add.w	r3, r7, #32
 800032e:	4618      	mov	r0, r3
 8000330:	f004 f982 	bl	8004638 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800033a:	f000 f929 	bl	8000590 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800033e:	236f      	movs	r3, #111	@ 0x6f
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2303      	movs	r3, #3
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000352:	2380      	movs	r3, #128	@ 0x80
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2103      	movs	r1, #3
 800035e:	4618      	mov	r0, r3
 8000360:	f004 fcde 	bl	8004d20 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800036a:	f000 f911 	bl	8000590 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800036e:	f005 fa92 	bl	8005896 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000372:	bf00      	nop
 8000374:	3768      	adds	r7, #104	@ 0x68
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	58000400 	.word	0x58000400

08000380 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b094      	sub	sp, #80	@ 0x50
 8000384:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2250      	movs	r2, #80	@ 0x50
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f00a f943 	bl	800a618 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000392:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8000396:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000398:	2318      	movs	r3, #24
 800039a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800039c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80003a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80003a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80003a8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80003ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80003ae:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80003b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80003b8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80003be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003c0:	2300      	movs	r3, #0
 80003c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003c8:	463b      	mov	r3, r7
 80003ca:	4618      	mov	r0, r3
 80003cc:	f005 f8ed 	bl	80055aa <HAL_RCCEx_PeriphCLKConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80003d6:	f000 f8db 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003da:	bf00      	nop
 80003dc:	3750      	adds	r7, #80	@ 0x50
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	463b      	mov	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b3e      	ldr	r3, [pc, #248]	@ (80004f4 <MX_ADC1_Init+0x110>)
 80003fc:	4a3e      	ldr	r2, [pc, #248]	@ (80004f8 <MX_ADC1_Init+0x114>)
 80003fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000400:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000402:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000408:	4b3a      	ldr	r3, [pc, #232]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800040a:	2210      	movs	r2, #16
 800040c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040e:	4b39      	ldr	r3, [pc, #228]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000414:	4b37      	ldr	r3, [pc, #220]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000416:	2201      	movs	r2, #1
 8000418:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041a:	4b36      	ldr	r3, [pc, #216]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800041c:	2204      	movs	r2, #4
 800041e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000420:	4b34      	ldr	r3, [pc, #208]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000422:	2200      	movs	r2, #0
 8000424:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000426:	4b33      	ldr	r3, [pc, #204]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000428:	2201      	movs	r2, #1
 800042a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800042c:	4b31      	ldr	r3, [pc, #196]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800042e:	2204      	movs	r2, #4
 8000430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b30      	ldr	r3, [pc, #192]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043a:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800043c:	2200      	movs	r2, #0
 800043e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000440:	4b2c      	ldr	r3, [pc, #176]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000442:	2200      	movs	r2, #0
 8000444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000446:	4b2b      	ldr	r3, [pc, #172]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800044e:	4b29      	ldr	r3, [pc, #164]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000450:	2200      	movs	r2, #0
 8000452:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000454:	4b27      	ldr	r3, [pc, #156]	@ (80004f4 <MX_ADC1_Init+0x110>)
 8000456:	2200      	movs	r2, #0
 8000458:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045c:	4825      	ldr	r0, [pc, #148]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800045e:	f000 fc7b 	bl	8000d58 <HAL_ADC_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000468:	f000 f892 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046c:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <MX_ADC1_Init+0x118>)
 800046e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000470:	2306      	movs	r3, #6
 8000472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000474:	2302      	movs	r3, #2
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000478:	237f      	movs	r3, #127	@ 0x7f
 800047a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047c:	2304      	movs	r3, #4
 800047e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	481a      	ldr	r0, [pc, #104]	@ (80004f4 <MX_ADC1_Init+0x110>)
 800048a:	f000 fe49 	bl	8001120 <HAL_ADC_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000494:	f000 f87c 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <MX_ADC1_Init+0x11c>)
 800049a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800049c:	230c      	movs	r3, #12
 800049e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	4619      	mov	r1, r3
 80004a4:	4813      	ldr	r0, [pc, #76]	@ (80004f4 <MX_ADC1_Init+0x110>)
 80004a6:	f000 fe3b 	bl	8001120 <HAL_ADC_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80004b0:	f000 f86e 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_ADC1_Init+0x120>)
 80004b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004b8:	2312      	movs	r3, #18
 80004ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <MX_ADC1_Init+0x110>)
 80004c2:	f000 fe2d 	bl	8001120 <HAL_ADC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80004cc:	f000 f860 	bl	8000590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <MX_ADC1_Init+0x124>)
 80004d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004d4:	2318      	movs	r3, #24
 80004d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d8:	463b      	mov	r3, r7
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <MX_ADC1_Init+0x110>)
 80004de:	f000 fe1f 	bl	8001120 <HAL_ADC_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80004e8:	f000 f852 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000130 	.word	0x20000130
 80004f8:	50040000 	.word	0x50040000
 80004fc:	04300002 	.word	0x04300002
 8000500:	08600004 	.word	0x08600004
 8000504:	19200040 	.word	0x19200040
 8000508:	14f00020 	.word	0x14f00020

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000510:	2004      	movs	r0, #4
 8000512:	f7ff fe33 	bl	800017c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000516:	2001      	movs	r0, #1
 8000518:	f7ff fe30 	bl	800017c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	200b      	movs	r0, #11
 8000522:	f001 fbac 	bl	8001c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fbc3 	bl	8001cb2 <HAL_NVIC_EnableIRQ>

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000544:	2004      	movs	r0, #4
 8000546:	f7ff fe32 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff fe2f 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : joystick_sw_Pin */
  GPIO_InitStruct.Pin = joystick_sw_Pin;
 8000550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800055a:	2302      	movs	r3, #2
 800055c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_sw_GPIO_Port, &GPIO_InitStruct);
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	480a      	ldr	r0, [pc, #40]	@ (800058c <MX_GPIO_Init+0x5c>)
 8000564:	f001 fe34 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : joystick_rsw_Pin */
  GPIO_InitStruct.Pin = joystick_rsw_Pin;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000572:	2302      	movs	r3, #2
 8000574:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(joystick_rsw_GPIO_Port, &GPIO_InitStruct);
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4619      	mov	r1, r3
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f001 fe27 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000582:	bf00      	nop
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	48000800 	.word	0x48000800

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <Error_Handler+0x8>

0800059c <LL_AHB2_GRP1_EnableClock>:
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c0:	68fb      	ldr	r3, [r7, #12]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <HAL_ADC_MspInit+0xc8>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d14d      	bne.n	800069a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005fe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000602:	f7ff ffcb 	bl	800059c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2004      	movs	r0, #4
 8000608:	f7ff ffc8 	bl	800059c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ffc5 	bl	800059c <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = joystick_x_Pin|joystick_y_Pin;
 8000612:	2303      	movs	r3, #3
 8000614:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000616:	2303      	movs	r3, #3
 8000618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	4820      	ldr	r0, [pc, #128]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 8000626:	f001 fdd3 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joystick_ry_Pin|joystick_rx_Pin;
 800062a:	2303      	movs	r3, #3
 800062c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062e:	2303      	movs	r3, #3
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f001 fdc6 	bl	80021d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000646:	4a1a      	ldr	r2, [pc, #104]	@ (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000648:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800064c:	2205      	movs	r2, #5
 800064e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000668:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800066c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000670:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000680:	f001 fb32 	bl	8001ce8 <HAL_DMA_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800068a:	f7ff ff81 	bl	8000590 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000692:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000694:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	50040000 	.word	0x50040000
 80006a8:	48000800 	.word	0x48000800
 80006ac:	20000194 	.word	0x20000194
 80006b0:	40020008 	.word	0x40020008

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <NMI_Handler+0x4>

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070a:	f000 f8fd 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000718:	4802      	ldr	r0, [pc, #8]	@ (8000724 <DMA1_Channel1_IRQHandler+0x10>)
 800071a:	f001 fc08 	bl	8001f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000194 	.word	0x20000194

08000728 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800072c:	4802      	ldr	r0, [pc, #8]	@ (8000738 <USB_LP_IRQHandler+0x10>)
 800072e:	f001 ffaf 	bl	8002690 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000540 	.word	0x20000540

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <SystemInit+0x98>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000746:	4a23      	ldr	r2, [pc, #140]	@ (80007d4 <SystemInit+0x98>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000764:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000768:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800076a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <SystemInit+0x9c>)
 8000776:	4013      	ands	r3, r2
 8000778:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800077a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800077e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000786:	f023 0305 	bic.w	r3, r3, #5
 800078a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80007a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a6:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <SystemInit+0xa0>)
 80007a8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80007aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <SystemInit+0xa0>)
 80007b0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	faf6fefb 	.word	0xfaf6fefb
 80007dc:	22041000 	.word	0x22041000

080007e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e4:	3304      	adds	r3, #4

080007e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80007ea:	d3f9      	bcc.n	80007e0 <CopyDataInit>
  bx lr
 80007ec:	4770      	bx	lr

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80007ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80007f0:	3004      	adds	r0, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80007f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>
  bx lr
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fc:	f7ff ff9e 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <LoopForever+0x6>)
 8000802:	490c      	ldr	r1, [pc, #48]	@ (8000834 <LoopForever+0xa>)
 8000804:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <LoopForever+0xe>)
 8000806:	2300      	movs	r3, #0
 8000808:	f7ff ffed 	bl	80007e6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <LoopForever+0x12>)
 800080e:	490c      	ldr	r1, [pc, #48]	@ (8000840 <LoopForever+0x16>)
 8000810:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <LoopForever+0x1a>)
 8000812:	2300      	movs	r3, #0
 8000814:	f7ff ffe7 	bl	80007e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <LoopForever+0x1e>)
 800081a:	490c      	ldr	r1, [pc, #48]	@ (800084c <LoopForever+0x22>)
 800081c:	2300      	movs	r3, #0
 800081e:	f7ff ffe8 	bl	80007f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f009 ff01 	bl	800a628 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000826:	f7ff fd0b 	bl	8000240 <main>

0800082a <LoopForever>:

LoopForever:
  b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000830:	20000008 	.word	0x20000008
 8000834:	20000114 	.word	0x20000114
 8000838:	0800a784 	.word	0x0800a784
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800083c:	20030000 	.word	0x20030000
 8000840:	20030000 	.word	0x20030000
 8000844:	0800a890 	.word	0x0800a890
  INIT_BSS _sbss, _ebss
 8000848:	20000114 	.word	0x20000114
 800084c:	20000830 	.word	0x20000830

08000850 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <HAL_Init+0x3c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <HAL_Init+0x3c>)
 8000864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000868:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086a:	2003      	movs	r0, #3
 800086c:	f001 f9fc 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f80f 	bl	8000894 <HAL_InitTick>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d002      	beq.n	8000882 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	e001      	b.n	8000886 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000882:	f7ff fea4 	bl	80005ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000886:	79fb      	ldrb	r3, [r7, #7]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58004000 	.word	0x58004000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d024      	beq.n	80008f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a8:	f004 fbe6 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_InitTick+0x6c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80008bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fa04 	bl	8001cce <HAL_SYSTICK_Config>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10f      	bne.n	80008ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d809      	bhi.n	80008e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	2200      	movs	r2, #0
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295
 80008da:	f001 f9d0 	bl	8001c7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008de:	4a09      	ldr	r2, [pc, #36]	@ (8000904 <HAL_InitTick+0x70>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	e007      	b.n	80008f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e004      	b.n	80008f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e001      	b.n	80008f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000010 	.word	0x20000010
 8000904:	2000000c 	.word	0x2000000c

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000010 	.word	0x20000010
 800092c:	2000020c 	.word	0x2000020c

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000020c 	.word	0x2000020c

08000948 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <HAL_GetTickPrio+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000000c 	.word	0x2000000c

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffe2 	bl	8000930 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffd2 	bl	8000930 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000010 	.word	0x20000010

080009a8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_ResumeTick+0x1c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_ResumeTick+0x1c>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3360      	adds	r3, #96	@ 0x60
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <LL_ADC_SetOffset+0x44>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	03fff000 	.word	0x03fff000

08000a78 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3360      	adds	r3, #96	@ 0x60
 8000a86:	461a      	mov	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3360      	adds	r3, #96	@ 0x60
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ace:	bf00      	nop
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000af2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3330      	adds	r3, #48	@ 0x30
 8000b10:	461a      	mov	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	4413      	add	r3, r2
 8000b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	211f      	movs	r1, #31
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	0e9b      	lsrs	r3, r3, #26
 8000b38:	f003 011f 	and.w	r1, r3, #31
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	431a      	orrs	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3314      	adds	r3, #20
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	0e5b      	lsrs	r3, r3, #25
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	0d1b      	lsrs	r3, r3, #20
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	2107      	movs	r1, #7
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	0d1b      	lsrs	r3, r3, #20
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000ba2:	bf00      	nop
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0318 	and.w	r3, r3, #24
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000bd4:	40d9      	lsrs	r1, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	400b      	ands	r3, r1
 8000bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bde:	431a      	orrs	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	0007ffff 	.word	0x0007ffff

08000bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	6093      	str	r3, [r2, #8]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c30:	d101      	bne.n	8000c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000c54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c80:	d101      	bne.n	8000c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ca4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <LL_ADC_IsEnabled+0x18>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <LL_ADC_IsEnabled+0x1a>
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000cf2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cf6:	f043 0204 	orr.w	r2, r3, #4
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d101      	bne.n	8000d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d101      	bne.n	8000d48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e12e      	b.n	8000fd4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d109      	bne.n	8000d98 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fc29 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff3d 	bl	8000c1c <LL_ADC_IsDeepPowerDownEnabled>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff23 	bl	8000bf8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff58 	bl	8000c6c <LL_ADC_IsInternalRegulatorEnabled>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d115      	bne.n	8000dee <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff3c 	bl	8000c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dcc:	4b83      	ldr	r3, [pc, #524]	@ (8000fdc <HAL_ADC_Init+0x284>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	099b      	lsrs	r3, r3, #6
 8000dd2:	4a83      	ldr	r2, [pc, #524]	@ (8000fe0 <HAL_ADC_Init+0x288>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	099b      	lsrs	r3, r3, #6
 8000dda:	3301      	adds	r3, #1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000de0:	e002      	b.n	8000de8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f9      	bne.n	8000de2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff3a 	bl	8000c6c <LL_ADC_IsInternalRegulatorEnabled>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff73 	bl	8000d0a <LL_ADC_REG_IsConversionOngoing>
 8000e24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 80c7 	bne.w	8000fc2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 80c3 	bne.w	8000fc2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e44:	f043 0202 	orr.w	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff33 	bl	8000cbc <LL_ADC_IsEnabled>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e5c:	4861      	ldr	r0, [pc, #388]	@ (8000fe4 <HAL_ADC_Init+0x28c>)
 8000e5e:	f7ff ff2d 	bl	8000cbc <LL_ADC_IsEnabled>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	485e      	ldr	r0, [pc, #376]	@ (8000fe8 <HAL_ADC_Init+0x290>)
 8000e70:	f7ff fdaa 	bl	80009c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7e5b      	ldrb	r3, [r3, #25]
 8000e78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e92:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8000e94:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d106      	bne.n	8000eb4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	045b      	lsls	r3, r3, #17
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d009      	beq.n	8000ed0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	4b45      	ldr	r3, [pc, #276]	@ (8000fec <HAL_ADC_Init+0x294>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff0e 	bl	8000d0a <LL_ADC_REG_IsConversionOngoing>
 8000eee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff1b 	bl	8000d30 <LL_ADC_INJ_IsConversionOngoing>
 8000efa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d13d      	bne.n	8000f7e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d13a      	bne.n	8000f7e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f0c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f14:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f24:	f023 0302 	bic.w	r3, r3, #2
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	69b9      	ldr	r1, [r7, #24]
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d118      	bne.n	8000f6e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f46:	f023 0304 	bic.w	r3, r3, #4
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000f52:	4311      	orrs	r1, r2
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f58:	4311      	orrs	r1, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	e007      	b.n	8000f7e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d10c      	bne.n	8000fa0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f023 010f 	bic.w	r1, r3, #15
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f9e:	e007      	b.n	8000fb0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 020f 	bic.w	r2, r2, #15
 8000fae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb4:	f023 0303 	bic.w	r3, r3, #3
 8000fb8:	f043 0201 	orr.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fc0:	e007      	b.n	8000fd2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc6:	f043 0210 	orr.w	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	053e2d63 	.word	0x053e2d63
 8000fe4:	50040000 	.word	0x50040000
 8000fe8:	50040300 	.word	0x50040300
 8000fec:	fff0c007 	.word	0xfff0c007

08000ff0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe82 	bl	8000d0a <LL_ADC_REG_IsConversionOngoing>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d167      	bne.n	80010dc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_ADC_Start_DMA+0x2a>
 8001016:	2302      	movs	r3, #2
 8001018:	e063      	b.n	80010e2 <HAL_ADC_Start_DMA+0xf2>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fc42 	bl	80018ac <ADC_Enable>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d14f      	bne.n	80010d2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001036:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001056:	f023 0206 	bic.w	r2, r3, #6
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	659a      	str	r2, [r3, #88]	@ 0x58
 800105e:	e002      	b.n	8001066 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a20      	ldr	r2, [pc, #128]	@ (80010ec <HAL_ADC_Start_DMA+0xfc>)
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a1f      	ldr	r2, [pc, #124]	@ (80010f0 <HAL_ADC_Start_DMA+0x100>)
 8001074:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <HAL_ADC_Start_DMA+0x104>)
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	221c      	movs	r2, #28
 8001084:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0210 	orr.w	r2, r2, #16
 800109c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3340      	adds	r3, #64	@ 0x40
 80010b8:	4619      	mov	r1, r3
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f000 febb 	bl	8001e38 <HAL_DMA_Start_IT>
 80010c2:	4603      	mov	r3, r0
 80010c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe09 	bl	8000ce2 <LL_ADC_REG_StartConversion>
 80010d0:	e006      	b.n	80010e0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80010da:	e001      	b.n	80010e0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010dc:	2302      	movs	r3, #2
 80010de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080019a1 	.word	0x080019a1
 80010f0:	08001a79 	.word	0x08001a79
 80010f4:	08001a95 	.word	0x08001a95

080010f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0b6      	sub	sp, #216	@ 0xd8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x22>
 800113e:	2302      	movs	r3, #2
 8001140:	e39f      	b.n	8001882 <HAL_ADC_ConfigChannel+0x762>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fddb 	bl	8000d0a <LL_ADC_REG_IsConversionOngoing>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	f040 8384 	bne.w	8001864 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6859      	ldr	r1, [r3, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	f7ff fcc9 	bl	8000b00 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fdc9 	bl	8000d0a <LL_ADC_REG_IsConversionOngoing>
 8001178:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdd5 	bl	8000d30 <LL_ADC_INJ_IsConversionOngoing>
 8001186:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800118a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 81a6 	bne.w	80014e0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001198:	2b00      	cmp	r3, #0
 800119a:	f040 81a1 	bne.w	80014e0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f7ff fcd4 	bl	8000b58 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d00a      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6919      	ldr	r1, [r3, #16]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80011e2:	f7ff fc25 	bl	8000a30 <LL_ADC_SetOffset>
 80011e6:	e17b      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fc42 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0xf4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc37 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	0e9b      	lsrs	r3, r3, #26
 800120e:	f003 021f 	and.w	r2, r3, #31
 8001212:	e01e      	b.n	8001252 <HAL_ADC_ConfigChannel+0x132>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fc2c 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800123a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001242:	2320      	movs	r3, #32
 8001244:	e004      	b.n	8001250 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <HAL_ADC_ConfigChannel+0x14a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0e9b      	lsrs	r3, r3, #26
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	e018      	b.n	800129c <HAL_ADC_ConfigChannel+0x17c>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800127e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001286:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800128e:	2320      	movs	r3, #32
 8001290:	e004      	b.n	800129c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fbfb 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fbdf 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_ADC_ConfigChannel+0x1ba>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fbd4 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	0e9b      	lsrs	r3, r3, #26
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	e01e      	b.n	8001318 <HAL_ADC_ConfigChannel+0x1f8>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fbc9 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80012f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e004      	b.n	8001316 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800130c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x210>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0e9b      	lsrs	r3, r3, #26
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	e018      	b.n	8001362 <HAL_ADC_ConfigChannel+0x242>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001344:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800134c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001354:	2320      	movs	r3, #32
 8001356:	e004      	b.n	8001362 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	429a      	cmp	r2, r3
 8001364:	d106      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb98 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb7c 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x280>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2102      	movs	r1, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fb71 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	0e9b      	lsrs	r3, r3, #26
 800139a:	f003 021f 	and.w	r2, r3, #31
 800139e:	e01e      	b.n	80013de <HAL_ADC_ConfigChannel+0x2be>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb66 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80013be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80013c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80013ce:	2320      	movs	r3, #32
 80013d0:	e004      	b.n	80013dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80013d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x2d6>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0e9b      	lsrs	r3, r3, #26
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	e016      	b.n	8001424 <HAL_ADC_ConfigChannel+0x304>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001408:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800140a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800140e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001416:	2320      	movs	r3, #32
 8001418:	e004      	b.n	8001424 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800141a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	429a      	cmp	r2, r3
 8001426:	d106      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb37 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2103      	movs	r1, #3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fb1b 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10a      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x342>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2103      	movs	r1, #3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb10 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	0e9b      	lsrs	r3, r3, #26
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	e017      	b.n	8001492 <HAL_ADC_ConfigChannel+0x372>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb05 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800147a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800147c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800147e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001484:	2320      	movs	r3, #32
 8001486:	e003      	b.n	8001490 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x38a>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0e9b      	lsrs	r3, r3, #26
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	e011      	b.n	80014ce <HAL_ADC_ConfigChannel+0x3ae>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80014b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80014bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80014c2:	2320      	movs	r3, #32
 80014c4:	e003      	b.n	80014ce <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80014c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d106      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	2103      	movs	r1, #3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fae2 	bl	8000aa4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fbe9 	bl	8000cbc <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 81c2 	bne.w	8001876 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	461a      	mov	r2, r3
 8001500:	f7ff fb56 	bl	8000bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a8e      	ldr	r2, [pc, #568]	@ (8001744 <HAL_ADC_ConfigChannel+0x624>)
 800150a:	4293      	cmp	r3, r2
 800150c:	f040 8130 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x418>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	0e9b      	lsrs	r3, r3, #26
 8001526:	3301      	adds	r3, #1
 8001528:	f003 031f 	and.w	r3, r3, #31
 800152c:	2b09      	cmp	r3, #9
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e019      	b.n	800156c <HAL_ADC_ConfigChannel+0x44c>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001548:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800154a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001550:	2320      	movs	r3, #32
 8001552:	e003      	b.n	800155c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3301      	adds	r3, #1
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2b09      	cmp	r3, #9
 8001564:	bf94      	ite	ls
 8001566:	2301      	movls	r3, #1
 8001568:	2300      	movhi	r3, #0
 800156a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800156c:	2b00      	cmp	r3, #0
 800156e:	d079      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <HAL_ADC_ConfigChannel+0x46c>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	3301      	adds	r3, #1
 8001584:	069b      	lsls	r3, r3, #26
 8001586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800158a:	e015      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x498>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800159a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800159c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800159e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80015a4:	2320      	movs	r3, #32
 80015a6:	e003      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80015a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	069b      	lsls	r3, r3, #26
 80015b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x4b8>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	3301      	adds	r3, #1
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	e017      	b.n	8001608 <HAL_ADC_ConfigChannel+0x4e8>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80015e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80015ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80015f0:	2320      	movs	r3, #32
 80015f2:	e003      	b.n	80015fc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80015f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	ea42 0103 	orr.w	r1, r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_ADC_ConfigChannel+0x50e>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0e9b      	lsrs	r3, r3, #26
 800161e:	3301      	adds	r3, #1
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	051b      	lsls	r3, r3, #20
 800162c:	e018      	b.n	8001660 <HAL_ADC_ConfigChannel+0x540>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001646:	2320      	movs	r3, #32
 8001648:	e003      	b.n	8001652 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800164a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001660:	430b      	orrs	r3, r1
 8001662:	e080      	b.n	8001766 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166c:	2b00      	cmp	r3, #0
 800166e:	d107      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x560>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0e9b      	lsrs	r3, r3, #26
 8001676:	3301      	adds	r3, #1
 8001678:	069b      	lsls	r3, r3, #26
 800167a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800167e:	e015      	b.n	80016ac <HAL_ADC_ConfigChannel+0x58c>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800168e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001690:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e003      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	069b      	lsls	r3, r3, #26
 80016a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x5ac>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0e9b      	lsrs	r3, r3, #26
 80016be:	3301      	adds	r3, #1
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	e017      	b.n	80016fc <HAL_ADC_ConfigChannel+0x5dc>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	61fb      	str	r3, [r7, #28]
  return result;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80016e4:	2320      	movs	r3, #32
 80016e6:	e003      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	ea42 0103 	orr.w	r1, r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x608>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0e9b      	lsrs	r3, r3, #26
 8001712:	3301      	adds	r3, #1
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b1e      	subs	r3, #30
 8001720:	051b      	lsls	r3, r3, #20
 8001722:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001726:	e01d      	b.n	8001764 <HAL_ADC_ConfigChannel+0x644>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	613b      	str	r3, [r7, #16]
  return result;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d103      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e005      	b.n	8001750 <HAL_ADC_ConfigChannel+0x630>
 8001744:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f003 021f 	and.w	r2, r3, #31
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	3b1e      	subs	r3, #30
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001764:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f9f4 	bl	8000b58 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <HAL_ADC_ConfigChannel+0x76c>)
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d07c      	beq.n	8001876 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177c:	4844      	ldr	r0, [pc, #272]	@ (8001890 <HAL_ADC_ConfigChannel+0x770>)
 800177e:	f7ff f949 	bl	8000a14 <LL_ADC_GetCommonPathInternalCh>
 8001782:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001786:	4843      	ldr	r0, [pc, #268]	@ (8001894 <HAL_ADC_ConfigChannel+0x774>)
 8001788:	f7ff fa98 	bl	8000cbc <LL_ADC_IsEnabled>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d15e      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a40      	ldr	r2, [pc, #256]	@ (8001898 <HAL_ADC_ConfigChannel+0x778>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d127      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x6cc>
 800179c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d121      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <HAL_ADC_ConfigChannel+0x774>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d161      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80017b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017ba:	4619      	mov	r1, r3
 80017bc:	4834      	ldr	r0, [pc, #208]	@ (8001890 <HAL_ADC_ConfigChannel+0x770>)
 80017be:	f7ff f916 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c2:	4b36      	ldr	r3, [pc, #216]	@ (800189c <HAL_ADC_ConfigChannel+0x77c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	4a35      	ldr	r2, [pc, #212]	@ (80018a0 <HAL_ADC_ConfigChannel+0x780>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017ea:	e044      	b.n	8001876 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2c      	ldr	r2, [pc, #176]	@ (80018a4 <HAL_ADC_ConfigChannel+0x784>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d113      	bne.n	800181e <HAL_ADC_ConfigChannel+0x6fe>
 80017f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <HAL_ADC_ConfigChannel+0x774>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d134      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800180c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001810:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001814:	4619      	mov	r1, r3
 8001816:	481e      	ldr	r0, [pc, #120]	@ (8001890 <HAL_ADC_ConfigChannel+0x770>)
 8001818:	f7ff f8e9 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800181c:	e02b      	b.n	8001876 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <HAL_ADC_ConfigChannel+0x788>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d126      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x756>
 8001828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800182c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d120      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a16      	ldr	r2, [pc, #88]	@ (8001894 <HAL_ADC_ConfigChannel+0x774>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d11b      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800183e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001842:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001846:	4619      	mov	r1, r3
 8001848:	4811      	ldr	r0, [pc, #68]	@ (8001890 <HAL_ADC_ConfigChannel+0x770>)
 800184a:	f7ff f8d0 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
 800184e:	e012      	b.n	8001876 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001854:	f043 0220 	orr.w	r2, r3, #32
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001862:	e008      	b.n	8001876 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800187e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001882:	4618      	mov	r0, r3
 8001884:	37d8      	adds	r7, #216	@ 0xd8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	80080000 	.word	0x80080000
 8001890:	50040300 	.word	0x50040300
 8001894:	50040000 	.word	0x50040000
 8001898:	c7520000 	.word	0xc7520000
 800189c:	20000008 	.word	0x20000008
 80018a0:	053e2d63 	.word	0x053e2d63
 80018a4:	cb840000 	.word	0xcb840000
 80018a8:	80000001 	.word	0x80000001

080018ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f9fd 	bl	8000cbc <LL_ADC_IsEnabled>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d15e      	bne.n	8001986 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <ADC_Enable+0xe4>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e04a      	b.n	8001988 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f9cc 	bl	8000c94 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80018fc:	4825      	ldr	r0, [pc, #148]	@ (8001994 <ADC_Enable+0xe8>)
 80018fe:	f7ff f889 	bl	8000a14 <LL_ADC_GetCommonPathInternalCh>
 8001902:	4603      	mov	r3, r0
 8001904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00f      	beq.n	800192c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <ADC_Enable+0xec>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	4a22      	ldr	r2, [pc, #136]	@ (800199c <ADC_Enable+0xf0>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800191e:	e002      	b.n	8001926 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	3b01      	subs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800192c:	f7ff f800 	bl	8000930 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001932:	e021      	b.n	8001978 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f9bf 	bl	8000cbc <LL_ADC_IsEnabled>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9a3 	bl	8000c94 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800194e:	f7fe ffef 	bl	8000930 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d90d      	bls.n	8001978 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	f043 0210 	orr.w	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e007      	b.n	8001988 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d1d6      	bne.n	8001934 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	8000003f 	.word	0x8000003f
 8001994:	50040300 	.word	0x50040300
 8001998:	20000008 	.word	0x20000008
 800199c:	053e2d63 	.word	0x053e2d63

080019a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d14b      	bne.n	8001a52 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d021      	beq.n	8001a18 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f87e 	bl	8000ada <LL_ADC_REG_IsTriggerSourceSWStart>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d032      	beq.n	8001a4a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12b      	bne.n	8001a4a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11f      	bne.n	8001a4a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a16:	e018      	b.n	8001a4a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d111      	bne.n	8001a4a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7fe fbc8 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a50:	e00e      	b.n	8001a70 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff fb54 	bl	800110c <HAL_ADC_ErrorCallback>
}
 8001a64:	e004      	b.n	8001a70 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fb36 	bl	80010f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	f043 0204 	orr.w	r2, r3, #4
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fb26 	bl	800110c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	@ (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	@ 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff40 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff33 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa4 	bl	8001c24 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e08e      	b.n	8001e18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b47      	ldr	r3, [pc, #284]	@ (8001e20 <HAL_DMA_Init+0x138>)
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d80f      	bhi.n	8001d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b45      	ldr	r3, [pc, #276]	@ (8001e24 <HAL_DMA_Init+0x13c>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a45      	ldr	r2, [pc, #276]	@ (8001e28 <HAL_DMA_Init+0x140>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	009a      	lsls	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a42      	ldr	r2, [pc, #264]	@ (8001e2c <HAL_DMA_Init+0x144>)
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d24:	e00e      	b.n	8001d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <HAL_DMA_Init+0x148>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a3d      	ldr	r2, [pc, #244]	@ (8001e28 <HAL_DMA_Init+0x140>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a3c      	ldr	r2, [pc, #240]	@ (8001e34 <HAL_DMA_Init+0x14c>)
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f9b6 	bl	8002108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001da4:	d102      	bne.n	8001dac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001db8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dc2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d010      	beq.n	8001dee <HAL_DMA_Init+0x106>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d80c      	bhi.n	8001dee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9d5 	bl	8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	e008      	b.n	8001e00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40020407 	.word	0x40020407
 8001e24:	bffdfff8 	.word	0xbffdfff8
 8001e28:	cccccccd 	.word	0xcccccccd
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	bffdfbf8 	.word	0xbffdfbf8
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_DMA_Start_IT+0x20>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e066      	b.n	8001f26 <HAL_DMA_Start_IT+0xee>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d155      	bne.n	8001f18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f8fb 	bl	800208c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 020e 	orr.w	r2, r2, #14
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e00f      	b.n	8001ed0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0204 	bic.w	r2, r2, #4
 8001ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 020a 	orr.w	r2, r2, #10
 8001ece:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e005      	b.n	8001f24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f003 031c 	and.w	r3, r3, #28
 8001f4e:	2204      	movs	r2, #4
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d026      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x7a>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d021      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0204 	bic.w	r2, r2, #4
 8001f80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f003 021c 	and.w	r2, r3, #28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2104      	movs	r1, #4
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d071      	beq.n	8002082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fa6:	e06c      	b.n	8002082 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	f003 031c 	and.w	r3, r3, #28
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02e      	beq.n	800201a <HAL_DMA_IRQHandler+0xec>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d029      	beq.n	800201a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020a 	bic.w	r2, r2, #10
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	f003 021c 	and.w	r2, r3, #28
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d038      	beq.n	8002082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002018:	e033      	b.n	8002082 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f003 031c 	and.w	r3, r3, #28
 8002022:	2208      	movs	r2, #8
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x156>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d025      	beq.n	8002084 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 020e 	bic.w	r2, r2, #14
 8002046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f003 021c 	and.w	r2, r3, #28
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002082:	bf00      	nop
 8002084:	bf00      	nop
}
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f003 021c 	and.w	r2, r3, #28
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d108      	bne.n	80020ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ea:	e007      	b.n	80020fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002118:	429a      	cmp	r2, r3
 800211a:	d80a      	bhi.n	8002132 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002128:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002130:	e007      	b.n	8002142 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	009a      	lsls	r2, r3, #2
 800213a:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800213c:	4413      	add	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3b08      	subs	r3, #8
 800214a:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002158:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40020407 	.word	0x40020407
 8002178:	4002081c 	.word	0x4002081c
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	40020880 	.word	0x40020880

08002184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002194:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2201      	movs	r2, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	1000823f 	.word	0x1000823f
 80021cc:	40020940 	.word	0x40020940

080021d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021de:	e14c      	b.n	800247a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 813e 	beq.w	8002474 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d005      	beq.n	8002210 <HAL_GPIO_Init+0x40>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d130      	bne.n	8002272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002246:	2201      	movs	r2, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0201 	and.w	r2, r3, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d017      	beq.n	80022ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d123      	bne.n	8002302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	6939      	ldr	r1, [r7, #16]
 80022fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0203 	and.w	r2, r3, #3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8098 	beq.w	8002474 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002344:	4a54      	ldr	r2, [pc, #336]	@ (8002498 <HAL_GPIO_Init+0x2c8>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800236e:	d019      	beq.n	80023a4 <HAL_GPIO_Init+0x1d4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4a      	ldr	r2, [pc, #296]	@ (800249c <HAL_GPIO_Init+0x2cc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_GPIO_Init+0x1d0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a49      	ldr	r2, [pc, #292]	@ (80024a0 <HAL_GPIO_Init+0x2d0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00d      	beq.n	800239c <HAL_GPIO_Init+0x1cc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a48      	ldr	r2, [pc, #288]	@ (80024a4 <HAL_GPIO_Init+0x2d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <HAL_GPIO_Init+0x1c8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a47      	ldr	r2, [pc, #284]	@ (80024a8 <HAL_GPIO_Init+0x2d8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_GPIO_Init+0x1c4>
 8002390:	2304      	movs	r3, #4
 8002392:	e008      	b.n	80023a6 <HAL_GPIO_Init+0x1d6>
 8002394:	2307      	movs	r3, #7
 8002396:	e006      	b.n	80023a6 <HAL_GPIO_Init+0x1d6>
 8002398:	2303      	movs	r3, #3
 800239a:	e004      	b.n	80023a6 <HAL_GPIO_Init+0x1d6>
 800239c:	2302      	movs	r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x1d6>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_GPIO_Init+0x1d6>
 80023a4:	2300      	movs	r3, #0
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	4093      	lsls	r3, r2
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b6:	4938      	ldr	r1, [pc, #224]	@ (8002498 <HAL_GPIO_Init+0x2c8>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e8:	4a30      	ldr	r2, [pc, #192]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002412:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002418:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 800241a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800243e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 8002448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800246c:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <HAL_GPIO_Init+0x2dc>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3301      	adds	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f aeab 	bne.w	80021e0 <HAL_GPIO_Init+0x10>
  }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40010000 	.word	0x40010000
 800249c:	48000400 	.word	0x48000400
 80024a0:	48000800 	.word	0x48000800
 80024a4:	48000c00 	.word	0x48000c00
 80024a8:	48001000 	.word	0x48001000
 80024ac:	58000800 	.word	0x58000800

080024b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0c0      	b.n	8002644 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f007 fdbe 	bl	800a058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 fb3d 	bl	8005b68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e03e      	b.n	8002572 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3311      	adds	r3, #17
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	3310      	adds	r3, #16
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3313      	adds	r3, #19
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	3320      	adds	r3, #32
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	3324      	adds	r3, #36	@ 0x24
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3bb      	bcc.n	80024f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e044      	b.n	800260c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	3301      	adds	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b5      	bcc.n	8002582 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002622:	f003 fabc 	bl	8005b9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7a9b      	ldrb	r3, [r3, #10]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f001 fc44 	bl	8003eca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_Start+0x16>
 800265e:	2302      	movs	r3, #2
 8002660:	e012      	b.n	8002688 <HAL_PCD_Start+0x3c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fa63 	bl	8005b3a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f005 fd24 	bl	80080c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f005 fd29 	bl	80080f4 <USB_ReadInterrupts>
 80026a2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb08 	bl	8002cc4 <PCD_EP_ISR_Handler>

    return;
 80026b4:	e110      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	b292      	uxth	r2, r2
 80026d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f007 fd4a 	bl	800a172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026de:	2100      	movs	r1, #0
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8fc 	bl	80028de <HAL_PCD_SetAddress>

    return;
 80026e6:	e0f7      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002704:	b292      	uxth	r2, r2
 8002706:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800270a:	e0e5      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800271e:	b29a      	uxth	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002728:	b292      	uxth	r2, r2
 800272a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800272e:	e0d3      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d034      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0204 	bic.w	r2, r2, #4
 800274c:	b292      	uxth	r2, r2
 800274e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800275a:	b29a      	uxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0208 	bic.w	r2, r2, #8
 8002764:	b292      	uxth	r2, r2
 8002766:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800277c:	2100      	movs	r1, #0
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f007 fec8 	bl	800a514 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f007 fd2d 	bl	800a1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800279c:	b292      	uxth	r2, r2
 800279e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027a2:	e099      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d027      	beq.n	80027fe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0208 	orr.w	r2, r2, #8
 80027c0:	b292      	uxth	r2, r2
 80027c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d8:	b292      	uxth	r2, r2
 80027da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0204 	orr.w	r2, r2, #4
 80027f0:	b292      	uxth	r2, r2
 80027f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f007 fcda 	bl	800a1b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027fc:	e06c      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	d040      	beq.n	800288a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281a:	b292      	uxth	r2, r2
 800281c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d12b      	bne.n	8002882 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0204 	orr.w	r2, r2, #4
 800283c:	b292      	uxth	r2, r2
 800283e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0208 	orr.w	r2, r2, #8
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800286a:	b29b      	uxth	r3, r3
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002878:	2101      	movs	r1, #1
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f007 fe4a 	bl	800a514 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002880:	e02a      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f007 fc94 	bl	800a1b0 <HAL_PCD_SuspendCallback>
    return;
 8002888:	e026      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00f      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028a6:	b292      	uxth	r2, r2
 80028a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f007 fc52 	bl	800a156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028b2:	e011      	b.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d0:	b292      	uxth	r2, r2
 80028d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80028d6:	bf00      	nop
  }
}
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_SetAddress+0x1a>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e012      	b.n	800291e <HAL_PCD_SetAddress+0x40>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f005 fbc5 	bl	800809e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	4608      	mov	r0, r1
 8002930:	4611      	mov	r1, r2
 8002932:	461a      	mov	r2, r3
 8002934:	4603      	mov	r3, r0
 8002936:	70fb      	strb	r3, [r7, #3]
 8002938:	460b      	mov	r3, r1
 800293a:	803b      	strh	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0e      	bge.n	800296a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	3310      	adds	r3, #16
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00e      	b.n	8002988 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 0207 	and.w	r2, r3, #7
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002994:	883a      	ldrh	r2, [r7, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	78ba      	ldrb	r2, [r7, #2]
 800299e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029a0:	78bb      	ldrb	r3, [r7, #2]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d102      	bne.n	80029ac <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_PCD_EP_Open+0x94>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e00e      	b.n	80029d8 <HAL_PCD_EP_Open+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 f907 	bl	8005bdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80029d6:	7afb      	ldrb	r3, [r7, #11]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	da0e      	bge.n	8002a12 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 0207 	and.w	r2, r3, #7
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	3310      	adds	r3, #16
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	705a      	strb	r2, [r3, #1]
 8002a10:	e00e      	b.n	8002a30 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 0207 	and.w	r2, r3, #7
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_PCD_EP_Close+0x6a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e00e      	b.n	8002a68 <HAL_PCD_EP_Close+0x88>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68f9      	ldr	r1, [r7, #12]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fc83 	bl	8006364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 fe3b 	bl	800673e <USB_EPStartXfer>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	3310      	adds	r3, #16
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6979      	ldr	r1, [r7, #20]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fe04 	bl	800673e <USB_EPStartXfer>

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	7912      	ldrb	r2, [r2, #4]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e03e      	b.n	8002bdc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da0e      	bge.n	8002b84 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 0207 	and.w	r2, r3, #7
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3310      	adds	r3, #16
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	705a      	strb	r2, [r3, #1]
 8002b82:	e00c      	b.n	8002b9e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_EP_SetStall+0x7e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_SetStall+0x9c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 f967 	bl	8007ea0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	7912      	ldrb	r2, [r2, #4]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e040      	b.n	8002c84 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da0e      	bge.n	8002c28 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 0207 	and.w	r2, r3, #7
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3310      	adds	r3, #16
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	705a      	strb	r2, [r3, #1]
 8002c26:	e00e      	b.n	8002c46 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 0207 	and.w	r2, r3, #7
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_PCD_EP_ClrStall+0x82>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e00e      	b.n	8002c84 <HAL_PCD_EP_ClrStall+0xa0>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 f964 	bl	8007f42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f005 fa3b 	bl	8008114 <USB_ActivateRemoteWakeup>
 8002c9e:	4603      	mov	r3, r0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f005 fa42 	bl	800813e <USB_DeActivateRemoteWakeup>
 8002cba:	4603      	mov	r3, r0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b096      	sub	sp, #88	@ 0x58
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ccc:	e3ad      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002cda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ce8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 816f 	bne.w	8002fd0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d14c      	bne.n	8002d98 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0e:	81fb      	strh	r3, [r7, #14]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3310      	adds	r3, #16
 8002d26:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	441a      	add	r2, r3
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f007 f9de 	bl	800a122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7b1b      	ldrb	r3, [r3, #12]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 835c 	beq.w	800342a <PCD_EP_ISR_Handler+0x766>
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 8357 	bne.w	800342a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b1b      	ldrb	r3, [r3, #12]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	731a      	strb	r2, [r3, #12]
 8002d96:	e348      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d9e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d032      	beq.n	8002e1c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ddc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f005 f9fb 	bl	80081ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e02:	4013      	ands	r3, r2
 8002e04:	823b      	strh	r3, [r7, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	8a3a      	ldrh	r2, [r7, #16]
 8002e0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e10:	b292      	uxth	r2, r2
 8002e12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f007 f957 	bl	800a0c8 <HAL_PCD_SetupStageCallback>
 8002e1a:	e306      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e1c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f280 8302 	bge.w	800342a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e32:	4013      	ands	r3, r2
 8002e34:	83fb      	strh	r3, [r7, #30]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	8bfa      	ldrh	r2, [r7, #30]
 8002e3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e40:	b292      	uxth	r2, r2
 8002e42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d019      	beq.n	8002ea8 <PCD_EP_ISR_Handler+0x1e4>
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e82:	6959      	ldr	r1, [r3, #20]
 8002e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f005 f9ad 	bl	80081ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f007 f922 	bl	800a0ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002eb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 82b5 	bne.w	800342a <PCD_EP_ISR_Handler+0x766>
 8002ec0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ec4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ec8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ecc:	f000 82ad 	beq.w	800342a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f06:	d91d      	bls.n	8002f44 <PCD_EP_ISR_Handler+0x280>
 8002f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <PCD_EP_ISR_Handler+0x25e>
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	e026      	b.n	8002f92 <PCD_EP_ISR_Handler+0x2ce>
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <PCD_EP_ISR_Handler+0x29e>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	801a      	strh	r2, [r3, #0]
 8002f60:	e017      	b.n	8002f92 <PCD_EP_ISR_Handler+0x2ce>
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <PCD_EP_ISR_Handler+0x2b8>
 8002f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f78:	3301      	adds	r3, #1
 8002f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	029b      	lsls	r3, r3, #10
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa2:	827b      	strh	r3, [r7, #18]
 8002fa4:	8a7b      	ldrh	r3, [r7, #18]
 8002fa6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002faa:	827b      	strh	r3, [r7, #18]
 8002fac:	8a7b      	ldrh	r3, [r7, #18]
 8002fae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002fb2:	827b      	strh	r3, [r7, #18]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	8a7b      	ldrh	r3, [r7, #18]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
 8002fce:	e22c      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fe4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f280 80f6 	bge.w	80031da <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003004:	4013      	ands	r3, r2
 8003006:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800301c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003020:	b292      	uxth	r2, r2
 8003022:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003024:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	7b1b      	ldrb	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d123      	bne.n	800308a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	4413      	add	r3, r2
 800305c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003066:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800306a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 808e 	beq.w	8003190 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307a:	6959      	ldr	r1, [r3, #20]
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	88da      	ldrh	r2, [r3, #6]
 8003080:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003084:	f005 f8b2 	bl	80081ec <USB_ReadPMA>
 8003088:	e082      	b.n	8003190 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800308a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d10a      	bne.n	80030a8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003092:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003096:	461a      	mov	r2, r3
 8003098:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9d3 	bl	8003446 <HAL_PCD_EP_DB_Receive>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80030a6:	e073      	b.n	8003190 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80030d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d022      	beq.n	800314c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	4413      	add	r3, r2
 8003120:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800312e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02c      	beq.n	8003190 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	6959      	ldr	r1, [r3, #20]
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	891a      	ldrh	r2, [r3, #8]
 8003142:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003146:	f005 f851 	bl	80081ec <USB_ReadPMA>
 800314a:	e021      	b.n	8003190 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	4413      	add	r3, r2
 8003166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	6959      	ldr	r1, [r3, #20]
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	895a      	ldrh	r2, [r3, #10]
 8003188:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800318c:	f005 f82e 	bl	80081ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003198:	441a      	add	r2, r3
 800319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800319e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031a6:	441a      	add	r2, r3
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x4fc>
 80031b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80031b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d206      	bcs.n	80031ce <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f006 ff90 	bl	800a0ec <HAL_PCD_DataOutStageCallback>
 80031cc:	e005      	b.n	80031da <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fab2 	bl	800673e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8121 	beq.w	800342a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80031e8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3310      	adds	r3, #16
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003216:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29b      	uxth	r3, r3
 8003236:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80a2 	bne.w	8003386 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324a:	7b1b      	ldrb	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8093 	beq.w	8003378 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003252:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d046      	beq.n	80032ec <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d126      	bne.n	80032b4 <PCD_EP_ISR_Handler+0x5f0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	4413      	add	r3, r2
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00da      	lsls	r2, r3, #3
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	4413      	add	r3, r2
 8003288:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003298:	b29a      	uxth	r2, r3
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	e061      	b.n	8003378 <PCD_EP_ISR_Handler+0x6b4>
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d15d      	bne.n	8003378 <PCD_EP_ISR_Handler+0x6b4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	4413      	add	r3, r2
 80032d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	00da      	lsls	r2, r3, #3
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80032e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	2200      	movs	r2, #0
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	e045      	b.n	8003378 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d126      	bne.n	8003348 <PCD_EP_ISR_Handler+0x684>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	4413      	add	r3, r2
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	00da      	lsls	r2, r3, #3
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	4413      	add	r3, r2
 800331c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332c:	b29a      	uxth	r2, r3
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	801a      	strh	r2, [r3, #0]
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003340:	b29a      	uxth	r2, r3
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	e017      	b.n	8003378 <PCD_EP_ISR_Handler+0x6b4>
 8003348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d113      	bne.n	8003378 <PCD_EP_ISR_Handler+0x6b4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335e:	4413      	add	r3, r2
 8003360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	00da      	lsls	r2, r3, #3
 8003368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336a:	4413      	add	r3, r2
 800336c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f006 fecf 	bl	800a122 <HAL_PCD_DataInStageCallback>
 8003384:	e051      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d144      	bne.n	800341c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80033ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d907      	bls.n	80033d6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033ce:	1ad2      	subs	r2, r2, r3
 80033d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d2:	619a      	str	r2, [r3, #24]
 80033d4:	e002      	b.n	80033dc <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80033dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f006 fe99 	bl	800a122 <HAL_PCD_DataInStageCallback>
 80033f0:	e01b      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033fa:	441a      	add	r2, r3
 80033fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003408:	441a      	add	r2, r3
 800340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003414:	4618      	mov	r0, r3
 8003416:	f003 f992 	bl	800673e <USB_EPStartXfer>
 800341a:	e006      	b.n	800342a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800341c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003420:	461a      	mov	r2, r3
 8003422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f917 	bl	8003658 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003432:	b29b      	uxth	r3, r3
 8003434:	b21b      	sxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f6ff ac49 	blt.w	8002cce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3758      	adds	r7, #88	@ 0x58
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b088      	sub	sp, #32
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	4613      	mov	r3, r2
 8003452:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d07c      	beq.n	8003558 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	4413      	add	r3, r2
 8003478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003482:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	8b7b      	ldrh	r3, [r7, #26]
 800348a:	429a      	cmp	r2, r3
 800348c:	d306      	bcc.n	800349c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	8b7b      	ldrh	r3, [r7, #26]
 8003494:	1ad2      	subs	r2, r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	e002      	b.n	80034a2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d123      	bne.n	80034f2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c4:	833b      	strh	r3, [r7, #24]
 80034c6:	8b3b      	ldrh	r3, [r7, #24]
 80034c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034cc:	833b      	strh	r3, [r7, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8b3b      	ldrh	r3, [r7, #24]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01f      	beq.n	800353c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003516:	82fb      	strh	r3, [r7, #22]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	8afb      	ldrh	r3, [r7, #22]
 8003528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800352c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003534:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800353c:	8b7b      	ldrh	r3, [r7, #26]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8085 	beq.w	800364e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6959      	ldr	r1, [r3, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	891a      	ldrh	r2, [r3, #8]
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	f004 fe4b 	bl	80081ec <USB_ReadPMA>
 8003556:	e07a      	b.n	800364e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4413      	add	r3, r2
 8003572:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	8b7b      	ldrh	r3, [r7, #26]
 8003584:	429a      	cmp	r2, r3
 8003586:	d306      	bcc.n	8003596 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	8b7b      	ldrh	r3, [r7, #26]
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	619a      	str	r2, [r3, #24]
 8003594:	e002      	b.n	800359c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d123      	bne.n	80035ec <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035be:	83fb      	strh	r3, [r7, #30]
 80035c0:	8bfb      	ldrh	r3, [r7, #30]
 80035c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035c6:	83fb      	strh	r3, [r7, #30]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	8bfb      	ldrh	r3, [r7, #30]
 80035d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003610:	83bb      	strh	r3, [r7, #28]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	8bbb      	ldrh	r3, [r7, #28]
 8003622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800362a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003632:	b29b      	uxth	r3, r3
 8003634:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003636:	8b7b      	ldrh	r3, [r7, #26]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	895a      	ldrh	r2, [r3, #10]
 8003648:	8b7b      	ldrh	r3, [r7, #26]
 800364a:	f004 fdcf 	bl	80081ec <USB_ReadPMA>
    }
  }

  return count;
 800364e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3720      	adds	r7, #32
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0a4      	sub	sp, #144	@ 0x90
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 81db 	beq.w	8003a28 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	4413      	add	r3, r2
 800368c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003696:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d907      	bls.n	80036b6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	619a      	str	r2, [r3, #24]
 80036b4:	e002      	b.n	80036bc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 80b9 	bne.w	8003838 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d126      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0xc4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	4413      	add	r3, r2
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00da      	lsls	r2, r3, #3
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003700:	b29a      	uxth	r2, r3
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003714:	b29a      	uxth	r2, r3
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e01a      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0xfa>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d116      	bne.n	8003752 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	637b      	str	r3, [r7, #52]	@ 0x34
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003738:	4413      	add	r3, r2
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	00da      	lsls	r2, r3, #3
 8003742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003744:	4413      	add	r3, r2
 8003746:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800374a:	633b      	str	r3, [r7, #48]	@ 0x30
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	2200      	movs	r2, #0
 8003750:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d126      	bne.n	80037ae <HAL_PCD_EP_DB_Transmit+0x156>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	00da      	lsls	r2, r3, #3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003792:	b29a      	uxth	r2, r3
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	801a      	strh	r2, [r3, #0]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e017      	b.n	80037de <HAL_PCD_EP_DB_Transmit+0x186>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d113      	bne.n	80037de <HAL_PCD_EP_DB_Transmit+0x186>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037be:	b29b      	uxth	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	4413      	add	r3, r2
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00da      	lsls	r2, r3, #3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	4413      	add	r3, r2
 80037d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	2200      	movs	r2, #0
 80037dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4619      	mov	r1, r3
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f006 fc9c 	bl	800a122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 82fa 	beq.w	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800380c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003810:	82fb      	strh	r3, [r7, #22]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	441a      	add	r2, r3
 8003820:	8afb      	ldrh	r3, [r7, #22]
 8003822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800382a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800382e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003832:	b29b      	uxth	r3, r3
 8003834:	8013      	strh	r3, [r2, #0]
 8003836:	e2d8      	b.n	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d021      	beq.n	8003886 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	441a      	add	r2, r3
 800386e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800387a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800387e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800388c:	2b01      	cmp	r3, #1
 800388e:	f040 82ac 	bne.w	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800389a:	441a      	add	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038a8:	441a      	add	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d30b      	bcc.n	80038d2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	621a      	str	r2, [r3, #32]
 80038d0:	e017      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80038da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038ea:	e00a      	b.n	8003902 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d165      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003918:	b29b      	uxth	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800391e:	4413      	add	r3, r2
 8003920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00da      	lsls	r2, r3, #3
 8003928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392a:	4413      	add	r3, r2
 800392c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393c:	b29a      	uxth	r2, r3
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003946:	2b3e      	cmp	r3, #62	@ 0x3e
 8003948:	d91d      	bls.n	8003986 <HAL_PCD_EP_DB_Transmit+0x32e>
 800394a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_PCD_EP_DB_Transmit+0x30c>
 800395e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003960:	3b01      	subs	r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
 800396a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396c:	b29b      	uxth	r3, r3
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	b29b      	uxth	r3, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29a      	uxth	r2, r3
 8003980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e044      	b.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x34c>
 800398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800399c:	b29a      	uxth	r2, r3
 800399e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	e035      	b.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80039a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_PCD_EP_DB_Transmit+0x366>
 80039b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ba:	3301      	adds	r3, #1
 80039bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	e01c      	b.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d118      	bne.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f2:	4413      	add	r3, r2
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fe:	4413      	add	r3, r2
 8003a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6959      	ldr	r1, [r3, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	891a      	ldrh	r2, [r3, #8]
 8003a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f004 fba1 	bl	8008168 <USB_WritePMA>
 8003a26:	e1e0      	b.n	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d307      	bcc.n	8003a6c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a64:	1ad2      	subs	r2, r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	619a      	str	r2, [r3, #24]
 8003a6a:	e002      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 80c0 	bne.w	8003bfc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d126      	bne.n	8003ad2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a98:	4413      	add	r3, r2
 8003a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	00da      	lsls	r2, r3, #3
 8003aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	e01a      	b.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d116      	bne.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aee:	4413      	add	r3, r2
 8003af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	00da      	lsls	r2, r3, #3
 8003af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003afa:	4413      	add	r3, r2
 8003afc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b04:	2200      	movs	r2, #0
 8003b06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12b      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x516>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b2a:	4413      	add	r3, r2
 8003b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	00da      	lsls	r2, r3, #3
 8003b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b36:	4413      	add	r3, r2
 8003b38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e017      	b.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x546>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d113      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x546>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b84:	4413      	add	r3, r2
 8003b86:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	00da      	lsls	r2, r3, #3
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b96:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f006 fabc 	bl	800a122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 811a 	bne.w	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	441a      	add	r2, r3
 8003be2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8013      	strh	r3, [r2, #0]
 8003bfa:	e0f6      	b.n	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d121      	bne.n	8003c4a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 80ca 	bne.w	8003dea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c5e:	441a      	add	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d30b      	bcc.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	621a      	str	r2, [r3, #32]
 8003c94:	e017      	b.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d108      	bne.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cae:	e00a      	b.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d165      	bne.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x748>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ce8:	4413      	add	r3, r2
 8003cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	00da      	lsls	r2, r3, #3
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d12:	d91d      	bls.n	8003d50 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d4c:	801a      	strh	r2, [r3, #0]
 8003d4e:	e041      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x716>
 8003d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e032      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_PCD_EP_DB_Transmit+0x730>
 8003d82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d84:	3301      	adds	r3, #1
 8003d86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e019      	b.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d115      	bne.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db6:	4413      	add	r3, r2
 8003db8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	00da      	lsls	r2, r3, #3
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6959      	ldr	r1, [r3, #20]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	895a      	ldrh	r2, [r3, #10]
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f004 f9bf 	bl	8008168 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e04:	82bb      	strh	r3, [r7, #20]
 8003e06:	8abb      	ldrh	r3, [r7, #20]
 8003e08:	f083 0310 	eor.w	r3, r3, #16
 8003e0c:	82bb      	strh	r3, [r7, #20]
 8003e0e:	8abb      	ldrh	r3, [r7, #20]
 8003e10:	f083 0320 	eor.w	r3, r3, #32
 8003e14:	82bb      	strh	r3, [r7, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	441a      	add	r2, r3
 8003e24:	8abb      	ldrh	r3, [r7, #20]
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3790      	adds	r7, #144	@ 0x90
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	817b      	strh	r3, [r7, #10]
 8003e52:	4613      	mov	r3, r2
 8003e54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	f003 0207 	and.w	r2, r3, #7
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	3310      	adds	r3, #16
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e009      	b.n	8003e8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e7a:	897a      	ldrh	r2, [r7, #10]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e8e:	893b      	ldrh	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	80da      	strh	r2, [r3, #6]
 8003ea2:	e00b      	b.n	8003ebc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	58000400 	.word	0x58000400

08003f40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	58000400 	.word	0x58000400

08003f5c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f6a:	6053      	str	r3, [r2, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58000400 	.word	0x58000400

08003f7c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8e:	d101      	bne.n	8003f94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fee:	d101      	bne.n	8003ff4 <LL_RCC_HSE_IsReady+0x18>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <LL_RCC_HSE_IsReady+0x1a>
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800400e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800402c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004030:	6013      	str	r3, [r2, #0]
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d101      	bne.n	8004054 <LL_RCC_HSI_IsReady+0x18>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <LL_RCC_HSI_IsReady+0x1a>
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d101      	bne.n	80040e6 <LL_RCC_HSI48_IsReady+0x18>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <LL_RCC_HSI48_IsReady+0x1a>
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d101      	bne.n	8004192 <LL_RCC_LSE_IsReady+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_RCC_LSE_IsReady+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d101      	bne.n	80041fa <LL_RCC_LSI1_IsReady+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_RCC_LSI1_IsReady+0x1a>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d101      	bne.n	8004262 <LL_RCC_LSI2_IsReady+0x18>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <LL_RCC_LSI2_IsReady+0x1a>
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d101      	bne.n	80042ee <LL_RCC_MSI_IsReady+0x16>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <LL_RCC_MSI_IsReady+0x18>
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800430c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004332:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2bb0      	cmp	r3, #176	@ 0xb0
 8004338:	d901      	bls.n	800433e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800433a:	23b0      	movs	r3, #176	@ 0xb0
 800433c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800433e:	687b      	ldr	r3, [r7, #4]
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f023 0203 	bic.w	r2, r3, #3
 8004388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80043ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004416:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800441a:	f023 020f 	bic.w	r2, r3, #15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800444a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ec:	6013      	str	r3, [r2, #0]
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800450a:	d101      	bne.n	8004510 <LL_RCC_PLL_IsReady+0x18>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <LL_RCC_PLL_IsReady+0x1a>
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0303 	and.w	r3, r3, #3
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004590:	d101      	bne.n	8004596 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80045a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045b6:	d101      	bne.n	80045bc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045dc:	d101      	bne.n	80045e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004600:	d101      	bne.n	8004606 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004624:	d101      	bne.n	800462a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b08d      	sub	sp, #52	@ 0x34
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e363      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 808d 	beq.w	8004772 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004658:	f7ff fea1 	bl	800439e <LL_RCC_GetSysClkSource>
 800465c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465e:	f7ff ff82 	bl	8004566 <LL_RCC_PLL_GetMainSource>
 8004662:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x3e>
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d147      	bne.n	8004700 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	2b01      	cmp	r3, #1
 8004674:	d144      	bne.n	8004700 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e347      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004686:	f7ff fe4c 	bl	8004322 <LL_RCC_MSI_GetRange>
 800468a:	4603      	mov	r3, r0
 800468c:	429c      	cmp	r4, r3
 800468e:	d914      	bls.n	80046ba <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fd03 	bl	80050a0 <RCC_SetFlashLatencyFromMSIRange>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e336      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fe26 	bl	80042fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fe4a 	bl	800434c <LL_RCC_MSI_SetCalibTrimming>
 80046b8:	e013      	b.n	80046e2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fe1b 	bl	80042fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fe3f 	bl	800434c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fce4 	bl	80050a0 <RCC_SetFlashLatencyFromMSIRange>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e317      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046e2:	f000 fcc9 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4aa4      	ldr	r2, [pc, #656]	@ (800497c <HAL_RCC_OscConfig+0x344>)
 80046ea:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046ec:	4ba4      	ldr	r3, [pc, #656]	@ (8004980 <HAL_RCC_OscConfig+0x348>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc f8cf 	bl	8000894 <HAL_InitTick>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d039      	beq.n	8004770 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e308      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01e      	beq.n	8004746 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004708:	f7ff fdc8 	bl	800429c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800470c:	f7fc f910 	bl	8000930 <HAL_GetTick>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004714:	f7fc f90c 	bl	8000930 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e2f5      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004726:	f7ff fdd7 	bl	80042d8 <LL_RCC_MSI_IsReady>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f1      	beq.n	8004714 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fde0 	bl	80042fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fe04 	bl	800434c <LL_RCC_MSI_SetCalibTrimming>
 8004744:	e015      	b.n	8004772 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004746:	f7ff fdb8 	bl	80042ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800474a:	f7fc f8f1 	bl	8000930 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004752:	f7fc f8ed 	bl	8000930 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e2d6      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004764:	f7ff fdb8 	bl	80042d8 <LL_RCC_MSI_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <HAL_RCC_OscConfig+0x11a>
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004770:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d047      	beq.n	800480e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477e:	f7ff fe0e 	bl	800439e <LL_RCC_GetSysClkSource>
 8004782:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004784:	f7ff feef 	bl	8004566 <LL_RCC_PLL_GetMainSource>
 8004788:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d005      	beq.n	800479c <HAL_RCC_OscConfig+0x164>
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d108      	bne.n	80047a8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d134      	bne.n	800480e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e2b4      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x180>
 80047b2:	f7ff fbf5 	bl	8003fa0 <LL_RCC_HSE_Enable>
 80047b6:	e001      	b.n	80047bc <HAL_RCC_OscConfig+0x184>
 80047b8:	f7ff fc01 	bl	8003fbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fc f8b4 	bl	8000930 <HAL_GetTick>
 80047c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7fc f8b0 	bl	8000930 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	@ 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e299      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047de:	f7ff fbfd 	bl	8003fdc <LL_RCC_HSE_IsReady>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f1      	beq.n	80047cc <HAL_RCC_OscConfig+0x194>
 80047e8:	e011      	b.n	800480e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fc f8a1 	bl	8000930 <HAL_GetTick>
 80047ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f2:	f7fc f89d 	bl	8000930 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	@ 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e286      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004804:	f7ff fbea 	bl	8003fdc <LL_RCC_HSE_IsReady>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f1      	bne.n	80047f2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	f7ff fdc0 	bl	800439e <LL_RCC_GetSysClkSource>
 800481e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004820:	f7ff fea1 	bl	8004566 <LL_RCC_PLL_GetMainSource>
 8004824:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d005      	beq.n	8004838 <HAL_RCC_OscConfig+0x200>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d10e      	bne.n	8004850 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d10b      	bne.n	8004850 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e266      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fc09 	bl	8004060 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800484e:	e031      	b.n	80048b4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	f7ff fbd2 	bl	8004000 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc f868 	bl	8000930 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fc f864 	bl	8000930 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e24d      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004876:	f7ff fbe1 	bl	800403c <LL_RCC_HSI_IsReady>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f1      	beq.n	8004864 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fbeb 	bl	8004060 <LL_RCC_HSI_SetCalibTrimming>
 800488a:	e013      	b.n	80048b4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488c:	f7ff fbc7 	bl	800401e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc f84e 	bl	8000930 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fc f84a 	bl	8000930 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e233      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80048aa:	f7ff fbc7 	bl	800403c <LL_RCC_HSI_IsReady>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f1      	bne.n	8004898 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80a3 	beq.w	8004a14 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d076      	beq.n	80049c4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d046      	beq.n	8004970 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048e2:	f7ff fc7e 	bl	80041e2 <LL_RCC_LSI1_IsReady>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d113      	bne.n	8004914 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048ec:	f7ff fc57 	bl	800419e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f0:	f7fc f81e 	bl	8000930 <HAL_GetTick>
 80048f4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048f8:	f7fc f81a 	bl	8000930 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e203      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800490a:	f7ff fc6a 	bl	80041e2 <LL_RCC_LSI1_IsReady>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f1      	beq.n	80048f8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004914:	f7ff fc77 	bl	8004206 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc f80a 	bl	8000930 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004920:	f7fc f806 	bl	8000930 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b03      	cmp	r3, #3
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1ef      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004932:	f7ff fc8a 	bl	800424a <LL_RCC_LSI2_IsReady>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f1      	beq.n	8004920 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fc94 	bl	800426e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004946:	f7ff fc3b 	bl	80041c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fb fff1 	bl	8000930 <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004952:	f7fb ffed 	bl	8000930 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1d6      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004964:	f7ff fc3d 	bl	80041e2 <LL_RCC_LSI1_IsReady>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f1      	bne.n	8004952 <HAL_RCC_OscConfig+0x31a>
 800496e:	e051      	b.n	8004a14 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004970:	f7ff fc15 	bl	800419e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fb ffdc 	bl	8000930 <HAL_GetTick>
 8004978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800497a:	e00c      	b.n	8004996 <HAL_RCC_OscConfig+0x35e>
 800497c:	20000008 	.word	0x20000008
 8004980:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004984:	f7fb ffd4 	bl	8000930 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1bd      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004996:	f7ff fc24 	bl	80041e2 <LL_RCC_LSI1_IsReady>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f1      	beq.n	8004984 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80049a0:	f7ff fc42 	bl	8004228 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049a6:	f7fb ffc3 	bl	8000930 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e1ac      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049b8:	f7ff fc47 	bl	800424a <LL_RCC_LSI2_IsReady>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f1      	bne.n	80049a6 <HAL_RCC_OscConfig+0x36e>
 80049c2:	e027      	b.n	8004a14 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80049c4:	f7ff fc30 	bl	8004228 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fb ffb2 	bl	8000930 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049d0:	f7fb ffae 	bl	8000930 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e197      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049e2:	f7ff fc32 	bl	800424a <LL_RCC_LSI2_IsReady>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f1      	bne.n	80049d0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049ec:	f7ff fbe8 	bl	80041c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fb ff9e 	bl	8000930 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049f8:	f7fb ff9a 	bl	8000930 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e183      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004a0a:	f7ff fbea 	bl	80041e2 <LL_RCC_LSI1_IsReady>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f1      	bne.n	80049f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a20:	4ba7      	ldr	r3, [pc, #668]	@ (8004cc0 <HAL_RCC_OscConfig+0x688>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d114      	bne.n	8004a56 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a2c:	f7ff fa78 	bl	8003f20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a30:	f7fb ff7e 	bl	8000930 <HAL_GetTick>
 8004a34:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fb ff7a 	bl	8000930 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e163      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8004cc0 <HAL_RCC_OscConfig+0x688>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_RCC_OscConfig+0x42c>
 8004a5e:	f7ff fb48 	bl	80040f2 <LL_RCC_LSE_Enable>
 8004a62:	e00c      	b.n	8004a7e <HAL_RCC_OscConfig+0x446>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d104      	bne.n	8004a76 <HAL_RCC_OscConfig+0x43e>
 8004a6c:	f7ff fb63 	bl	8004136 <LL_RCC_LSE_EnableBypass>
 8004a70:	f7ff fb3f 	bl	80040f2 <LL_RCC_LSE_Enable>
 8004a74:	e003      	b.n	8004a7e <HAL_RCC_OscConfig+0x446>
 8004a76:	f7ff fb4d 	bl	8004114 <LL_RCC_LSE_Disable>
 8004a7a:	f7ff fb6d 	bl	8004158 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a86:	f7fb ff53 	bl	8000930 <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fb ff4f 	bl	8000930 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e136      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004aa4:	f7ff fb69 	bl	800417a <LL_RCC_LSE_IsReady>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ef      	beq.n	8004a8e <HAL_RCC_OscConfig+0x456>
 8004aae:	e013      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fb ff3e 	bl	8000930 <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fb ff3a 	bl	8000930 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e121      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ace:	f7ff fb54 	bl	800417a <LL_RCC_LSE_IsReady>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ef      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d014      	beq.n	8004b16 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aec:	f7ff facd 	bl	800408a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fb ff1e 	bl	8000930 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af8:	f7fb ff1a 	bl	8000930 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e103      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004b0a:	f7ff fae0 	bl	80040ce <LL_RCC_HSI48_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f1      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4c0>
 8004b14:	e013      	b.n	8004b3e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b16:	f7ff fac9 	bl	80040ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fb ff09 	bl	8000930 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b22:	f7fb ff05 	bl	8000930 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0ee      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b34:	f7ff facb 	bl	80040ce <LL_RCC_HSI48_IsReady>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f1      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80e4 	beq.w	8004d10 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b48:	f7ff fc29 	bl	800439e <LL_RCC_GetSysClkSource>
 8004b4c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	f040 80b4 	bne.w	8004cc8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0203 	and.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d123      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d11c      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	0a1b      	lsrs	r3, r3, #8
 8004b80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d114      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10d      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d05d      	beq.n	8004c72 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d058      	beq.n	8004c6e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0a1      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bce:	f7ff fc84 	bl	80044da <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bd2:	f7fb fead 	bl	8000930 <HAL_GetTick>
 8004bd6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fb fea9 	bl	8000930 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e092      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ef      	bne.n	8004bda <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	4b30      	ldr	r3, [pc, #192]	@ (8004cc4 <HAL_RCC_OscConfig+0x68c>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c12:	0212      	lsls	r2, r2, #8
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c1a:	4311      	orrs	r1, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c20:	4311      	orrs	r1, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004c26:	430a      	orrs	r2, r1
 8004c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c30:	f7ff fc44 	bl	80044bc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c44:	f7fb fe74 	bl	8000930 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fb fe70 	bl	8000930 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e059      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c6c:	e050      	b.n	8004d10 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e04f      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d147      	bne.n	8004d10 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c80:	f7ff fc1c 	bl	80044bc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c94:	f7fb fe4c 	bl	8000930 <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fb fe48 	bl	8000930 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e031      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ef      	beq.n	8004c9c <HAL_RCC_OscConfig+0x664>
 8004cbc:	e028      	b.n	8004d10 <HAL_RCC_OscConfig+0x6d8>
 8004cbe:	bf00      	nop
 8004cc0:	58000400 	.word	0x58000400
 8004cc4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d01e      	beq.n	8004d0c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	f7ff fc04 	bl	80044da <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fb fe2d 	bl	8000930 <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fb fe29 	bl	8000930 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e012      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ef      	bne.n	8004cda <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_OscConfig+0x6e4>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	60cb      	str	r3, [r1, #12]
 8004d0a:	e001      	b.n	8004d10 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3734      	adds	r7, #52	@ 0x34
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	eefefffc 	.word	0xeefefffc

08004d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e12d      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d34:	4b98      	ldr	r3, [pc, #608]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d91b      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b95      	ldr	r3, [pc, #596]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 0207 	bic.w	r2, r3, #7
 8004d4a:	4993      	ldr	r1, [pc, #588]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d52:	f7fb fded 	bl	8000930 <HAL_GetTick>
 8004d56:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d5a:	f7fb fde9 	bl	8000930 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e111      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d1ef      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fb13 	bl	80043b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d90:	f7fb fdce 	bl	8000930 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d98:	f7fb fdca 	bl	8000930 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0f2      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004daa:	f7ff fbe8 	bl	800457e <LL_RCC_IsActiveFlag_HPRE>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f1      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d016      	beq.n	8004dee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fb0a 	bl	80043de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dca:	f7fb fdb1 	bl	8000930 <HAL_GetTick>
 8004dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dd2:	f7fb fdad 	bl	8000930 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0d5      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004de4:	f7ff fbdd 	bl	80045a2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f1      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fb03 	bl	800440a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e04:	f7fb fd94 	bl	8000930 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e0c:	f7fb fd90 	bl	8000930 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e0b8      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e1e:	f7ff fbd3 	bl	80045c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f1      	beq.n	8004e0c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d016      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fafd 	bl	8004438 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e3e:	f7fb fd77 	bl	8000930 <HAL_GetTick>
 8004e42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e46:	f7fb fd73 	bl	8000930 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e09b      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e58:	f7ff fbc9 	bl	80045ee <LL_RCC_IsActiveFlag_PPRE1>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f1      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d017      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff faf3 	bl	8004460 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e7a:	f7fb fd59 	bl	8000930 <HAL_GetTick>
 8004e7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e82:	f7fb fd55 	bl	8000930 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e07d      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e94:	f7ff fbbd 	bl	8004612 <LL_RCC_IsActiveFlag_PPRE2>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f1      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d043      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004eb2:	f7ff f893 	bl	8003fdc <LL_RCC_HSE_IsReady>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11e      	bne.n	8004efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e067      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ec8:	f7ff fb16 	bl	80044f8 <LL_RCC_PLL_IsReady>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d113      	bne.n	8004efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e05c      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ede:	f7ff f9fb 	bl	80042d8 <LL_RCC_MSI_IsReady>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d108      	bne.n	8004efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e051      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004eec:	f7ff f8a6 	bl	800403c <LL_RCC_HSI_IsReady>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e04a      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fa39 	bl	8004376 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fb fd14 	bl	8000930 <HAL_GetTick>
 8004f08:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0c:	f7fb fd10 	bl	8000930 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e036      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	f7ff fa3c 	bl	800439e <LL_RCC_GetSysClkSource>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d1ec      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d21b      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f40:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 0207 	bic.w	r2, r3, #7
 8004f48:	4913      	ldr	r1, [pc, #76]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fb fcee 	bl	8000930 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f58:	f7fb fcea 	bl	8000930 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e012      	b.n	8004f90 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <HAL_RCC_ClockConfig+0x278>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1ef      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f78:	f000 f87e 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4a07      	ldr	r2, [pc, #28]	@ (8004f9c <HAL_RCC_ClockConfig+0x27c>)
 8004f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004f82:	f7fb fce1 	bl	8000948 <HAL_GetTickPrio>
 8004f86:	4603      	mov	r3, r0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fb fc83 	bl	8000894 <HAL_InitTick>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	58004000 	.word	0x58004000
 8004f9c:	20000008 	.word	0x20000008

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa6:	f7ff f9fa 	bl	800439e <LL_RCC_GetSysClkSource>
 8004faa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004fb2:	f7ff f9b6 	bl	8004322 <LL_RCC_MSI_GetRange>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800506c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e04b      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d102      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fce:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e045      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fda:	f7fe ffcf 	bl	8003f7c <LL_RCC_HSE_IsEnabledDiv2>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004fe4:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e03a      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004fea:	4b22      	ldr	r3, [pc, #136]	@ (8005074 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e037      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ff0:	f7ff fab9 	bl	8004566 <LL_RCC_PLL_GetMainSource>
 8004ff4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d003      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x64>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d003      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x6a>
 8005002:	e00d      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005004:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005006:	60bb      	str	r3, [r7, #8]
        break;
 8005008:	e015      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800500a:	f7fe ffb7 	bl	8003f7c <LL_RCC_HSE_IsEnabledDiv2>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005014:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005016:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005018:	e00d      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800501a:	4b16      	ldr	r3, [pc, #88]	@ (8005074 <HAL_RCC_GetSysClockFreq+0xd4>)
 800501c:	60bb      	str	r3, [r7, #8]
        break;
 800501e:	e00a      	b.n	8005036 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005020:	f7ff f97f 	bl	8004322 <LL_RCC_MSI_GetRange>
 8005024:	4603      	mov	r3, r0
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	4a0f      	ldr	r2, [pc, #60]	@ (800506c <HAL_RCC_GetSysClockFreq+0xcc>)
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	60bb      	str	r3, [r7, #8]
        break;
 8005034:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005036:	f7ff fa71 	bl	800451c <LL_RCC_PLL_GetN>
 800503a:	4602      	mov	r2, r0
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	fb03 f402 	mul.w	r4, r3, r2
 8005042:	f7ff fa84 	bl	800454e <LL_RCC_PLL_GetDivider>
 8005046:	4603      	mov	r3, r0
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	3301      	adds	r3, #1
 800504c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005050:	f7ff fa71 	bl	8004536 <LL_RCC_PLL_GetR>
 8005054:	4603      	mov	r3, r0
 8005056:	0f5b      	lsrs	r3, r3, #29
 8005058:	3301      	adds	r3, #1
 800505a:	fbb4 f3f3 	udiv	r3, r4, r3
 800505e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop
 800506c:	0800a73c 	.word	0x0800a73c
 8005070:	00f42400 	.word	0x00f42400
 8005074:	01e84800 	.word	0x01e84800

08005078 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005078:	b598      	push	{r3, r4, r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800507c:	f7ff ff90 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8005080:	4604      	mov	r4, r0
 8005082:	f7ff fa01 	bl	8004488 <LL_RCC_GetAHBPrescaler>
 8005086:	4603      	mov	r3, r0
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	4a03      	ldr	r2, [pc, #12]	@ (800509c <HAL_RCC_GetHCLKFreq+0x24>)
 8005090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005094:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd98      	pop	{r3, r4, r7, pc}
 800509c:	0800a6fc 	.word	0x0800a6fc

080050a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2bb0      	cmp	r3, #176	@ 0xb0
 80050ac:	d903      	bls.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e007      	b.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a11      	ldr	r2, [pc, #68]	@ (8005104 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80050c6:	f7ff f9eb 	bl	80044a0 <LL_RCC_GetAHB4Prescaler>
 80050ca:	4603      	mov	r3, r0
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80050d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4a0a      	ldr	r2, [pc, #40]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	0c9c      	lsrs	r4, r3, #18
 80050ea:	f7fe ff29 	bl	8003f40 <HAL_PWREx_GetVoltageRange>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4619      	mov	r1, r3
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f80c 	bl	8005110 <RCC_SetFlashLatency>
 80050f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
 8005102:	bf00      	nop
 8005104:	0800a73c 	.word	0x0800a73c
 8005108:	0800a6fc 	.word	0x0800a6fc
 800510c:	431bde83 	.word	0x431bde83

08005110 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b093      	sub	sp, #76	@ 0x4c
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800511a:	4b37      	ldr	r3, [pc, #220]	@ (80051f8 <RCC_SetFlashLatency+0xe8>)
 800511c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005126:	4a35      	ldr	r2, [pc, #212]	@ (80051fc <RCC_SetFlashLatency+0xec>)
 8005128:	f107 031c 	add.w	r3, r7, #28
 800512c:	ca07      	ldmia	r2, {r0, r1, r2}
 800512e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005132:	4b33      	ldr	r3, [pc, #204]	@ (8005200 <RCC_SetFlashLatency+0xf0>)
 8005134:	f107 040c 	add.w	r4, r7, #12
 8005138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800513e:	2300      	movs	r3, #0
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d11a      	bne.n	8005180 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800514a:	2300      	movs	r3, #0
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
 800514e:	e013      	b.n	8005178 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	3348      	adds	r3, #72	@ 0x48
 8005156:	443b      	add	r3, r7
 8005158:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d807      	bhi.n	8005172 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	3348      	adds	r3, #72	@ 0x48
 8005168:	443b      	add	r3, r7
 800516a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800516e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005170:	e020      	b.n	80051b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005174:	3301      	adds	r3, #1
 8005176:	643b      	str	r3, [r7, #64]	@ 0x40
 8005178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517a:	2b03      	cmp	r3, #3
 800517c:	d9e8      	bls.n	8005150 <RCC_SetFlashLatency+0x40>
 800517e:	e019      	b.n	80051b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005184:	e013      	b.n	80051ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	3348      	adds	r3, #72	@ 0x48
 800518c:	443b      	add	r3, r7
 800518e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d807      	bhi.n	80051a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	3348      	adds	r3, #72	@ 0x48
 800519e:	443b      	add	r3, r7
 80051a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051a4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80051a6:	e005      	b.n	80051b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051aa:	3301      	adds	r3, #1
 80051ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d9e8      	bls.n	8005186 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80051b4:	4b13      	ldr	r3, [pc, #76]	@ (8005204 <RCC_SetFlashLatency+0xf4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 0207 	bic.w	r2, r3, #7
 80051bc:	4911      	ldr	r1, [pc, #68]	@ (8005204 <RCC_SetFlashLatency+0xf4>)
 80051be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051c4:	f7fb fbb4 	bl	8000930 <HAL_GetTick>
 80051c8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051ca:	e008      	b.n	80051de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051cc:	f7fb fbb0 	bl	8000930 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e007      	b.n	80051ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051de:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <RCC_SetFlashLatency+0xf4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d1ef      	bne.n	80051cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	374c      	adds	r7, #76	@ 0x4c
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	0800a688 	.word	0x0800a688
 80051fc:	0800a698 	.word	0x0800a698
 8005200:	0800a6a4 	.word	0x0800a6a4
 8005204:	58004000 	.word	0x58004000

08005208 <LL_RCC_LSE_IsEnabled>:
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <LL_RCC_LSE_IsEnabled+0x18>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <LL_RCC_LSE_IsEnabled+0x1a>
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_LSE_IsReady>:
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d101      	bne.n	8005244 <LL_RCC_LSE_IsReady+0x18>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <LL_RCC_LSE_IsReady+0x1a>
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_RCC_MSI_EnablePLLMode>:
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	6013      	str	r3, [r2, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <LL_RCC_SetRFWKPClockSource>:
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_SetSMPSClockSource>:
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_SetSMPSPrescaler>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4313      	orrs	r3, r2
 80052dc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_SetUSARTClockSource>:
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f023 0203 	bic.w	r2, r3, #3
 80052fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_RCC_SetLPUARTClockSource>:
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800532a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_RCC_SetI2CClockSource>:
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800535a:	43db      	mvns	r3, r3
 800535c:	401a      	ands	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_RCC_SetLPTIMClockSource>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005388:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	43db      	mvns	r3, r3
 8005394:	401a      	ands	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LL_RCC_SetSAIClockSource>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80053b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_RCC_SetRNGClockSource>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80053f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_RCC_SetCLK48ClockSource>:
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800541c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <LL_RCC_SetUSBClockSource>:
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ffe3 	bl	8005408 <LL_RCC_SetCLK48ClockSource>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <LL_RCC_SetADCClockSource>:
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800545e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <LL_RCC_SetRTCClockSource>:
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005486:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800548a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_GetRTCClockSource>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_RCC_ForceBackupDomainReset>:
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_RCC_ReleaseBackupDomainReset>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_PLLSAI1_Enable>:
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800550e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <LL_RCC_PLLSAI1_Disable>:
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800552c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005530:	6013      	str	r3, [r2, #0]
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_RCC_PLLSAI1_IsReady>:
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554e:	d101      	bne.n	8005554 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	43db      	mvns	r3, r3
 8005596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800559a:	4013      	ands	r3, r2
 800559c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b088      	sub	sp, #32
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80055b2:	2300      	movs	r3, #0
 80055b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80055b6:	2300      	movs	r3, #0
 80055b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d034      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055ce:	d021      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80055d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055d4:	d81b      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055da:	d01d      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e0:	d815      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80055e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ea:	d110      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80055fc:	e00d      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f988 	bl	8005918 <RCCEx_PLLSAI1_ConfigNP>
 8005608:	4603      	mov	r3, r0
 800560a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800560c:	e005      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	77fb      	strb	r3, [r7, #31]
        break;
 8005612:	e002      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561a:	7ffb      	ldrb	r3, [r7, #31]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fec3 	bl	80053b0 <LL_RCC_SetSAIClockSource>
 800562a:	e001      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	7ffb      	ldrb	r3, [r7, #31]
 800562e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005638:	2b00      	cmp	r3, #0
 800563a:	d046      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800563c:	f7ff ff31 	bl	80054a2 <LL_RCC_GetRTCClockSource>
 8005640:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	429a      	cmp	r2, r3
 800564a:	d03c      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800564c:	f7fe fc68 	bl	8003f20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff0b 	bl	8005476 <LL_RCC_SetRTCClockSource>
 8005660:	e02e      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800566c:	f7ff ff26 	bl	80054bc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005670:	f7ff ff35 	bl	80054de <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800568c:	f7ff fdbc 	bl	8005208 <LL_RCC_LSE_IsEnabled>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d114      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005696:	f7fb f94b 	bl	8000930 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800569c:	e00b      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fb f947 	bl	8000930 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d902      	bls.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	77fb      	strb	r3, [r7, #31]
              break;
 80056b4:	e004      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80056b6:	f7ff fdb9 	bl	800522c <LL_RCC_LSE_IsReady>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d1ee      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80056c0:	7ffb      	ldrb	r3, [r7, #31]
 80056c2:	77bb      	strb	r3, [r7, #30]
 80056c4:	e001      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	7ffb      	ldrb	r3, [r7, #31]
 80056c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fe05 	bl	80052ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fe10 	bl	8005316 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fe38 	bl	800537c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fe2d 	bl	800537c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fe05 	bl	8005342 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fdfa 	bl	8005342 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d022      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fe68 	bl	8005434 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576c:	d107      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800577c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005786:	d10b      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f91e 	bl	80059ce <RCCEx_PLLSAI1_ConfigNQ>
 8005792:	4603      	mov	r3, r0
 8005794:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005796:	7ffb      	ldrb	r3, [r7, #31]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800579c:	7ffb      	ldrb	r3, [r7, #31]
 800579e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b4:	d008      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057be:	d003      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fe05 	bl	80053dc <LL_RCC_SetRNGClockSource>
 80057d2:	e00a      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	2000      	movs	r0, #0
 80057e0:	f7ff fdfc 	bl	80053dc <LL_RCC_SetRNGClockSource>
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff fe0f 	bl	8005408 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005802:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d022      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fe18 	bl	800544a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005822:	d107      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800582e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005832:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800583c:	d10b      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f91e 	bl	8005a84 <RCCEx_PLLSAI1_ConfigNR>
 8005848:	4603      	mov	r3, r0
 800584a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800584c:	7ffb      	ldrb	r3, [r7, #31]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005852:	7ffb      	ldrb	r3, [r7, #31]
 8005854:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fd01 	bl	800526e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fd20 	bl	80052c2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd07 	bl	800529a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800588c:	7fbb      	ldrb	r3, [r7, #30]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800589a:	f7ff fcd9 	bl	8005250 <LL_RCC_MSI_EnablePLLMode>
}
 800589e:	bf00      	nop
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80058ac:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80058b0:	f7ff fe56 	bl	8005560 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80058b4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80058b8:	f7ff fe64 	bl	8005584 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80058e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005914 <HAL_RCCEx_CRSConfig+0x70>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80058ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005914 <HAL_RCCEx_CRSConfig+0x70>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	4906      	ldr	r1, [pc, #24]	@ (8005914 <HAL_RCCEx_CRSConfig+0x70>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80058fe:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_RCCEx_CRSConfig+0x70>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a04      	ldr	r2, [pc, #16]	@ (8005914 <HAL_RCCEx_CRSConfig+0x70>)
 8005904:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005908:	6013      	str	r3, [r2, #0]
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40006000 	.word	0x40006000

08005918 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005924:	f7ff fdfb 	bl	800551e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005928:	f7fb f802 	bl	8000930 <HAL_GetTick>
 800592c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800592e:	e009      	b.n	8005944 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005930:	f7fa fffe 	bl	8000930 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d902      	bls.n	8005944 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	73fb      	strb	r3, [r7, #15]
      break;
 8005942:	e004      	b.n	800594e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005944:	f7ff fdfa 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d137      	bne.n	80059c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005968:	4313      	orrs	r3, r2
 800596a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800597e:	4313      	orrs	r3, r2
 8005980:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005982:	f7ff fdbd 	bl	8005500 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fa ffd3 	bl	8000930 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800598c:	e009      	b.n	80059a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800598e:	f7fa ffcf 	bl	8000930 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d902      	bls.n	80059a2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	73fb      	strb	r3, [r7, #15]
        break;
 80059a0:	e004      	b.n	80059ac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059a2:	f7ff fdcb 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d1f0      	bne.n	800598e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059da:	f7ff fda0 	bl	800551e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059de:	f7fa ffa7 	bl	8000930 <HAL_GetTick>
 80059e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059e4:	e009      	b.n	80059fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059e6:	f7fa ffa3 	bl	8000930 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d902      	bls.n	80059fa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	73fb      	strb	r3, [r7, #15]
      break;
 80059f8:	e004      	b.n	8005a04 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059fa:	f7ff fd9f 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d137      	bne.n	8005a7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a38:	f7ff fd62 	bl	8005500 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fa ff78 	bl	8000930 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a44:	f7fa ff74 	bl	8000930 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
        break;
 8005a56:	e004      	b.n	8005a62 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a58:	f7ff fd70 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d1f0      	bne.n	8005a44 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a90:	f7ff fd45 	bl	800551e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a94:	f7fa ff4c 	bl	8000930 <HAL_GetTick>
 8005a98:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a9a:	e009      	b.n	8005ab0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a9c:	f7fa ff48 	bl	8000930 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d902      	bls.n	8005ab0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	73fb      	strb	r3, [r7, #15]
      break;
 8005aae:	e004      	b.n	8005aba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ab0:	f7ff fd44 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d137      	bne.n	8005b30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aea:	4313      	orrs	r3, r2
 8005aec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005aee:	f7ff fd07 	bl	8005500 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af2:	f7fa ff1d 	bl	8000930 <HAL_GetTick>
 8005af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005af8:	e009      	b.n	8005b0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005afa:	f7fa ff19 	bl	8000930 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d902      	bls.n	8005b0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b0c:	e004      	b.n	8005b18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b0e:	f7ff fd15 	bl	800553c <LL_RCC_PLLSAI1_IsReady>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d1f0      	bne.n	8005afa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d108      	bne.n	8005b30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b4a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b70:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005b74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	43db      	mvns	r3, r3
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4013      	ands	r3, r2
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b09d      	sub	sp, #116	@ 0x74
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	78db      	ldrb	r3, [r3, #3]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d81f      	bhi.n	8005c4e <USB_ActivateEndpoint+0x72>
 8005c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <USB_ActivateEndpoint+0x38>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c25 	.word	0x08005c25
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c57 	.word	0x08005c57
 8005c20:	08005c33 	.word	0x08005c33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c30:	e012      	b.n	8005c58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c36:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005c3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c3e:	e00b      	b.n	8005c58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c4c:	e004      	b.n	8005c58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005c54:	e000      	b.n	8005c58 <USB_ActivateEndpoint+0x7c>
      break;
 8005c56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	b21a      	sxth	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	b21b      	sxth	r3, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b21b      	sxth	r3, r3
 8005c9e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	7b1b      	ldrb	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 8178 	bne.w	8005fbe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8084 	beq.w	8005de0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	4413      	add	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	00da      	lsls	r2, r3, #3
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	88db      	ldrh	r3, [r3, #6]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	827b      	strh	r3, [r7, #18]
 8005d1a:	8a7b      	ldrh	r3, [r7, #18]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01b      	beq.n	8005d5c <USB_ActivateEndpoint+0x180>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3a:	823b      	strh	r3, [r7, #16]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	8a3b      	ldrh	r3, [r7, #16]
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	78db      	ldrb	r3, [r3, #3]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d020      	beq.n	8005da6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7a:	81bb      	strh	r3, [r7, #12]
 8005d7c:	89bb      	ldrh	r3, [r7, #12]
 8005d7e:	f083 0320 	eor.w	r3, r3, #32
 8005d82:	81bb      	strh	r3, [r7, #12]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	89bb      	ldrh	r3, [r7, #12]
 8005d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	8013      	strh	r3, [r2, #0]
 8005da4:	e2d5      	b.n	8006352 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	81fb      	strh	r3, [r7, #14]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	89fb      	ldrh	r3, [r7, #14]
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]
 8005dde:	e2b8      	b.n	8006352 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	4413      	add	r3, r2
 8005df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	00da      	lsls	r2, r3, #3
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	88db      	ldrh	r3, [r3, #6]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	4413      	add	r3, r2
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	00da      	lsls	r2, r3, #3
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e4e:	d91d      	bls.n	8005e8c <USB_ActivateEndpoint+0x2b0>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <USB_ActivateEndpoint+0x28e>
 8005e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e66:	3b01      	subs	r3, #1
 8005e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e026      	b.n	8005eda <USB_ActivateEndpoint+0x2fe>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <USB_ActivateEndpoint+0x2ce>
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e017      	b.n	8005eda <USB_ActivateEndpoint+0x2fe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <USB_ActivateEndpoint+0x2e8>
 8005ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ee8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01b      	beq.n	8005f2a <USB_ActivateEndpoint+0x34e>
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f08:	843b      	strh	r3, [r7, #32]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	8c3b      	ldrh	r3, [r7, #32]
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d124      	bne.n	8005f7c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f48:	83bb      	strh	r3, [r7, #28]
 8005f4a:	8bbb      	ldrh	r3, [r7, #28]
 8005f4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f50:	83bb      	strh	r3, [r7, #28]
 8005f52:	8bbb      	ldrh	r3, [r7, #28]
 8005f54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f58:	83bb      	strh	r3, [r7, #28]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	8bbb      	ldrh	r3, [r7, #28]
 8005f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	8013      	strh	r3, [r2, #0]
 8005f7a:	e1ea      	b.n	8006352 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f92:	83fb      	strh	r3, [r7, #30]
 8005f94:	8bfb      	ldrh	r3, [r7, #30]
 8005f96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f9a:	83fb      	strh	r3, [r7, #30]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	8bfb      	ldrh	r3, [r7, #30]
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]
 8005fbc:	e1c9      	b.n	8006352 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	78db      	ldrb	r3, [r3, #3]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d11e      	bne.n	8006004 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fdc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	8013      	strh	r3, [r2, #0]
 8006002:	e01d      	b.n	8006040 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006050:	4413      	add	r3, r2
 8006052:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	00da      	lsls	r2, r3, #3
 800605a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800605c:	4413      	add	r3, r2
 800605e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006062:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	891b      	ldrh	r3, [r3, #8]
 8006068:	085b      	lsrs	r3, r3, #1
 800606a:	b29b      	uxth	r3, r3
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	657b      	str	r3, [r7, #84]	@ 0x54
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800607e:	b29b      	uxth	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006084:	4413      	add	r3, r2
 8006086:	657b      	str	r3, [r7, #84]	@ 0x54
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00da      	lsls	r2, r3, #3
 800608e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006090:	4413      	add	r3, r2
 8006092:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006096:	653b      	str	r3, [r7, #80]	@ 0x50
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	895b      	ldrh	r3, [r3, #10]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	b29b      	uxth	r3, r3
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 8093 	bne.w	80061d8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80060c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01b      	beq.n	8006106 <USB_ActivateEndpoint+0x52a>
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80060f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006114:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01b      	beq.n	8006156 <USB_ActivateEndpoint+0x57a>
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006134:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800616e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006174:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006176:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006178:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800617c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	8013      	strh	r3, [r2, #0]
 80061d6:	e0bc      	b.n	8006352 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80061e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01d      	beq.n	8006230 <USB_ActivateEndpoint+0x654>
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006240:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01d      	beq.n	8006288 <USB_ActivateEndpoint+0x6ac>
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800627c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006280:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006284:	b29b      	uxth	r3, r3
 8006286:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	78db      	ldrb	r3, [r3, #3]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d024      	beq.n	80062da <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062ae:	f083 0320 	eor.w	r3, r3, #32
 80062b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]
 80062d8:	e01d      	b.n	8006316 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800633e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634e:	b29b      	uxth	r3, r3
 8006350:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006352:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006356:	4618      	mov	r0, r3
 8006358:	3774      	adds	r7, #116	@ 0x74
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop

08006364 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006364:	b480      	push	{r7}
 8006366:	b08d      	sub	sp, #52	@ 0x34
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	7b1b      	ldrb	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 808e 	bne.w	8006494 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d044      	beq.n	800640a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	81bb      	strh	r3, [r7, #12]
 800638e:	89bb      	ldrh	r3, [r7, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <USB_DeactivateEndpoint+0x6c>
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ae:	817b      	strh	r3, [r7, #10]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	897b      	ldrh	r3, [r7, #10]
 80063bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e6:	813b      	strh	r3, [r7, #8]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	893b      	ldrh	r3, [r7, #8]
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]
 8006408:	e192      	b.n	8006730 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	827b      	strh	r3, [r7, #18]
 8006418:	8a7b      	ldrh	r3, [r7, #18]
 800641a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <USB_DeactivateEndpoint+0xf6>
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006438:	823b      	strh	r3, [r7, #16]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	8a3b      	ldrh	r3, [r7, #16]
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800646c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006470:	81fb      	strh	r3, [r7, #14]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	89fb      	ldrh	r3, [r7, #14]
 800647e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648e:	b29b      	uxth	r3, r3
 8006490:	8013      	strh	r3, [r2, #0]
 8006492:	e14d      	b.n	8006730 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f040 80a5 	bne.w	80065e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	843b      	strh	r3, [r7, #32]
 80064ac:	8c3b      	ldrh	r3, [r7, #32]
 80064ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01b      	beq.n	80064ee <USB_DeactivateEndpoint+0x18a>
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064cc:	83fb      	strh	r3, [r7, #30]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	8bfb      	ldrh	r3, [r7, #30]
 80064da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	83bb      	strh	r3, [r7, #28]
 80064fc:	8bbb      	ldrh	r3, [r7, #28]
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01b      	beq.n	800653e <USB_DeactivateEndpoint+0x1da>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	837b      	strh	r3, [r7, #26]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	8b7b      	ldrh	r3, [r7, #26]
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006536:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006554:	833b      	strh	r3, [r7, #24]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	8b3b      	ldrh	r3, [r7, #24]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658c:	82fb      	strh	r3, [r7, #22]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	8afb      	ldrh	r3, [r7, #22]
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c4:	82bb      	strh	r3, [r7, #20]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	8abb      	ldrh	r3, [r7, #20]
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]
 80065e6:	e0a3      	b.n	8006730 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80065f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80065f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <USB_DeactivateEndpoint+0x2d4>
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006616:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006634:	b29b      	uxth	r3, r3
 8006636:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006646:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01b      	beq.n	8006688 <USB_DeactivateEndpoint+0x324>
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	441a      	add	r2, r3
 8006672:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800667c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006680:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800670a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800670e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3734      	adds	r7, #52	@ 0x34
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b0c2      	sub	sp, #264	@ 0x108
 8006742:	af00      	add	r7, sp, #0
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006756:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	2b01      	cmp	r3, #1
 8006766:	f040 86b7 	bne.w	80074d8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800676a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	d908      	bls.n	8006798 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006796:	e007      	b.n	80067a8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	7b1b      	ldrb	r3, [r3, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d13a      	bne.n	800682e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	88da      	ldrh	r2, [r3, #6]
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	f001 fcc2 	bl	8008168 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067fe:	b29b      	uxth	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	00da      	lsls	r2, r3, #3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4413      	add	r3, r2
 800681a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	f000 be1f 	b.w	800746c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	78db      	ldrb	r3, [r3, #3]
 800683a:	2b02      	cmp	r3, #2
 800683c:	f040 8462 	bne.w	8007104 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	f240 83df 	bls.w	800701c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800685e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006884:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 81c7 	beq.w	8006c8e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	633b      	str	r3, [r7, #48]	@ 0x30
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d177      	bne.n	8006a0c <USB_EPStartXfer+0x2ce>
 800691c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	4413      	add	r3, r2
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	00da      	lsls	r2, r3, #3
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	4413      	add	r3, r2
 8006952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006962:	b29a      	uxth	r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	2b3e      	cmp	r3, #62	@ 0x3e
 800696e:	d921      	bls.n	80069b4 <USB_EPStartXfer+0x276>
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USB_EPStartXfer+0x252>
 8006986:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800698a:	3b01      	subs	r3, #1
 800698c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e050      	b.n	8006a56 <USB_EPStartXfer+0x318>
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <USB_EPStartXfer+0x294>
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	801a      	strh	r2, [r3, #0]
 80069d0:	e041      	b.n	8006a56 <USB_EPStartXfer+0x318>
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <USB_EPStartXfer+0x2b4>
 80069e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069ec:	3301      	adds	r3, #1
 80069ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	029b      	lsls	r3, r3, #10
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	801a      	strh	r2, [r3, #0]
 8006a0a:	e024      	b.n	8006a56 <USB_EPStartXfer+0x318>
 8006a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d11c      	bne.n	8006a56 <USB_EPStartXfer+0x318>
 8006a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	4413      	add	r3, r2
 8006a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	00da      	lsls	r2, r3, #3
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	4413      	add	r3, r2
 8006a46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	895b      	ldrh	r3, [r3, #10]
 8006a62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6959      	ldr	r1, [r3, #20]
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a84:	6800      	ldr	r0, [r0, #0]
 8006a86:	f001 fb6f 	bl	8008168 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9a:	441a      	add	r2, r3
 8006a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90f      	bls.n	8006ae4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	1ad2      	subs	r2, r2, r3
 8006ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	621a      	str	r2, [r3, #32]
 8006ae2:	e00e      	b.n	8006b02 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d177      	bne.n	8006c02 <USB_EPStartXfer+0x4c4>
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	00da      	lsls	r2, r3, #3
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	4413      	add	r3, r2
 8006b48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b64:	d921      	bls.n	8006baa <USB_EPStartXfer+0x46c>
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USB_EPStartXfer+0x448>
 8006b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e056      	b.n	8006c58 <USB_EPStartXfer+0x51a>
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <USB_EPStartXfer+0x48a>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e047      	b.n	8006c58 <USB_EPStartXfer+0x51a>
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <USB_EPStartXfer+0x4aa>
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be2:	3301      	adds	r3, #1
 8006be4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e02a      	b.n	8006c58 <USB_EPStartXfer+0x51a>
 8006c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d122      	bne.n	8006c58 <USB_EPStartXfer+0x51a>
 8006c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	4413      	add	r3, r2
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	00da      	lsls	r2, r3, #3
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	4413      	add	r3, r2
 8006c48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	891b      	ldrh	r3, [r3, #8]
 8006c64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6959      	ldr	r1, [r3, #20]
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c7e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c82:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	f001 fa6e 	bl	8008168 <USB_WritePMA>
 8006c8c:	e3ee      	b.n	800746c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d177      	bne.n	8006d8e <USB_EPStartXfer+0x650>
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbe:	4413      	add	r3, r2
 8006cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	00da      	lsls	r2, r3, #3
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf0:	d921      	bls.n	8006d36 <USB_EPStartXfer+0x5f8>
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <USB_EPStartXfer+0x5d4>
 8006d08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	029b      	lsls	r3, r3, #10
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4313      	orrs	r3, r2
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e056      	b.n	8006de4 <USB_EPStartXfer+0x6a6>
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <USB_EPStartXfer+0x616>
 8006d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e047      	b.n	8006de4 <USB_EPStartXfer+0x6a6>
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <USB_EPStartXfer+0x636>
 8006d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	029b      	lsls	r3, r3, #10
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	e02a      	b.n	8006de4 <USB_EPStartXfer+0x6a6>
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d122      	bne.n	8006de4 <USB_EPStartXfer+0x6a6>
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dbe:	4413      	add	r3, r2
 8006dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	00da      	lsls	r2, r3, #3
 8006dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	891b      	ldrh	r3, [r3, #8]
 8006df0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	f001 f9a8 	bl	8008168 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	441a      	add	r2, r3
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d90f      	bls.n	8006e72 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6a1a      	ldr	r2, [r3, #32]
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	621a      	str	r2, [r3, #32]
 8006e70:	e00e      	b.n	8006e90 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d177      	bne.n	8006f9c <USB_EPStartXfer+0x85e>
 8006eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	4413      	add	r3, r2
 8006ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	00da      	lsls	r2, r3, #3
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006efe:	d921      	bls.n	8006f44 <USB_EPStartXfer+0x806>
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <USB_EPStartXfer+0x7e2>
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	e050      	b.n	8006fe6 <USB_EPStartXfer+0x8a8>
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <USB_EPStartXfer+0x824>
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	801a      	strh	r2, [r3, #0]
 8006f60:	e041      	b.n	8006fe6 <USB_EPStartXfer+0x8a8>
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <USB_EPStartXfer+0x844>
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e024      	b.n	8006fe6 <USB_EPStartXfer+0x8a8>
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d11c      	bne.n	8006fe6 <USB_EPStartXfer+0x8a8>
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc0:	4413      	add	r3, r2
 8006fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	00da      	lsls	r2, r3, #3
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	895b      	ldrh	r3, [r3, #10]
 8006ff2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6959      	ldr	r1, [r3, #20]
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	b29b      	uxth	r3, r3
 8007008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800700c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007010:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007014:	6800      	ldr	r0, [r0, #0]
 8007016:	f001 f8a7 	bl	8008168 <USB_WritePMA>
 800701a:	e227      	b.n	800746c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800701c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800702c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800704e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007052:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a8:	4413      	add	r3, r2
 80070aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	00da      	lsls	r2, r3, #3
 80070ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070bc:	4413      	add	r3, r2
 80070be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	891b      	ldrh	r3, [r3, #8]
 80070da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6959      	ldr	r1, [r3, #20]
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f001 f833 	bl	8008168 <USB_WritePMA>
 8007102:	e1b3      	b.n	800746c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 80c6 	beq.w	80072d6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800714a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	673b      	str	r3, [r7, #112]	@ 0x70
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d177      	bne.n	8007256 <USB_EPStartXfer+0xb18>
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007180:	b29b      	uxth	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007186:	4413      	add	r3, r2
 8007188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	00da      	lsls	r2, r3, #3
 8007198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800719a:	4413      	add	r3, r2
 800719c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80071a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80071b8:	d921      	bls.n	80071fe <USB_EPStartXfer+0xac0>
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <USB_EPStartXfer+0xa9c>
 80071d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80071d4:	3b01      	subs	r3, #1
 80071d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	e050      	b.n	80072a0 <USB_EPStartXfer+0xb62>
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <USB_EPStartXfer+0xade>
 8007206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007214:	b29a      	uxth	r2, r3
 8007216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e041      	b.n	80072a0 <USB_EPStartXfer+0xb62>
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <USB_EPStartXfer+0xafe>
 8007232:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007236:	3301      	adds	r3, #1
 8007238:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800723c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29b      	uxth	r3, r3
 800724c:	4313      	orrs	r3, r2
 800724e:	b29a      	uxth	r2, r3
 8007250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007252:	801a      	strh	r2, [r3, #0]
 8007254:	e024      	b.n	80072a0 <USB_EPStartXfer+0xb62>
 8007256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d11c      	bne.n	80072a0 <USB_EPStartXfer+0xb62>
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007274:	b29b      	uxth	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800727a:	4413      	add	r3, r2
 800727c:	673b      	str	r3, [r7, #112]	@ 0x70
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	00da      	lsls	r2, r3, #3
 800728c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800728e:	4413      	add	r3, r2
 8007290:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007294:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729a:	b29a      	uxth	r2, r3
 800729c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800729e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	895b      	ldrh	r3, [r3, #10]
 80072ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6959      	ldr	r1, [r3, #20]
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072ce:	6800      	ldr	r0, [r0, #0]
 80072d0:	f000 ff4a 	bl	8008168 <USB_WritePMA>
 80072d4:	e0ca      	b.n	800746c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d177      	bne.n	80073d6 <USB_EPStartXfer+0xc98>
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007300:	b29b      	uxth	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007306:	4413      	add	r3, r2
 8007308:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800730a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	00da      	lsls	r2, r3, #3
 8007318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800731a:	4413      	add	r3, r2
 800731c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800732c:	b29a      	uxth	r2, r3
 800732e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007330:	801a      	strh	r2, [r3, #0]
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	2b3e      	cmp	r3, #62	@ 0x3e
 8007338:	d921      	bls.n	800737e <USB_EPStartXfer+0xc40>
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <USB_EPStartXfer+0xc1c>
 8007350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007354:	3b01      	subs	r3, #1
 8007356:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800735a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29a      	uxth	r2, r3
 8007360:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007364:	b29b      	uxth	r3, r3
 8007366:	029b      	lsls	r3, r3, #10
 8007368:	b29b      	uxth	r3, r3
 800736a:	4313      	orrs	r3, r2
 800736c:	b29b      	uxth	r3, r3
 800736e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007376:	b29a      	uxth	r2, r3
 8007378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	e05c      	b.n	8007438 <USB_EPStartXfer+0xcfa>
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <USB_EPStartXfer+0xc5e>
 8007386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e04d      	b.n	8007438 <USB_EPStartXfer+0xcfa>
 800739c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <USB_EPStartXfer+0xc7e>
 80073b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073b6:	3301      	adds	r3, #1
 80073b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	029b      	lsls	r3, r3, #10
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	4313      	orrs	r3, r2
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	e030      	b.n	8007438 <USB_EPStartXfer+0xcfa>
 80073d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d128      	bne.n	8007438 <USB_EPStartXfer+0xcfa>
 80073e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007402:	b29b      	uxth	r3, r3
 8007404:	461a      	mov	r2, r3
 8007406:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800740a:	4413      	add	r3, r2
 800740c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	00da      	lsls	r2, r3, #3
 800741e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007422:	4413      	add	r3, r2
 8007424:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	b29a      	uxth	r2, r3
 8007432:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007436:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	891b      	ldrh	r3, [r3, #8]
 8007444:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6959      	ldr	r1, [r3, #20]
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007458:	b29b      	uxth	r3, r3
 800745a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800745e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007462:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	f000 fe7e 	bl	8008168 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800748e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007492:	817b      	strh	r3, [r7, #10]
 8007494:	897b      	ldrh	r3, [r7, #10]
 8007496:	f083 0310 	eor.w	r3, r3, #16
 800749a:	817b      	strh	r3, [r7, #10]
 800749c:	897b      	ldrh	r3, [r7, #10]
 800749e:	f083 0320 	eor.w	r3, r3, #32
 80074a2:	817b      	strh	r3, [r7, #10]
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	897b      	ldrh	r3, [r7, #10]
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]
 80074d4:	f000 bcde 	b.w	8007e94 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	7b1b      	ldrb	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f040 80bb 	bne.w	8007660 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	d917      	bls.n	8007536 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	619a      	str	r2, [r3, #24]
 8007534:	e00e      	b.n	8007554 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007578:	4413      	add	r3, r2
 800757a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	00da      	lsls	r2, r3, #3
 800758c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007590:	4413      	add	r3, r2
 8007592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800759a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075b4:	d924      	bls.n	8007600 <USB_EPStartXfer+0xec2>
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <USB_EPStartXfer+0xe98>
 80075cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80075d0:	3b01      	subs	r3, #1
 80075d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	029b      	lsls	r3, r3, #10
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	f000 bc10 	b.w	8007e20 <USB_EPStartXfer+0x16e2>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10c      	bne.n	8007622 <USB_EPStartXfer+0xee4>
 8007608:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e3fe      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800762c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <USB_EPStartXfer+0xf04>
 8007638:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800763c:	3301      	adds	r3, #1
 800763e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29a      	uxth	r2, r3
 800764a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800764e:	b29b      	uxth	r3, r3
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	b29b      	uxth	r3, r3
 8007654:	4313      	orrs	r3, r2
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800765c:	801a      	strh	r2, [r3, #0]
 800765e:	e3df      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	78db      	ldrb	r3, [r3, #3]
 800766c:	2b02      	cmp	r3, #2
 800766e:	f040 8218 	bne.w	8007aa2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f040 809d 	bne.w	80077be <USB_EPStartXfer+0x1080>
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076a8:	4413      	add	r3, r2
 80076aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	00da      	lsls	r2, r3, #3
 80076bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ec:	d92b      	bls.n	8007746 <USB_EPStartXfer+0x1008>
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <USB_EPStartXfer+0xfe0>
 8007714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007718:	3b01      	subs	r3, #1
 800771a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800771e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800772a:	b29b      	uxth	r3, r3
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	b29b      	uxth	r3, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e070      	b.n	8007828 <USB_EPStartXfer+0x10ea>
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10c      	bne.n	8007770 <USB_EPStartXfer+0x1032>
 8007756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e05b      	b.n	8007828 <USB_EPStartXfer+0x10ea>
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <USB_EPStartXfer+0x1062>
 8007796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779a:	3301      	adds	r3, #1
 800779c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	029b      	lsls	r3, r3, #10
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4313      	orrs	r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	e034      	b.n	8007828 <USB_EPStartXfer+0x10ea>
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d12c      	bne.n	8007828 <USB_EPStartXfer+0x10ea>
 80077ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077f2:	4413      	add	r3, r2
 80077f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00da      	lsls	r2, r3, #3
 8007806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800780a:	4413      	add	r3, r2
 800780c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	b29a      	uxth	r2, r3
 8007822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 809d 	bne.w	8007982 <USB_EPStartXfer+0x1244>
 8007848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007864:	b29b      	uxth	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800786c:	4413      	add	r3, r2
 800786e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	00da      	lsls	r2, r3, #3
 8007880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007884:	4413      	add	r3, r2
 8007886:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800788a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800788e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80078b0:	d92b      	bls.n	800790a <USB_EPStartXfer+0x11cc>
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d104      	bne.n	80078e2 <USB_EPStartXfer+0x11a4>
 80078d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078dc:	3b01      	subs	r3, #1
 80078de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e069      	b.n	80079de <USB_EPStartXfer+0x12a0>
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10c      	bne.n	8007934 <USB_EPStartXfer+0x11f6>
 800791a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e054      	b.n	80079de <USB_EPStartXfer+0x12a0>
 8007934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <USB_EPStartXfer+0x1226>
 800795a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800795e:	3301      	adds	r3, #1
 8007960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007970:	b29b      	uxth	r3, r3
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e02d      	b.n	80079de <USB_EPStartXfer+0x12a0>
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d125      	bne.n	80079de <USB_EPStartXfer+0x12a0>
 8007992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079a8:	4413      	add	r3, r2
 80079aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	00da      	lsls	r2, r3, #3
 80079bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079c0:	4413      	add	r3, r2
 80079c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80079c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8218 	beq.w	8007e20 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <USB_EPStartXfer+0x12ea>
 8007a1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f040 81f5 	bne.w	8007e20 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 81ee 	bne.w	8007e20 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a6a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	441a      	add	r2, r3
 8007a88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	8013      	strh	r3, [r2, #0]
 8007aa0:	e1be      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	78db      	ldrb	r3, [r3, #3]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	f040 81b4 	bne.w	8007e1c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d917      	bls.n	8007b00 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	619a      	str	r2, [r3, #24]
 8007afe:	e00e      	b.n	8007b1e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 8085 	bne.w	8007c3a <USB_EPStartXfer+0x14fc>
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b54:	4413      	add	r3, r2
 8007b56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	00da      	lsls	r2, r3, #3
 8007b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b90:	d923      	bls.n	8007bda <USB_EPStartXfer+0x149c>
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d104      	bne.n	8007bb2 <USB_EPStartXfer+0x1474>
 8007ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bac:	3b01      	subs	r3, #1
 8007bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bd6:	801a      	strh	r2, [r3, #0]
 8007bd8:	e060      	b.n	8007c9c <USB_EPStartXfer+0x155e>
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10c      	bne.n	8007bfc <USB_EPStartXfer+0x14be>
 8007be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	e04f      	b.n	8007c9c <USB_EPStartXfer+0x155e>
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	085b      	lsrs	r3, r3, #1
 8007c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d004      	beq.n	8007c1c <USB_EPStartXfer+0x14de>
 8007c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c16:	3301      	adds	r3, #1
 8007c18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e030      	b.n	8007c9c <USB_EPStartXfer+0x155e>
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d128      	bne.n	8007c9c <USB_EPStartXfer+0x155e>
 8007c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c6e:	4413      	add	r3, r2
 8007c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00da      	lsls	r2, r3, #3
 8007c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c86:	4413      	add	r3, r2
 8007c88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8085 	bne.w	8007dc6 <USB_EPStartXfer+0x1688>
 8007cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	00da      	lsls	r2, r3, #3
 8007cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d1c:	d923      	bls.n	8007d66 <USB_EPStartXfer+0x1628>
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <USB_EPStartXfer+0x1600>
 8007d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	029b      	lsls	r3, r3, #10
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4313      	orrs	r3, r2
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e05c      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10c      	bne.n	8007d88 <USB_EPStartXfer+0x164a>
 8007d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	e04b      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
 8007d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <USB_EPStartXfer+0x166a>
 8007d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007da2:	3301      	adds	r3, #1
 8007da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	029b      	lsls	r3, r3, #10
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dc2:	801a      	strh	r2, [r3, #0]
 8007dc4:	e02c      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
 8007dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d124      	bne.n	8007e20 <USB_EPStartXfer+0x16e2>
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007dec:	4413      	add	r3, r2
 8007dee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	00da      	lsls	r2, r3, #3
 8007e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e001      	b.n	8007e20 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e03a      	b.n	8007e96 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e52:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d020      	beq.n	8007ef4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ec8:	81bb      	strh	r3, [r7, #12]
 8007eca:	89bb      	ldrh	r3, [r7, #12]
 8007ecc:	f083 0310 	eor.w	r3, r3, #16
 8007ed0:	81bb      	strh	r3, [r7, #12]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	441a      	add	r2, r3
 8007edc:	89bb      	ldrh	r3, [r7, #12]
 8007ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	8013      	strh	r3, [r2, #0]
 8007ef2:	e01f      	b.n	8007f34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0a:	81fb      	strh	r3, [r7, #14]
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f12:	81fb      	strh	r3, [r7, #14]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	89fb      	ldrh	r3, [r7, #14]
 8007f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b087      	sub	sp, #28
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	7b1b      	ldrb	r3, [r3, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 809d 	bne.w	8008090 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04c      	beq.n	8007ff8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	823b      	strh	r3, [r7, #16]
 8007f6c:	8a3b      	ldrh	r3, [r7, #16]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01b      	beq.n	8007fae <USB_EPClearStall+0x6c>
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8c:	81fb      	strh	r3, [r7, #14]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	441a      	add	r2, r3
 8007f98:	89fb      	ldrh	r3, [r7, #14]
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	78db      	ldrb	r3, [r3, #3]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d06c      	beq.n	8008090 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fcc:	81bb      	strh	r3, [r7, #12]
 8007fce:	89bb      	ldrh	r3, [r7, #12]
 8007fd0:	f083 0320 	eor.w	r3, r3, #32
 8007fd4:	81bb      	strh	r3, [r7, #12]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	89bb      	ldrh	r3, [r7, #12]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]
 8007ff6:	e04b      	b.n	8008090 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	82fb      	strh	r3, [r7, #22]
 8008006:	8afb      	ldrh	r3, [r7, #22]
 8008008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <USB_EPClearStall+0x106>
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008026:	82bb      	strh	r3, [r7, #20]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	441a      	add	r2, r3
 8008032:	8abb      	ldrh	r3, [r7, #20]
 8008034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800803c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008044:	b29b      	uxth	r3, r3
 8008046:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805e:	827b      	strh	r3, [r7, #18]
 8008060:	8a7b      	ldrh	r3, [r7, #18]
 8008062:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008066:	827b      	strh	r3, [r7, #18]
 8008068:	8a7b      	ldrh	r3, [r7, #18]
 800806a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800806e:	827b      	strh	r3, [r7, #18]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	441a      	add	r2, r3
 800807a:	8a7b      	ldrh	r3, [r7, #18]
 800807c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808c:	b29b      	uxth	r3, r3
 800808e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2280      	movs	r2, #128	@ 0x80
 80080b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008102:	b29b      	uxth	r3, r3
 8008104:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= (uint16_t)USB_CNTR_RESUME;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008122:	b29b      	uxth	r3, r3
 8008124:	f043 0310 	orr.w	r3, r3, #16
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800814c:	b29b      	uxth	r3, r3
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008168:	b480      	push	{r7}
 800816a:	b08b      	sub	sp, #44	@ 0x2c
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4611      	mov	r1, r2
 8008174:	461a      	mov	r2, r3
 8008176:	460b      	mov	r3, r1
 8008178:	80fb      	strh	r3, [r7, #6]
 800817a:	4613      	mov	r3, r2
 800817c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800817e:	88bb      	ldrh	r3, [r7, #4]
 8008180:	3301      	adds	r3, #1
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008198:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
 800819e:	e01b      	b.n	80081d8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3301      	adds	r3, #1
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	b21a      	sxth	r2, r3
 80081b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	8a7a      	ldrh	r2, [r7, #18]
 80081be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	3302      	adds	r3, #2
 80081c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3301      	adds	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	3b01      	subs	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e0      	bne.n	80081a0 <USB_WritePMA+0x38>
  }
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	372c      	adds	r7, #44	@ 0x2c
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b08b      	sub	sp, #44	@ 0x2c
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4611      	mov	r1, r2
 80081f8:	461a      	mov	r2, r3
 80081fa:	460b      	mov	r3, r1
 80081fc:	80fb      	strh	r3, [r7, #6]
 80081fe:	4613      	mov	r3, r2
 8008200:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008202:	88bb      	ldrh	r3, [r7, #4]
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	b29b      	uxth	r3, r3
 8008208:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008212:	88fa      	ldrh	r2, [r7, #6]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800821c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
 8008222:	e018      	b.n	8008256 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	3302      	adds	r3, #2
 8008230:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	b2da      	uxtb	r2, r3
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	3301      	adds	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b2da      	uxtb	r2, r3
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	3301      	adds	r3, #1
 800824e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	3b01      	subs	r3, #1
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e3      	bne.n	8008224 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800825c:	88bb      	ldrh	r3, [r7, #4]
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	701a      	strb	r2, [r3, #0]
  }
}
 8008278:	bf00      	nop
 800827a:	372c      	adds	r7, #44	@ 0x2c
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008290:	2010      	movs	r0, #16
 8008292:	f002 f975 	bl	800a580 <USBD_static_malloc>
 8008296:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	32b0      	adds	r2, #176	@ 0xb0
 80082a8:	2100      	movs	r1, #0
 80082aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e048      	b.n	8008344 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	32b0      	adds	r2, #176	@ 0xb0
 80082bc:	68f9      	ldr	r1, [r7, #12]
 80082be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	32b0      	adds	r2, #176	@ 0xb0
 80082cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7c1b      	ldrb	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10d      	bne.n	80082fa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80082de:	4b1b      	ldr	r3, [pc, #108]	@ (800834c <USBD_HID_Init+0xc8>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	f003 020f 	and.w	r2, r3, #15
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	3326      	adds	r3, #38	@ 0x26
 80082f4:	2207      	movs	r2, #7
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e00c      	b.n	8008314 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80082fa:	4b14      	ldr	r3, [pc, #80]	@ (800834c <USBD_HID_Init+0xc8>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 020f 	and.w	r2, r3, #15
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	3326      	adds	r3, #38	@ 0x26
 8008310:	220a      	movs	r2, #10
 8008312:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008314:	4b0d      	ldr	r3, [pc, #52]	@ (800834c <USBD_HID_Init+0xc8>)
 8008316:	7819      	ldrb	r1, [r3, #0]
 8008318:	2304      	movs	r3, #4
 800831a:	2203      	movs	r2, #3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 ffe8 	bl	800a2f2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008322:	4b0a      	ldr	r3, [pc, #40]	@ (800834c <USBD_HID_Init+0xc8>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3324      	adds	r3, #36	@ 0x24
 8008338:	2201      	movs	r2, #1
 800833a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	200000be 	.word	0x200000be

08008350 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800835c:	4b1f      	ldr	r3, [pc, #124]	@ (80083dc <USBD_HID_DeInit+0x8c>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 ffeb 	bl	800a33e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008368:	4b1c      	ldr	r3, [pc, #112]	@ (80083dc <USBD_HID_DeInit+0x8c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3324      	adds	r3, #36	@ 0x24
 800837e:	2200      	movs	r2, #0
 8008380:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008382:	4b16      	ldr	r3, [pc, #88]	@ (80083dc <USBD_HID_DeInit+0x8c>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	f003 020f 	and.w	r2, r3, #15
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	3326      	adds	r3, #38	@ 0x26
 8008398:	2200      	movs	r2, #0
 800839a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32b0      	adds	r2, #176	@ 0xb0
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	32b0      	adds	r2, #176	@ 0xb0
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 f8ed 	bl	800a59c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	32b0      	adds	r2, #176	@ 0xb0
 80083cc:	2100      	movs	r1, #0
 80083ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200000be 	.word	0x200000be

080083e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	32b0      	adds	r2, #176	@ 0xb0
 80083f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e0e8      	b.n	80085de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008414:	2b00      	cmp	r3, #0
 8008416:	d046      	beq.n	80084a6 <USBD_HID_Setup+0xc6>
 8008418:	2b20      	cmp	r3, #32
 800841a:	f040 80d8 	bne.w	80085ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	3b02      	subs	r3, #2
 8008424:	2b09      	cmp	r3, #9
 8008426:	d836      	bhi.n	8008496 <USBD_HID_Setup+0xb6>
 8008428:	a201      	add	r2, pc, #4	@ (adr r2, 8008430 <USBD_HID_Setup+0x50>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008487 	.word	0x08008487
 8008434:	08008467 	.word	0x08008467
 8008438:	08008497 	.word	0x08008497
 800843c:	08008497 	.word	0x08008497
 8008440:	08008497 	.word	0x08008497
 8008444:	08008497 	.word	0x08008497
 8008448:	08008497 	.word	0x08008497
 800844c:	08008497 	.word	0x08008497
 8008450:	08008475 	.word	0x08008475
 8008454:	08008459 	.word	0x08008459
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	885b      	ldrh	r3, [r3, #2]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	601a      	str	r2, [r3, #0]
          break;
 8008464:	e01e      	b.n	80084a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f001 fb71 	bl	8009b54 <USBD_CtlSendData>
          break;
 8008472:	e017      	b.n	80084a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	885b      	ldrh	r3, [r3, #2]
 8008478:	0a1b      	lsrs	r3, r3, #8
 800847a:	b29b      	uxth	r3, r3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	461a      	mov	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	605a      	str	r2, [r3, #4]
          break;
 8008484:	e00e      	b.n	80084a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3304      	adds	r3, #4
 800848a:	2201      	movs	r2, #1
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fb60 	bl	8009b54 <USBD_CtlSendData>
          break;
 8008494:	e006      	b.n	80084a4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 faea 	bl	8009a72 <USBD_CtlError>
          ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	75fb      	strb	r3, [r7, #23]
          break;
 80084a2:	bf00      	nop
      }
      break;
 80084a4:	e09a      	b.n	80085dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b0b      	cmp	r3, #11
 80084ac:	f200 8086 	bhi.w	80085bc <USBD_HID_Setup+0x1dc>
 80084b0:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <USBD_HID_Setup+0xd8>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084e9 	.word	0x080084e9
 80084bc:	080085cb 	.word	0x080085cb
 80084c0:	080085bd 	.word	0x080085bd
 80084c4:	080085bd 	.word	0x080085bd
 80084c8:	080085bd 	.word	0x080085bd
 80084cc:	080085bd 	.word	0x080085bd
 80084d0:	08008513 	.word	0x08008513
 80084d4:	080085bd 	.word	0x080085bd
 80084d8:	080085bd 	.word	0x080085bd
 80084dc:	080085bd 	.word	0x080085bd
 80084e0:	0800856b 	.word	0x0800856b
 80084e4:	08008595 	.word	0x08008595
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d107      	bne.n	8008504 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80084f4:	f107 030a 	add.w	r3, r7, #10
 80084f8:	2202      	movs	r2, #2
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 fb29 	bl	8009b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008502:	e063      	b.n	80085cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fab3 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	75fb      	strb	r3, [r7, #23]
          break;
 8008510:	e05c      	b.n	80085cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b22      	cmp	r3, #34	@ 0x22
 800851c:	d108      	bne.n	8008530 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	88db      	ldrh	r3, [r3, #6]
 8008522:	2b36      	cmp	r3, #54	@ 0x36
 8008524:	bf28      	it	cs
 8008526:	2336      	movcs	r3, #54	@ 0x36
 8008528:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800852a:	4b2f      	ldr	r3, [pc, #188]	@ (80085e8 <USBD_HID_Setup+0x208>)
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	e015      	b.n	800855c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	885b      	ldrh	r3, [r3, #2]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b21      	cmp	r3, #33	@ 0x21
 800853a:	d108      	bne.n	800854e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800853c:	4b2b      	ldr	r3, [pc, #172]	@ (80085ec <USBD_HID_Setup+0x20c>)
 800853e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	88db      	ldrh	r3, [r3, #6]
 8008544:	2b09      	cmp	r3, #9
 8008546:	bf28      	it	cs
 8008548:	2309      	movcs	r3, #9
 800854a:	82bb      	strh	r3, [r7, #20]
 800854c:	e006      	b.n	800855c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fa8e 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8008556:	2303      	movs	r3, #3
 8008558:	75fb      	strb	r3, [r7, #23]
            break;
 800855a:	e037      	b.n	80085cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800855c:	8abb      	ldrh	r3, [r7, #20]
 800855e:	461a      	mov	r2, r3
 8008560:	6939      	ldr	r1, [r7, #16]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 faf6 	bl	8009b54 <USBD_CtlSendData>
          break;
 8008568:	e030      	b.n	80085cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d107      	bne.n	8008586 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3308      	adds	r3, #8
 800857a:	2201      	movs	r2, #1
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fae8 	bl	8009b54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008584:	e022      	b.n	80085cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 fa72 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 800858e:	2303      	movs	r3, #3
 8008590:	75fb      	strb	r3, [r7, #23]
          break;
 8008592:	e01b      	b.n	80085cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b03      	cmp	r3, #3
 800859e:	d106      	bne.n	80085ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ac:	e00e      	b.n	80085cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fa5e 	bl	8009a72 <USBD_CtlError>
            ret = USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	75fb      	strb	r3, [r7, #23]
          break;
 80085ba:	e007      	b.n	80085cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fa57 	bl	8009a72 <USBD_CtlError>
          ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	75fb      	strb	r3, [r7, #23]
          break;
 80085c8:	e000      	b.n	80085cc <USBD_HID_Setup+0x1ec>
          break;
 80085ca:	bf00      	nop
      }
      break;
 80085cc:	e006      	b.n	80085dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fa4e 	bl	8009a72 <USBD_CtlError>
      ret = USBD_FAIL;
 80085d6:	2303      	movs	r3, #3
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	bf00      	nop
  }

  return (uint8_t)ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000088 	.word	0x20000088
 80085ec:	20000070 	.word	0x20000070

080085f0 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	32b0      	adds	r2, #176	@ 0xb0
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	e014      	b.n	8008642 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b03      	cmp	r3, #3
 8008622:	d10d      	bne.n	8008640 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	7b1b      	ldrb	r3, [r3, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2201      	movs	r2, #1
 8008630:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008632:	4b06      	ldr	r3, [pc, #24]	@ (800864c <USBD_HID_SendReport+0x5c>)
 8008634:	7819      	ldrb	r1, [r3, #0]
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 ff27 	bl	800a48e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200000be 	.word	0x200000be

08008650 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008658:	2181      	movs	r1, #129	@ 0x81
 800865a:	4809      	ldr	r0, [pc, #36]	@ (8008680 <USBD_HID_GetFSCfgDesc+0x30>)
 800865c:	f000 fba9 	bl	8008db2 <USBD_GetEpDesc>
 8008660:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	220a      	movs	r2, #10
 800866c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2222      	movs	r2, #34	@ 0x22
 8008672:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008674:	4b02      	ldr	r3, [pc, #8]	@ (8008680 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	2000004c 	.word	0x2000004c

08008684 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800868c:	2181      	movs	r1, #129	@ 0x81
 800868e:	4809      	ldr	r0, [pc, #36]	@ (80086b4 <USBD_HID_GetHSCfgDesc+0x30>)
 8008690:	f000 fb8f 	bl	8008db2 <USBD_GetEpDesc>
 8008694:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2207      	movs	r2, #7
 80086a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2222      	movs	r2, #34	@ 0x22
 80086a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	@ (80086b4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000004c 	.word	0x2000004c

080086b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80086c0:	2181      	movs	r1, #129	@ 0x81
 80086c2:	4809      	ldr	r0, [pc, #36]	@ (80086e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80086c4:	f000 fb75 	bl	8008db2 <USBD_GetEpDesc>
 80086c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	220a      	movs	r2, #10
 80086d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2222      	movs	r2, #34	@ 0x22
 80086da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2000004c 	.word	0x2000004c

080086ec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	32b0      	adds	r2, #176	@ 0xb0
 8008702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008706:	2200      	movs	r2, #0
 8008708:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220a      	movs	r2, #10
 8008724:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008726:	4b03      	ldr	r3, [pc, #12]	@ (8008734 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	2000007c 	.word	0x2000007c

08008738 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	e01f      	b.n	8008790 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	79fa      	ldrb	r2, [r7, #7]
 8008782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f001 fd49 	bl	800a21c <USBD_LL_Init>
 800878a:	4603      	mov	r3, r0
 800878c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e025      	b.n	80087fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32ae      	adds	r2, #174	@ 0xae
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00f      	beq.n	80087ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32ae      	adds	r2, #174	@ 0xae
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087dc:	f107 020e 	add.w	r2, r7, #14
 80087e0:	4610      	mov	r0, r2
 80087e2:	4798      	blx	r3
 80087e4:	4602      	mov	r2, r0
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 fd55 	bl	800a2bc <USBD_LL_Start>
 8008812:	4603      	mov	r3, r0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008826:	4618      	mov	r0, r3
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d009      	beq.n	8008860 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	4611      	mov	r1, r2
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	4611      	mov	r1, r2
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f001 f8a4 	bl	80099fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80088c4:	461a      	mov	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d01a      	beq.n	8008910 <USBD_LL_SetupStage+0x72>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d822      	bhi.n	8008924 <USBD_LL_SetupStage+0x86>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <USBD_LL_SetupStage+0x4a>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d00a      	beq.n	80088fc <USBD_LL_SetupStage+0x5e>
 80088e6:	e01d      	b.n	8008924 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fad1 	bl	8008e98 <USBD_StdDevReq>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
      break;
 80088fa:	e020      	b.n	800893e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fb39 	bl	8008f7c <USBD_StdItfReq>
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
      break;
 800890e:	e016      	b.n	800893e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb9b 	bl	8009054 <USBD_StdEPReq>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e00c      	b.n	800893e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800892a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800892e:	b2db      	uxtb	r3, r3
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fd22 	bl	800a37c <USBD_LL_StallEP>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
      break;
 800893c:	bf00      	nop
  }

  return ret;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	460b      	mov	r3, r1
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d16e      	bne.n	8008a3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008966:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800896e:	2b03      	cmp	r3, #3
 8008970:	f040 8098 	bne.w	8008aa4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	429a      	cmp	r2, r3
 800897e:	d913      	bls.n	80089a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	4293      	cmp	r3, r2
 8008998:	bf28      	it	cs
 800899a:	4613      	movcs	r3, r2
 800899c:	461a      	mov	r2, r3
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f001 f903 	bl	8009bac <USBD_CtlContinueRx>
 80089a6:	e07d      	b.n	8008aa4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089ae:	f003 031f 	and.w	r3, r3, #31
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d014      	beq.n	80089e0 <USBD_LL_DataOutStage+0x98>
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d81d      	bhi.n	80089f6 <USBD_LL_DataOutStage+0xae>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <USBD_LL_DataOutStage+0x7c>
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d003      	beq.n	80089ca <USBD_LL_DataOutStage+0x82>
 80089c2:	e018      	b.n	80089f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	75bb      	strb	r3, [r7, #22]
            break;
 80089c8:	e018      	b.n	80089fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f9d2 	bl	8008d7e <USBD_CoreFindIF>
 80089da:	4603      	mov	r3, r0
 80089dc:	75bb      	strb	r3, [r7, #22]
            break;
 80089de:	e00d      	b.n	80089fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f9d4 	bl	8008d98 <USBD_CoreFindEP>
 80089f0:	4603      	mov	r3, r0
 80089f2:	75bb      	strb	r3, [r7, #22]
            break;
 80089f4:	e002      	b.n	80089fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75bb      	strb	r3, [r7, #22]
            break;
 80089fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80089fc:	7dbb      	ldrb	r3, [r7, #22]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d119      	bne.n	8008a36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d113      	bne.n	8008a36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a0e:	7dba      	ldrb	r2, [r7, #22]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	32ae      	adds	r2, #174	@ 0xae
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a1e:	7dba      	ldrb	r2, [r7, #22]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a26:	7dba      	ldrb	r2, [r7, #22]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	32ae      	adds	r2, #174	@ 0xae
 8008a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 f8c9 	bl	8009bce <USBD_CtlSendStatus>
 8008a3c:	e032      	b.n	8008aa4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	4619      	mov	r1, r3
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f9a5 	bl	8008d98 <USBD_CoreFindEP>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a52:	7dbb      	ldrb	r3, [r7, #22]
 8008a54:	2bff      	cmp	r3, #255	@ 0xff
 8008a56:	d025      	beq.n	8008aa4 <USBD_LL_DataOutStage+0x15c>
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d122      	bne.n	8008aa4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d117      	bne.n	8008a9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a6a:	7dba      	ldrb	r2, [r7, #22]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	32ae      	adds	r2, #174	@ 0xae
 8008a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00f      	beq.n	8008a9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a7a:	7dba      	ldrb	r2, [r7, #22]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a82:	7dba      	ldrb	r2, [r7, #22]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	32ae      	adds	r2, #174	@ 0xae
 8008a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	7afa      	ldrb	r2, [r7, #11]
 8008a90:	4611      	mov	r1, r2
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4798      	blx	r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	e000      	b.n	8008aa6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d16f      	bne.n	8008ba2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d15a      	bne.n	8008b88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d914      	bls.n	8008b08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f001 f848 	bl	8009b8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008afa:	2300      	movs	r3, #0
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f001 fce5 	bl	800a4d0 <USBD_LL_PrepareReceive>
 8008b06:	e03f      	b.n	8008b88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d11c      	bne.n	8008b4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d316      	bcc.n	8008b4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d20f      	bcs.n	8008b4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2100      	movs	r1, #0
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f001 f829 	bl	8009b8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b40:	2300      	movs	r3, #0
 8008b42:	2200      	movs	r2, #0
 8008b44:	2100      	movs	r1, #0
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f001 fcc2 	bl	800a4d0 <USBD_LL_PrepareReceive>
 8008b4c:	e01c      	b.n	8008b88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d10f      	bne.n	8008b7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7a:	2180      	movs	r1, #128	@ 0x80
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f001 fbfd 	bl	800a37c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f001 f836 	bl	8009bf4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d03a      	beq.n	8008c08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff fe42 	bl	800881c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ba0:	e032      	b.n	8008c08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	4619      	mov	r1, r3
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f8f3 	bl	8008d98 <USBD_CoreFindEP>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2bff      	cmp	r3, #255	@ 0xff
 8008bba:	d025      	beq.n	8008c08 <USBD_LL_DataInStage+0x15a>
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d122      	bne.n	8008c08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d11c      	bne.n	8008c08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bce:	7dfa      	ldrb	r2, [r7, #23]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	32ae      	adds	r2, #174	@ 0xae
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d014      	beq.n	8008c08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bde:	7dfa      	ldrb	r2, [r7, #23]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008be6:	7dfa      	ldrb	r2, [r7, #23]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	32ae      	adds	r2, #174	@ 0xae
 8008bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	7afa      	ldrb	r2, [r7, #11]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	4798      	blx	r3
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008bfe:	7dbb      	ldrb	r3, [r7, #22]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c04:	7dbb      	ldrb	r3, [r7, #22]
 8008c06:	e000      	b.n	8008c0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d014      	beq.n	8008c78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6852      	ldr	r2, [r2, #4]
 8008c66:	b2d2      	uxtb	r2, r2
 8008c68:	4611      	mov	r1, r2
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c78:	2340      	movs	r3, #64	@ 0x40
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fb37 	bl	800a2f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c94:	2340      	movs	r3, #64	@ 0x40
 8008c96:	2200      	movs	r2, #0
 8008c98:	2180      	movs	r1, #128	@ 0x80
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fb29 	bl	800a2f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2240      	movs	r2, #64	@ 0x40
 8008caa:	621a      	str	r2, [r3, #32]

  return ret;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d006      	beq.n	8008cf8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d106      	bne.n	8008d30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d110      	bne.n	8008d74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008da4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d91f      	bls.n	8008e18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008dde:	e013      	b.n	8008e08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008de0:	f107 030a 	add.w	r3, r7, #10
 8008de4:	4619      	mov	r1, r3
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f000 f81b 	bl	8008e22 <USBD_GetNextDesc>
 8008dec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d108      	bne.n	8008e08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	789b      	ldrb	r3, [r3, #2]
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d008      	beq.n	8008e16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	897b      	ldrh	r3, [r7, #10]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d8e5      	bhi.n	8008de0 <USBD_GetEpDesc+0x2e>
 8008e14:	e000      	b.n	8008e18 <USBD_GetEpDesc+0x66>
          break;
 8008e16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e18:	693b      	ldr	r3, [r7, #16]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	7812      	ldrb	r2, [r2, #0]
 8008e38:	4413      	add	r3, r2
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e78:	8a3b      	ldrh	r3, [r7, #16]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	b21a      	sxth	r2, r3
 8008e7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e88:	89fb      	ldrh	r3, [r7, #14]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008eae:	2b40      	cmp	r3, #64	@ 0x40
 8008eb0:	d005      	beq.n	8008ebe <USBD_StdDevReq+0x26>
 8008eb2:	2b40      	cmp	r3, #64	@ 0x40
 8008eb4:	d857      	bhi.n	8008f66 <USBD_StdDevReq+0xce>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00f      	beq.n	8008eda <USBD_StdDevReq+0x42>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d153      	bne.n	8008f66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	32ae      	adds	r2, #174	@ 0xae
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed8:	e04a      	b.n	8008f70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d83b      	bhi.n	8008f5a <USBD_StdDevReq+0xc2>
 8008ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <USBD_StdDevReq+0x50>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f3d 	.word	0x08008f3d
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f5b 	.word	0x08008f5b
 8008ef4:	08008f47 	.word	0x08008f47
 8008ef8:	08008f5b 	.word	0x08008f5b
 8008efc:	08008f1b 	.word	0x08008f1b
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f5b 	.word	0x08008f5b
 8008f08:	08008f33 	.word	0x08008f33
 8008f0c:	08008f25 	.word	0x08008f25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa3c 	bl	8009390 <USBD_GetDescriptor>
          break;
 8008f18:	e024      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fbcb 	bl	80096b8 <USBD_SetAddress>
          break;
 8008f22:	e01f      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc0a 	bl	8009740 <USBD_SetConfig>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f30:	e018      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fcad 	bl	8009894 <USBD_GetConfig>
          break;
 8008f3a:	e013      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fcde 	bl	8009900 <USBD_GetStatus>
          break;
 8008f44:	e00e      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fd0d 	bl	8009968 <USBD_SetFeature>
          break;
 8008f4e:	e009      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fd31 	bl	80099ba <USBD_ClrFeature>
          break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd88 	bl	8009a72 <USBD_CtlError>
          break;
 8008f62:	bf00      	nop
      }
      break;
 8008f64:	e004      	b.n	8008f70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fd82 	bl	8009a72 <USBD_CtlError>
      break;
 8008f6e:	bf00      	nop
  }

  return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop

08008f7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d005      	beq.n	8008fa2 <USBD_StdItfReq+0x26>
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d852      	bhi.n	8009040 <USBD_StdItfReq+0xc4>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <USBD_StdItfReq+0x26>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d14e      	bne.n	8009040 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d840      	bhi.n	8009032 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	889b      	ldrh	r3, [r3, #4]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d836      	bhi.n	8009028 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	889b      	ldrh	r3, [r3, #4]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fedb 	bl	8008d7e <USBD_CoreFindIF>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2bff      	cmp	r3, #255	@ 0xff
 8008fd0:	d01d      	beq.n	800900e <USBD_StdItfReq+0x92>
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11a      	bne.n	800900e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008fd8:	7bba      	ldrb	r2, [r7, #14]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32ae      	adds	r2, #174	@ 0xae
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00f      	beq.n	8009008 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008fe8:	7bba      	ldrb	r2, [r7, #14]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ff0:	7bba      	ldrb	r2, [r7, #14]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32ae      	adds	r2, #174	@ 0xae
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009006:	e004      	b.n	8009012 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009008:	2303      	movs	r3, #3
 800900a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800900c:	e001      	b.n	8009012 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d110      	bne.n	800903c <USBD_StdItfReq+0xc0>
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10d      	bne.n	800903c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fdd4 	bl	8009bce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009026:	e009      	b.n	800903c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fd21 	bl	8009a72 <USBD_CtlError>
          break;
 8009030:	e004      	b.n	800903c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fd1c 	bl	8009a72 <USBD_CtlError>
          break;
 800903a:	e000      	b.n	800903e <USBD_StdItfReq+0xc2>
          break;
 800903c:	bf00      	nop
      }
      break;
 800903e:	e004      	b.n	800904a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fd15 	bl	8009a72 <USBD_CtlError>
      break;
 8009048:	bf00      	nop
  }

  return ret;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	889b      	ldrh	r3, [r3, #4]
 8009066:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d007      	beq.n	8009084 <USBD_StdEPReq+0x30>
 8009074:	2b40      	cmp	r3, #64	@ 0x40
 8009076:	f200 817f 	bhi.w	8009378 <USBD_StdEPReq+0x324>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d02a      	beq.n	80090d4 <USBD_StdEPReq+0x80>
 800907e:	2b20      	cmp	r3, #32
 8009080:	f040 817a 	bne.w	8009378 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fe85 	bl	8008d98 <USBD_CoreFindEP>
 800908e:	4603      	mov	r3, r0
 8009090:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009092:	7b7b      	ldrb	r3, [r7, #13]
 8009094:	2bff      	cmp	r3, #255	@ 0xff
 8009096:	f000 8174 	beq.w	8009382 <USBD_StdEPReq+0x32e>
 800909a:	7b7b      	ldrb	r3, [r7, #13]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 8170 	bne.w	8009382 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090a2:	7b7a      	ldrb	r2, [r7, #13]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090aa:	7b7a      	ldrb	r2, [r7, #13]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	32ae      	adds	r2, #174	@ 0xae
 80090b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 8163 	beq.w	8009382 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090bc:	7b7a      	ldrb	r2, [r7, #13]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32ae      	adds	r2, #174	@ 0xae
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80090d2:	e156      	b.n	8009382 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d008      	beq.n	80090ee <USBD_StdEPReq+0x9a>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	f300 8145 	bgt.w	800936c <USBD_StdEPReq+0x318>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 809b 	beq.w	800921e <USBD_StdEPReq+0x1ca>
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d03c      	beq.n	8009166 <USBD_StdEPReq+0x112>
 80090ec:	e13e      	b.n	800936c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d002      	beq.n	8009100 <USBD_StdEPReq+0xac>
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d016      	beq.n	800912c <USBD_StdEPReq+0xd8>
 80090fe:	e02c      	b.n	800915a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00d      	beq.n	8009122 <USBD_StdEPReq+0xce>
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	2b80      	cmp	r3, #128	@ 0x80
 800910a:	d00a      	beq.n	8009122 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 f933 	bl	800a37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009116:	2180      	movs	r1, #128	@ 0x80
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 f92f 	bl	800a37c <USBD_LL_StallEP>
 800911e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009120:	e020      	b.n	8009164 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fca4 	bl	8009a72 <USBD_CtlError>
              break;
 800912a:	e01b      	b.n	8009164 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	885b      	ldrh	r3, [r3, #2]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10e      	bne.n	8009152 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <USBD_StdEPReq+0xfe>
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b80      	cmp	r3, #128	@ 0x80
 800913e:	d008      	beq.n	8009152 <USBD_StdEPReq+0xfe>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	88db      	ldrh	r3, [r3, #6]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f915 	bl	800a37c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fd3b 	bl	8009bce <USBD_CtlSendStatus>

              break;
 8009158:	e004      	b.n	8009164 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fc88 	bl	8009a72 <USBD_CtlError>
              break;
 8009162:	bf00      	nop
          }
          break;
 8009164:	e107      	b.n	8009376 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d002      	beq.n	8009178 <USBD_StdEPReq+0x124>
 8009172:	2b03      	cmp	r3, #3
 8009174:	d016      	beq.n	80091a4 <USBD_StdEPReq+0x150>
 8009176:	e04b      	b.n	8009210 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00d      	beq.n	800919a <USBD_StdEPReq+0x146>
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b80      	cmp	r3, #128	@ 0x80
 8009182:	d00a      	beq.n	800919a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 f8f7 	bl	800a37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800918e:	2180      	movs	r1, #128	@ 0x80
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f8f3 	bl	800a37c <USBD_LL_StallEP>
 8009196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009198:	e040      	b.n	800921c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc68 	bl	8009a72 <USBD_CtlError>
              break;
 80091a2:	e03b      	b.n	800921c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	885b      	ldrh	r3, [r3, #2]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d136      	bne.n	800921a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 f8fd 	bl	800a3ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd04 	bl	8009bce <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff fde4 	bl	8008d98 <USBD_CoreFindEP>
 80091d0:	4603      	mov	r3, r0
 80091d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091d4:	7b7b      	ldrb	r3, [r7, #13]
 80091d6:	2bff      	cmp	r3, #255	@ 0xff
 80091d8:	d01f      	beq.n	800921a <USBD_StdEPReq+0x1c6>
 80091da:	7b7b      	ldrb	r3, [r7, #13]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d11c      	bne.n	800921a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80091e0:	7b7a      	ldrb	r2, [r7, #13]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80091e8:	7b7a      	ldrb	r2, [r7, #13]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	32ae      	adds	r2, #174	@ 0xae
 80091ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d010      	beq.n	800921a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091f8:	7b7a      	ldrb	r2, [r7, #13]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	32ae      	adds	r2, #174	@ 0xae
 80091fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	4798      	blx	r3
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800920e:	e004      	b.n	800921a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fc2d 	bl	8009a72 <USBD_CtlError>
              break;
 8009218:	e000      	b.n	800921c <USBD_StdEPReq+0x1c8>
              break;
 800921a:	bf00      	nop
          }
          break;
 800921c:	e0ab      	b.n	8009376 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d002      	beq.n	8009230 <USBD_StdEPReq+0x1dc>
 800922a:	2b03      	cmp	r3, #3
 800922c:	d032      	beq.n	8009294 <USBD_StdEPReq+0x240>
 800922e:	e097      	b.n	8009360 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <USBD_StdEPReq+0x1f2>
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b80      	cmp	r3, #128	@ 0x80
 800923a:	d004      	beq.n	8009246 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc17 	bl	8009a72 <USBD_CtlError>
                break;
 8009244:	e091      	b.n	800936a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	da0b      	bge.n	8009266 <USBD_StdEPReq+0x212>
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	3310      	adds	r3, #16
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	4413      	add	r3, r2
 8009262:	3304      	adds	r3, #4
 8009264:	e00b      	b.n	800927e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800926c:	4613      	mov	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	3304      	adds	r3, #4
 800927e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2202      	movs	r2, #2
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fc61 	bl	8009b54 <USBD_CtlSendData>
              break;
 8009292:	e06a      	b.n	800936a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009298:	2b00      	cmp	r3, #0
 800929a:	da11      	bge.n	80092c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	f003 020f 	and.w	r2, r3, #15
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	3324      	adds	r3, #36	@ 0x24
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d117      	bne.n	80092e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fbda 	bl	8009a72 <USBD_CtlError>
                  break;
 80092be:	e054      	b.n	800936a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fbc7 	bl	8009a72 <USBD_CtlError>
                  break;
 80092e4:	e041      	b.n	800936a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da0b      	bge.n	8009306 <USBD_StdEPReq+0x2b2>
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	3310      	adds	r3, #16
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	3304      	adds	r3, #4
 8009304:	e00b      	b.n	800931e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <USBD_StdEPReq+0x2d8>
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b80      	cmp	r3, #128	@ 0x80
 800932a:	d103      	bne.n	8009334 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	e00e      	b.n	8009352 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f85d 	bl	800a3f8 <USBD_LL_IsStallEP>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2201      	movs	r2, #1
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e002      	b.n	8009352 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2202      	movs	r2, #2
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fbfb 	bl	8009b54 <USBD_CtlSendData>
              break;
 800935e:	e004      	b.n	800936a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb85 	bl	8009a72 <USBD_CtlError>
              break;
 8009368:	bf00      	nop
          }
          break;
 800936a:	e004      	b.n	8009376 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fb7f 	bl	8009a72 <USBD_CtlError>
          break;
 8009374:	bf00      	nop
      }
      break;
 8009376:	e005      	b.n	8009384 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb79 	bl	8009a72 <USBD_CtlError>
      break;
 8009380:	e000      	b.n	8009384 <USBD_StdEPReq+0x330>
      break;
 8009382:	bf00      	nop
  }

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	2b0e      	cmp	r3, #14
 80093b2:	f200 8152 	bhi.w	800965a <USBD_GetDescriptor+0x2ca>
 80093b6:	a201      	add	r2, pc, #4	@ (adr r2, 80093bc <USBD_GetDescriptor+0x2c>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	0800942d 	.word	0x0800942d
 80093c0:	08009445 	.word	0x08009445
 80093c4:	08009485 	.word	0x08009485
 80093c8:	0800965b 	.word	0x0800965b
 80093cc:	0800965b 	.word	0x0800965b
 80093d0:	080095fb 	.word	0x080095fb
 80093d4:	08009627 	.word	0x08009627
 80093d8:	0800965b 	.word	0x0800965b
 80093dc:	0800965b 	.word	0x0800965b
 80093e0:	0800965b 	.word	0x0800965b
 80093e4:	0800965b 	.word	0x0800965b
 80093e8:	0800965b 	.word	0x0800965b
 80093ec:	0800965b 	.word	0x0800965b
 80093f0:	0800965b 	.word	0x0800965b
 80093f4:	080093f9 	.word	0x080093f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800941a:	e126      	b.n	800966a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb27 	bl	8009a72 <USBD_CtlError>
        err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
      break;
 800942a:	e11e      	b.n	800966a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	7c12      	ldrb	r2, [r2, #16]
 8009438:	f107 0108 	add.w	r1, r7, #8
 800943c:	4610      	mov	r0, r2
 800943e:	4798      	blx	r3
 8009440:	60f8      	str	r0, [r7, #12]
      break;
 8009442:	e112      	b.n	800966a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	7c1b      	ldrb	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10d      	bne.n	8009468 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009454:	f107 0208 	add.w	r2, r7, #8
 8009458:	4610      	mov	r0, r2
 800945a:	4798      	blx	r3
 800945c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3301      	adds	r3, #1
 8009462:	2202      	movs	r2, #2
 8009464:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009466:	e100      	b.n	800966a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	f107 0208 	add.w	r2, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3301      	adds	r3, #1
 800947e:	2202      	movs	r2, #2
 8009480:	701a      	strb	r2, [r3, #0]
      break;
 8009482:	e0f2      	b.n	800966a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	885b      	ldrh	r3, [r3, #2]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b05      	cmp	r3, #5
 800948c:	f200 80ac 	bhi.w	80095e8 <USBD_GetDescriptor+0x258>
 8009490:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <USBD_GetDescriptor+0x108>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	08009519 	.word	0x08009519
 80094a4:	0800954d 	.word	0x0800954d
 80094a8:	08009581 	.word	0x08009581
 80094ac:	080095b5 	.word	0x080095b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e091      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 facb 	bl	8009a72 <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e089      	b.n	80095f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e077      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fab1 	bl	8009a72 <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e06f      	b.n	80095f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e05d      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa97 	bl	8009a72 <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e055      	b.n	80095f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e043      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa7d 	bl	8009a72 <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e03b      	b.n	80095f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e029      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa63 	bl	8009a72 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e021      	b.n	80095f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e00f      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa49 	bl	8009a72 <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e007      	b.n	80095f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa41 	bl	8009a72 <USBD_CtlError>
          err++;
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	3301      	adds	r3, #1
 80095f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095f6:	bf00      	nop
      }
      break;
 80095f8:	e037      	b.n	800966a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1b      	ldrb	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800960a:	f107 0208 	add.w	r2, r7, #8
 800960e:	4610      	mov	r0, r2
 8009610:	4798      	blx	r3
 8009612:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009614:	e029      	b.n	800966a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa2a 	bl	8009a72 <USBD_CtlError>
        err++;
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	3301      	adds	r3, #1
 8009622:	72fb      	strb	r3, [r7, #11]
      break;
 8009624:	e021      	b.n	800966a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7c1b      	ldrb	r3, [r3, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10d      	bne.n	800964a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009636:	f107 0208 	add.w	r2, r7, #8
 800963a:	4610      	mov	r0, r2
 800963c:	4798      	blx	r3
 800963e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	2207      	movs	r2, #7
 8009646:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009648:	e00f      	b.n	800966a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa10 	bl	8009a72 <USBD_CtlError>
        err++;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	3301      	adds	r3, #1
 8009656:	72fb      	strb	r3, [r7, #11]
      break;
 8009658:	e007      	b.n	800966a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fa08 	bl	8009a72 <USBD_CtlError>
      err++;
 8009662:	7afb      	ldrb	r3, [r7, #11]
 8009664:	3301      	adds	r3, #1
 8009666:	72fb      	strb	r3, [r7, #11]
      break;
 8009668:	bf00      	nop
  }

  if (err != 0U)
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d11e      	bne.n	80096ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	88db      	ldrh	r3, [r3, #6]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d016      	beq.n	80096a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009678:	893b      	ldrh	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00e      	beq.n	800969c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88da      	ldrh	r2, [r3, #6]
 8009682:	893b      	ldrh	r3, [r7, #8]
 8009684:	4293      	cmp	r3, r2
 8009686:	bf28      	it	cs
 8009688:	4613      	movcs	r3, r2
 800968a:	b29b      	uxth	r3, r3
 800968c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800968e:	893b      	ldrh	r3, [r7, #8]
 8009690:	461a      	mov	r2, r3
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fa5d 	bl	8009b54 <USBD_CtlSendData>
 800969a:	e009      	b.n	80096b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f9e7 	bl	8009a72 <USBD_CtlError>
 80096a4:	e004      	b.n	80096b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa91 	bl	8009bce <USBD_CtlSendStatus>
 80096ac:	e000      	b.n	80096b0 <USBD_GetDescriptor+0x320>
    return;
 80096ae:	bf00      	nop
  }
}
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop

080096b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	889b      	ldrh	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d131      	bne.n	800972e <USBD_SetAddress+0x76>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88db      	ldrh	r3, [r3, #6]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d12d      	bne.n	800972e <USBD_SetAddress+0x76>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80096d8:	d829      	bhi.n	800972e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	885b      	ldrh	r3, [r3, #2]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d104      	bne.n	80096fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f9bc 	bl	8009a72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	e01d      	b.n	8009738 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7bfa      	ldrb	r2, [r7, #15]
 8009700:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fea1 	bl	800a450 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa5d 	bl	8009bce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009722:	e009      	b.n	8009738 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972c:	e004      	b.n	8009738 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f99e 	bl	8009a72 <USBD_CtlError>
  }
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	b2da      	uxtb	r2, r3
 8009754:	4b4e      	ldr	r3, [pc, #312]	@ (8009890 <USBD_SetConfig+0x150>)
 8009756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009758:	4b4d      	ldr	r3, [pc, #308]	@ (8009890 <USBD_SetConfig+0x150>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d905      	bls.n	800976c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f985 	bl	8009a72 <USBD_CtlError>
    return USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	e08c      	b.n	8009886 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d002      	beq.n	800977e <USBD_SetConfig+0x3e>
 8009778:	2b03      	cmp	r3, #3
 800977a:	d029      	beq.n	80097d0 <USBD_SetConfig+0x90>
 800977c:	e075      	b.n	800986a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800977e:	4b44      	ldr	r3, [pc, #272]	@ (8009890 <USBD_SetConfig+0x150>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d020      	beq.n	80097c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009786:	4b42      	ldr	r3, [pc, #264]	@ (8009890 <USBD_SetConfig+0x150>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009790:	4b3f      	ldr	r3, [pc, #252]	@ (8009890 <USBD_SetConfig+0x150>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff f84b 	bl	8008832 <USBD_SetClassConfig>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f962 	bl	8009a72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097b6:	e065      	b.n	8009884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fa08 	bl	8009bce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2203      	movs	r2, #3
 80097c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097c6:	e05d      	b.n	8009884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa00 	bl	8009bce <USBD_CtlSendStatus>
      break;
 80097ce:	e059      	b.n	8009884 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097d0:	4b2f      	ldr	r3, [pc, #188]	@ (8009890 <USBD_SetConfig+0x150>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d112      	bne.n	80097fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80097e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009890 <USBD_SetConfig+0x150>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <USBD_SetConfig+0x150>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff f83a 	bl	800886a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f9e9 	bl	8009bce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097fc:	e042      	b.n	8009884 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097fe:	4b24      	ldr	r3, [pc, #144]	@ (8009890 <USBD_SetConfig+0x150>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d02a      	beq.n	8009862 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff f828 	bl	800886a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800981a:	4b1d      	ldr	r3, [pc, #116]	@ (8009890 <USBD_SetConfig+0x150>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009824:	4b1a      	ldr	r3, [pc, #104]	@ (8009890 <USBD_SetConfig+0x150>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff f801 	bl	8008832 <USBD_SetClassConfig>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00f      	beq.n	800985a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f918 	bl	8009a72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff f80d 	bl	800886a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009858:	e014      	b.n	8009884 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f9b7 	bl	8009bce <USBD_CtlSendStatus>
      break;
 8009860:	e010      	b.n	8009884 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f9b3 	bl	8009bce <USBD_CtlSendStatus>
      break;
 8009868:	e00c      	b.n	8009884 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f900 	bl	8009a72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009872:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <USBD_SetConfig+0x150>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fe fff6 	bl	800886a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	73fb      	strb	r3, [r7, #15]
      break;
 8009882:	bf00      	nop
  }

  return ret;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000210 	.word	0x20000210

08009894 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d004      	beq.n	80098b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8e2 	bl	8009a72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098ae:	e023      	b.n	80098f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	dc02      	bgt.n	80098c2 <USBD_GetConfig+0x2e>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dc03      	bgt.n	80098c8 <USBD_GetConfig+0x34>
 80098c0:	e015      	b.n	80098ee <USBD_GetConfig+0x5a>
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d00b      	beq.n	80098de <USBD_GetConfig+0x4a>
 80098c6:	e012      	b.n	80098ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3308      	adds	r3, #8
 80098d2:	2201      	movs	r2, #1
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f93c 	bl	8009b54 <USBD_CtlSendData>
        break;
 80098dc:	e00c      	b.n	80098f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3304      	adds	r3, #4
 80098e2:	2201      	movs	r2, #1
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f934 	bl	8009b54 <USBD_CtlSendData>
        break;
 80098ec:	e004      	b.n	80098f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f8be 	bl	8009a72 <USBD_CtlError>
        break;
 80098f6:	bf00      	nop
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009910:	b2db      	uxtb	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	2b02      	cmp	r3, #2
 8009916:	d81e      	bhi.n	8009956 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	88db      	ldrh	r3, [r3, #6]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d004      	beq.n	800992a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f8a5 	bl	8009a72 <USBD_CtlError>
        break;
 8009928:	e01a      	b.n	8009960 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f043 0202 	orr.w	r2, r3, #2
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	330c      	adds	r3, #12
 800994a:	2202      	movs	r2, #2
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f900 	bl	8009b54 <USBD_CtlSendData>
      break;
 8009954:	e004      	b.n	8009960 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f88a 	bl	8009a72 <USBD_CtlError>
      break;
 800995e:	bf00      	nop
  }
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d107      	bne.n	800998a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f923 	bl	8009bce <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009988:	e013      	b.n	80099b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	885b      	ldrh	r3, [r3, #2]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d10b      	bne.n	80099aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	0a1b      	lsrs	r3, r3, #8
 8009998:	b29b      	uxth	r3, r3
 800999a:	b2da      	uxtb	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f913 	bl	8009bce <USBD_CtlSendStatus>
}
 80099a8:	e003      	b.n	80099b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f860 	bl	8009a72 <USBD_CtlError>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d80b      	bhi.n	80099ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10c      	bne.n	80099f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f8f3 	bl	8009bce <USBD_CtlSendStatus>
      }
      break;
 80099e8:	e004      	b.n	80099f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f840 	bl	8009a72 <USBD_CtlError>
      break;
 80099f2:	e000      	b.n	80099f6 <USBD_ClrFeature+0x3c>
      break;
 80099f4:	bf00      	nop
  }
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fa16 	bl	8008e5a <SWAPBYTE>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff fa09 	bl	8008e5a <SWAPBYTE>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7ff f9fc 	bl	8008e5a <SWAPBYTE>
 8009a62:	4603      	mov	r3, r0
 8009a64:	461a      	mov	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	80da      	strh	r2, [r3, #6]
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7c:	2180      	movs	r1, #128	@ 0x80
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fc7c 	bl	800a37c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a84:	2100      	movs	r1, #0
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fc78 	bl	800a37c <USBD_LL_StallEP>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d036      	beq.n	8009b18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f000 f836 	bl	8009b20 <USBD_GetLen>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7812      	ldrb	r2, [r2, #0]
 8009acc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	4413      	add	r3, r2
 8009ada:	2203      	movs	r2, #3
 8009adc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ae4:	e013      	b.n	8009b0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	4413      	add	r3, r2
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	7812      	ldrb	r2, [r2, #0]
 8009af0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3301      	adds	r3, #1
 8009af6:	613b      	str	r3, [r7, #16]
    idx++;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	3301      	adds	r3, #1
 8009afc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	4413      	add	r3, r2
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1e7      	bne.n	8009ae6 <USBD_GetString+0x52>
 8009b16:	e000      	b.n	8009b1a <USBD_GetString+0x86>
    return;
 8009b18:	bf00      	nop
  }
}
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b30:	e005      	b.n	8009b3e <USBD_GetLen+0x1e>
  {
    len++;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	3301      	adds	r3, #1
 8009b36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f5      	bne.n	8009b32 <USBD_GetLen+0x12>
  }

  return len;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 fc87 	bl	800a48e <USBD_LL_Transmit>

  return USBD_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 fc76 	bl	800a48e <USBD_LL_Transmit>

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fc86 	bl	800a4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2204      	movs	r2, #4
 8009bda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	2100      	movs	r1, #0
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fc52 	bl	800a48e <USBD_LL_Transmit>

  return USBD_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2205      	movs	r2, #5
 8009c00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c04:	2300      	movs	r3, #0
 8009c06:	2200      	movs	r2, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fc60 	bl	800a4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <LL_APB1_GRP1_EnableClock>:
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b098      	sub	sp, #96	@ 0x60
 8009c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c52:	f107 0318 	add.w	r3, r7, #24
 8009c56:	2248      	movs	r2, #72	@ 0x48
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fcdc 	bl	800a618 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8009c60:	463b      	mov	r3, r7
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	609a      	str	r2, [r3, #8]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	611a      	str	r2, [r3, #16]
 8009c6e:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8009c70:	2340      	movs	r3, #64	@ 0x40
 8009c72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009c74:	2301      	movs	r3, #1
 8009c76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8009c7c:	f107 0318 	add.w	r3, r7, #24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fa fcd9 	bl	8004638 <HAL_RCC_OscConfig>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 8009c8c:	f7f6 fc80 	bl	8000590 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8009c90:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8009c94:	f7ff ffc1 	bl	8009c1a <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8009c9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009ca0:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 8009ca2:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8009ca6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8009ca8:	2322      	movs	r3, #34	@ 0x22
 8009caa:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8009cac:	2320      	movs	r3, #32
 8009cae:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 8009cb0:	463b      	mov	r3, r7
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fb fdf6 	bl	80058a4 <HAL_RCCEx_CRSConfig>
}
 8009cb8:	bf00      	nop
 8009cba:	3760      	adds	r7, #96	@ 0x60
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <JoystickControl>:
  *         Handle joystick ADC input to control the mouse through USB Device
  * @param  None
  * @retval None
  */
void JoystickControl(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
	if ((((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup == 1) && (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_SUSPENDED))
 8009cc6:	4b28      	ldr	r3, [pc, #160]	@ (8009d68 <JoystickControl+0xa8>)
 8009cc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ccc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d128      	bne.n	8009d26 <JoystickControl+0x66>
 8009cd4:	4b24      	ldr	r3, [pc, #144]	@ (8009d68 <JoystickControl+0xa8>)
 8009cd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d120      	bne.n	8009d26 <JoystickControl+0x66>
	{
		if ((&hpcd_USB_FS)->Init.low_power_enable)
 8009ce4:	4b20      	ldr	r3, [pc, #128]	@ (8009d68 <JoystickControl+0xa8>)
 8009ce6:	7a5b      	ldrb	r3, [r3, #9]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <JoystickControl+0x34>
		{
			HAL_ResumeTick();
 8009cec:	f7f6 fe5c 	bl	80009a8 <HAL_ResumeTick>
			SystemClockConfig_Resume();
 8009cf0:	f000 fc5e 	bl	800a5b0 <SystemClockConfig_Resume>
		}
		/* Activate Remote wakeup */
		HAL_PCD_ActivateRemoteWakeup((&hpcd_USB_FS));
 8009cf4:	481c      	ldr	r0, [pc, #112]	@ (8009d68 <JoystickControl+0xa8>)
 8009cf6:	f7f8 ffc9 	bl	8002c8c <HAL_PCD_ActivateRemoteWakeup>

		/* Remote wakeup delay */
		HAL_Delay(10);
 8009cfa:	200a      	movs	r0, #10
 8009cfc:	f7f6 fe30 	bl	8000960 <HAL_Delay>

		/* Disable Remote wakeup */
		HAL_PCD_DeActivateRemoteWakeup((&hpcd_USB_FS));
 8009d00:	4819      	ldr	r0, [pc, #100]	@ (8009d68 <JoystickControl+0xa8>)
 8009d02:	f7f8 ffd1 	bl	8002ca8 <HAL_PCD_DeActivateRemoteWakeup>

		/* change state to configured */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state = USBD_STATE_CONFIGURED;
 8009d06:	4b18      	ldr	r3, [pc, #96]	@ (8009d68 <JoystickControl+0xa8>)
 8009d08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

		/* Change remote_wakeup feature to 0 */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup = 0;
 8009d12:	4b15      	ldr	r3, [pc, #84]	@ (8009d68 <JoystickControl+0xa8>)
 8009d14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
		remotewakeupon = 1;
 8009d1e:	4b13      	ldr	r3, [pc, #76]	@ (8009d6c <JoystickControl+0xac>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
		_buff[2] =  joystick_RX;
		_buff[3] =  joystick_RY;
		_buff[4] =  0;
		USBD_HID_SendReport(&hUsbDeviceFS, _buff, 5);
	}
}
 8009d24:	e01b      	b.n	8009d5e <JoystickControl+0x9e>
	else if (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_CONFIGURED){
 8009d26:	4b10      	ldr	r3, [pc, #64]	@ (8009d68 <JoystickControl+0xa8>)
 8009d28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d113      	bne.n	8009d5e <JoystickControl+0x9e>
		_buff[0] =  joystick_X;
 8009d36:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <JoystickControl+0xb0>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	703b      	strb	r3, [r7, #0]
		_buff[1] =  joystick_Y;
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <JoystickControl+0xb4>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	707b      	strb	r3, [r7, #1]
		_buff[2] =  joystick_RX;
 8009d42:	4b0d      	ldr	r3, [pc, #52]	@ (8009d78 <JoystickControl+0xb8>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	70bb      	strb	r3, [r7, #2]
		_buff[3] =  joystick_RY;
 8009d48:	4b0c      	ldr	r3, [pc, #48]	@ (8009d7c <JoystickControl+0xbc>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	70fb      	strb	r3, [r7, #3]
		_buff[4] =  0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	713b      	strb	r3, [r7, #4]
		USBD_HID_SendReport(&hUsbDeviceFS, _buff, 5);
 8009d52:	463b      	mov	r3, r7
 8009d54:	2205      	movs	r2, #5
 8009d56:	4619      	mov	r1, r3
 8009d58:	4809      	ldr	r0, [pc, #36]	@ (8009d80 <JoystickControl+0xc0>)
 8009d5a:	f7fe fc49 	bl	80085f0 <USBD_HID_SendReport>
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000540 	.word	0x20000540
 8009d6c:	20000214 	.word	0x20000214
 8009d70:	200001f4 	.word	0x200001f4
 8009d74:	200001f5 	.word	0x200001f5
 8009d78:	200001f6 	.word	0x200001f6
 8009d7c:	200001f7 	.word	0x200001f7
 8009d80:	20000218 	.word	0x20000218

08009d84 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
  USBD_Clock_Config();
 8009d88:	f7ff ff60 	bl	8009c4c <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	490e      	ldr	r1, [pc, #56]	@ (8009dc8 <MX_USB_Device_Init+0x44>)
 8009d90:	480e      	ldr	r0, [pc, #56]	@ (8009dcc <MX_USB_Device_Init+0x48>)
 8009d92:	f7fe fcd1 	bl	8008738 <USBD_Init>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8009d9c:	f7f6 fbf8 	bl	8000590 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8009da0:	490b      	ldr	r1, [pc, #44]	@ (8009dd0 <MX_USB_Device_Init+0x4c>)
 8009da2:	480a      	ldr	r0, [pc, #40]	@ (8009dcc <MX_USB_Device_Init+0x48>)
 8009da4:	f7fe fcf8 	bl	8008798 <USBD_RegisterClass>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8009dae:	f7f6 fbef 	bl	8000590 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009db2:	4806      	ldr	r0, [pc, #24]	@ (8009dcc <MX_USB_Device_Init+0x48>)
 8009db4:	f7fe fd26 	bl	8008804 <USBD_Start>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <MX_USB_Device_Init+0x3e>
    Error_Handler();
 8009dbe:	f7f6 fbe7 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200000c0 	.word	0x200000c0
 8009dcc:	20000218 	.word	0x20000218
 8009dd0:	20000014 	.word	0x20000014

08009dd4 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2212      	movs	r2, #18
 8009de4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8009de6:	4b03      	ldr	r3, [pc, #12]	@ (8009df4 <USBD_HID_DeviceDescriptor+0x20>)
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	200000e0 	.word	0x200000e0

08009df8 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2204      	movs	r2, #4
 8009e08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e0a:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	200000f4 	.word	0x200000f4

08009e1c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	@ (8009e50 <USBD_HID_ProductStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	@ (8009e54 <USBD_HID_ProductStrDescriptor+0x38>)
 8009e34:	f7ff fe2e 	bl	8009a94 <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <USBD_HID_ProductStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	@ (8009e54 <USBD_HID_ProductStrDescriptor+0x38>)
 8009e40:	f7ff fe28 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <USBD_HID_ProductStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200004f4 	.word	0x200004f4
 8009e54:	0800a6b4 	.word	0x0800a6b4

08009e58 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	4904      	ldr	r1, [pc, #16]	@ (8009e78 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8009e68:	4804      	ldr	r0, [pc, #16]	@ (8009e7c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8009e6a:	f7ff fe13 	bl	8009a94 <USBD_GetString>
  return USBD_StrDesc;
 8009e6e:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	200004f4 	.word	0x200004f4
 8009e7c:	0800a6c8 	.word	0x0800a6c8

08009e80 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	221a      	movs	r2, #26
 8009e90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e92:	f000 f843 	bl	8009f1c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e96:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	200000f8 	.word	0x200000f8

08009ea4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4907      	ldr	r1, [pc, #28]	@ (8009ed8 <USBD_HID_ConfigStrDescriptor+0x34>)
 8009eba:	4808      	ldr	r0, [pc, #32]	@ (8009edc <USBD_HID_ConfigStrDescriptor+0x38>)
 8009ebc:	f7ff fdea 	bl	8009a94 <USBD_GetString>
 8009ec0:	e004      	b.n	8009ecc <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	4904      	ldr	r1, [pc, #16]	@ (8009ed8 <USBD_HID_ConfigStrDescriptor+0x34>)
 8009ec6:	4805      	ldr	r0, [pc, #20]	@ (8009edc <USBD_HID_ConfigStrDescriptor+0x38>)
 8009ec8:	f7ff fde4 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	@ (8009ed8 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200004f4 	.word	0x200004f4
 8009edc:	0800a6e0 	.word	0x0800a6e0

08009ee0 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	6039      	str	r1, [r7, #0]
 8009eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4907      	ldr	r1, [pc, #28]	@ (8009f14 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009ef6:	4808      	ldr	r0, [pc, #32]	@ (8009f18 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009ef8:	f7ff fdcc 	bl	8009a94 <USBD_GetString>
 8009efc:	e004      	b.n	8009f08 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	4904      	ldr	r1, [pc, #16]	@ (8009f14 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8009f02:	4805      	ldr	r0, [pc, #20]	@ (8009f18 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8009f04:	f7ff fdc6 	bl	8009a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f08:	4b02      	ldr	r3, [pc, #8]	@ (8009f14 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200004f4 	.word	0x200004f4
 8009f18:	0800a6ec 	.word	0x0800a6ec

08009f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f22:	4b0f      	ldr	r3, [pc, #60]	@ (8009f60 <Get_SerialNum+0x44>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f28:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <Get_SerialNum+0x48>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f68 <Get_SerialNum+0x4c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d009      	beq.n	8009f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f42:	2208      	movs	r2, #8
 8009f44:	4909      	ldr	r1, [pc, #36]	@ (8009f6c <Get_SerialNum+0x50>)
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f814 	bl	8009f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f4c:	2204      	movs	r2, #4
 8009f4e:	4908      	ldr	r1, [pc, #32]	@ (8009f70 <Get_SerialNum+0x54>)
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	f000 f80f 	bl	8009f74 <IntToUnicode>
  }
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	1fff7590 	.word	0x1fff7590
 8009f64:	1fff7594 	.word	0x1fff7594
 8009f68:	1fff7598 	.word	0x1fff7598
 8009f6c:	200000fa 	.word	0x200000fa
 8009f70:	2000010a 	.word	0x2000010a

08009f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
 8009f8a:	e027      	b.n	8009fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	0f1b      	lsrs	r3, r3, #28
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d80b      	bhi.n	8009fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	0f1b      	lsrs	r3, r3, #28
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3230      	adds	r2, #48	@ 0x30
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	e00a      	b.n	8009fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	0f1b      	lsrs	r3, r3, #28
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	440b      	add	r3, r1
 8009fbc:	3237      	adds	r2, #55	@ 0x37
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	3301      	adds	r3, #1
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
 8009fdc:	7dfa      	ldrb	r2, [r7, #23]
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d3d3      	bcc.n	8009f8c <IntToUnicode+0x18>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <LL_AHB2_GRP1_EnableClock>:
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a000:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4313      	orrs	r3, r2
 800a008:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a00a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a00e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4013      	ands	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a016:	68fb      	ldr	r3, [r7, #12]
}
 800a018:	bf00      	nop
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <LL_APB1_GRP1_EnableClock>:
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a02c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4313      	orrs	r3, r2
 800a03a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a03c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a040:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4013      	ands	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a048:	68fb      	ldr	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
	...

0800a058 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	609a      	str	r2, [r3, #8]
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a13      	ldr	r2, [pc, #76]	@ (800a0c4 <HAL_PCD_MspInit+0x6c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d120      	bne.n	800a0bc <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a07a:	2001      	movs	r0, #1
 800a07c:	f7ff ffb9 	bl	8009ff2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a080:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a084:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a086:	2302      	movs	r3, #2
 800a088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a08e:	2303      	movs	r3, #3
 800a090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a092:	230a      	movs	r3, #10
 800a094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a096:	f107 030c 	add.w	r3, r7, #12
 800a09a:	4619      	mov	r1, r3
 800a09c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0a0:	f7f8 f896 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0a4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a0a8:	f7ff ffbc 	bl	800a024 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2014      	movs	r0, #20
 800a0b2:	f7f7 fde4 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a0b6:	2014      	movs	r0, #20
 800a0b8:	f7f7 fdfb 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a0bc:	bf00      	nop
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	40006800 	.word	0x40006800

0800a0c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe fbdd 	bl	800889e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	440b      	add	r3, r1
 800a10c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	4619      	mov	r1, r3
 800a116:	f7fe fc17 	bl	8008948 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	440b      	add	r3, r1
 800a142:	3324      	adds	r3, #36	@ 0x24
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	4619      	mov	r1, r3
 800a14a:	f7fe fcb0 	bl	8008aae <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fdea 	bl	8008d3e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a17a:	2301      	movs	r3, #1
 800a17c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	795b      	ldrb	r3, [r3, #5]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d001      	beq.n	800a18a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a186:	f7f6 fa03 	bl	8000590 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a190:	7bfa      	ldrb	r2, [r7, #15]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe fd8e 	bl	8008cb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fe fd36 	bl	8008c12 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a1a6:	bf00      	nop
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fd89 	bl	8008cd6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7a5b      	ldrb	r3, [r3, #9]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d005      	beq.n	800a1d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1cc:	4b04      	ldr	r3, [pc, #16]	@ (800a1e0 <HAL_PCD_SuspendCallback+0x30>)
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	4a03      	ldr	r2, [pc, #12]	@ (800a1e0 <HAL_PCD_SuspendCallback+0x30>)
 800a1d2:	f043 0306 	orr.w	r3, r3, #6
 800a1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	e000ed00 	.word	0xe000ed00

0800a1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7a5b      	ldrb	r3, [r3, #9]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d007      	beq.n	800a204 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1f4:	4b08      	ldr	r3, [pc, #32]	@ (800a218 <HAL_PCD_ResumeCallback+0x34>)
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	4a07      	ldr	r2, [pc, #28]	@ (800a218 <HAL_PCD_ResumeCallback+0x34>)
 800a1fa:	f023 0306 	bic.w	r3, r3, #6
 800a1fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a200:	f000 f9d6 	bl	800a5b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fd7f 	bl	8008d0e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	e000ed00 	.word	0xe000ed00

0800a21c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a224:	4a23      	ldr	r2, [pc, #140]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a21      	ldr	r2, [pc, #132]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a230:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800a234:	f7f9 fe92 	bl	8003f5c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800a238:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a23a:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b8 <USBD_LL_Init+0x9c>)
 800a23c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a23e:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a240:	2208      	movs	r2, #8
 800a242:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a244:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a246:	2202      	movs	r2, #2
 800a248:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a24a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a24c:	2202      	movs	r2, #2
 800a24e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a250:	4b18      	ldr	r3, [pc, #96]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a252:	2200      	movs	r2, #0
 800a254:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a256:	4b17      	ldr	r3, [pc, #92]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a258:	2200      	movs	r2, #0
 800a25a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a25c:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a25e:	2200      	movs	r2, #0
 800a260:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a262:	4b14      	ldr	r3, [pc, #80]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a264:	2200      	movs	r2, #0
 800a266:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a268:	4812      	ldr	r0, [pc, #72]	@ (800a2b4 <USBD_LL_Init+0x98>)
 800a26a:	f7f8 f921 	bl	80024b0 <HAL_PCD_Init>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800a274:	f7f6 f98c 	bl	8000590 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a27e:	2318      	movs	r3, #24
 800a280:	2200      	movs	r2, #0
 800a282:	2100      	movs	r1, #0
 800a284:	f7f9 fdde 	bl	8003e44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a28e:	2358      	movs	r3, #88	@ 0x58
 800a290:	2200      	movs	r2, #0
 800a292:	2180      	movs	r1, #128	@ 0x80
 800a294:	f7f9 fdd6 	bl	8003e44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a29e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2181      	movs	r1, #129	@ 0x81
 800a2a6:	f7f9 fdcd 	bl	8003e44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20000540 	.word	0x20000540
 800a2b8:	40006800 	.word	0x40006800

0800a2bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7f8 f9ba 	bl	800264c <HAL_PCD_Start>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f96e 	bl	800a5c0 <USBD_Get_USB_Status>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	461a      	mov	r2, r3
 800a300:	4603      	mov	r3, r0
 800a302:	70fb      	strb	r3, [r7, #3]
 800a304:	460b      	mov	r3, r1
 800a306:	70bb      	strb	r3, [r7, #2]
 800a308:	4613      	mov	r3, r2
 800a30a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a31a:	78bb      	ldrb	r3, [r7, #2]
 800a31c:	883a      	ldrh	r2, [r7, #0]
 800a31e:	78f9      	ldrb	r1, [r7, #3]
 800a320:	f7f8 fb01 	bl	8002926 <HAL_PCD_EP_Open>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 f948 	bl	800a5c0 <USBD_Get_USB_Status>
 800a330:	4603      	mov	r3, r0
 800a332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a334:	7bbb      	ldrb	r3, [r7, #14]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	460b      	mov	r3, r1
 800a348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f8 fb3f 	bl	80029e0 <HAL_PCD_EP_Close>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 f929 	bl	800a5c0 <USBD_Get_USB_Status>
 800a36e:	4603      	mov	r3, r0
 800a370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a372:	7bbb      	ldrb	r3, [r7, #14]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a396:	78fa      	ldrb	r2, [r7, #3]
 800a398:	4611      	mov	r1, r2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f8 fbd0 	bl	8002b40 <HAL_PCD_EP_SetStall>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f90a 	bl	800a5c0 <USBD_Get_USB_Status>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f8 fc03 	bl	8002be4 <HAL_PCD_EP_ClrStall>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f8eb 	bl	800a5c0 <USBD_Get_USB_Status>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a40a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a40c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a410:	2b00      	cmp	r3, #0
 800a412:	da0b      	bge.n	800a42c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a41a:	68f9      	ldr	r1, [r7, #12]
 800a41c:	4613      	mov	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	4413      	add	r3, r2
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	440b      	add	r3, r1
 800a426:	3312      	adds	r3, #18
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	e00b      	b.n	800a444 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	440b      	add	r3, r1
 800a43e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a442:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	4611      	mov	r1, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f8 fa35 	bl	80028de <HAL_PCD_SetAddress>
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f8a0 	bl	800a5c0 <USBD_Get_USB_Status>
 800a480:	4603      	mov	r3, r0
 800a482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a484:	7bbb      	ldrb	r3, [r7, #14]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b086      	sub	sp, #24
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	603b      	str	r3, [r7, #0]
 800a49a:	460b      	mov	r3, r1
 800a49c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4ac:	7af9      	ldrb	r1, [r7, #11]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	f7f8 fb0e 	bl	8002ad2 <HAL_PCD_EP_Transmit>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 f87f 	bl	800a5c0 <USBD_Get_USB_Status>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4ee:	7af9      	ldrb	r1, [r7, #11]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	f7f8 fabc 	bl	8002a70 <HAL_PCD_EP_Receive>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f85e 	bl	800a5c0 <USBD_Get_USB_Status>
 800a504:	4603      	mov	r3, r0
 800a506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a508:	7dbb      	ldrb	r3, [r7, #22]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
	...

0800a514 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a520:	78fb      	ldrb	r3, [r7, #3]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_PCDEx_LPM_Callback+0x18>
 800a526:	2b01      	cmp	r3, #1
 800a528:	d013      	beq.n	800a552 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a52a:	e023      	b.n	800a574 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7a5b      	ldrb	r3, [r3, #9]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a534:	f000 f83c 	bl	800a5b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a538:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <HAL_PCDEx_LPM_Callback+0x68>)
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	4a0f      	ldr	r2, [pc, #60]	@ (800a57c <HAL_PCDEx_LPM_Callback+0x68>)
 800a53e:	f023 0306 	bic.w	r3, r3, #6
 800a542:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fbdf 	bl	8008d0e <USBD_LL_Resume>
    break;
 800a550:	e010      	b.n	800a574 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fbbc 	bl	8008cd6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	7a5b      	ldrb	r3, [r3, #9]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a566:	4b05      	ldr	r3, [pc, #20]	@ (800a57c <HAL_PCDEx_LPM_Callback+0x68>)
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	4a04      	ldr	r2, [pc, #16]	@ (800a57c <HAL_PCDEx_LPM_Callback+0x68>)
 800a56c:	f043 0306 	orr.w	r3, r3, #6
 800a570:	6113      	str	r3, [r2, #16]
    break;
 800a572:	bf00      	nop
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	e000ed00 	.word	0xe000ed00

0800a580 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a588:	4b03      	ldr	r3, [pc, #12]	@ (800a598 <USBD_static_malloc+0x18>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	2000081c 	.word	0x2000081c

0800a59c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
void SystemClockConfig_Resume(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a5b4:	f7f5 fe78 	bl	80002a8 <SystemClock_Config>
  USBD_Clock_Config();
 800a5b8:	f7ff fb48 	bl	8009c4c <USBD_Clock_Config>
}
 800a5bc:	bf00      	nop
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d817      	bhi.n	800a604 <USBD_Get_USB_Status+0x44>
 800a5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <USBD_Get_USB_Status+0x1c>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a5ed 	.word	0x0800a5ed
 800a5e0:	0800a5f3 	.word	0x0800a5f3
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a5ff 	.word	0x0800a5ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f0:	e00b      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f6:	e008      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fc:	e005      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5fe:	2303      	movs	r3, #3
 800a600:	73fb      	strb	r3, [r7, #15]
    break;
 800a602:	e002      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	73fb      	strb	r3, [r7, #15]
    break;
 800a608:	bf00      	nop
  }
  return usb_status;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <memset>:
 800a618:	4402      	add	r2, r0
 800a61a:	4603      	mov	r3, r0
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d100      	bne.n	800a622 <memset+0xa>
 800a620:	4770      	bx	lr
 800a622:	f803 1b01 	strb.w	r1, [r3], #1
 800a626:	e7f9      	b.n	800a61c <memset+0x4>

0800a628 <__libc_init_array>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	4d0d      	ldr	r5, [pc, #52]	@ (800a660 <__libc_init_array+0x38>)
 800a62c:	4c0d      	ldr	r4, [pc, #52]	@ (800a664 <__libc_init_array+0x3c>)
 800a62e:	1b64      	subs	r4, r4, r5
 800a630:	10a4      	asrs	r4, r4, #2
 800a632:	2600      	movs	r6, #0
 800a634:	42a6      	cmp	r6, r4
 800a636:	d109      	bne.n	800a64c <__libc_init_array+0x24>
 800a638:	4d0b      	ldr	r5, [pc, #44]	@ (800a668 <__libc_init_array+0x40>)
 800a63a:	4c0c      	ldr	r4, [pc, #48]	@ (800a66c <__libc_init_array+0x44>)
 800a63c:	f000 f818 	bl	800a670 <_init>
 800a640:	1b64      	subs	r4, r4, r5
 800a642:	10a4      	asrs	r4, r4, #2
 800a644:	2600      	movs	r6, #0
 800a646:	42a6      	cmp	r6, r4
 800a648:	d105      	bne.n	800a656 <__libc_init_array+0x2e>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a650:	4798      	blx	r3
 800a652:	3601      	adds	r6, #1
 800a654:	e7ee      	b.n	800a634 <__libc_init_array+0xc>
 800a656:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65a:	4798      	blx	r3
 800a65c:	3601      	adds	r6, #1
 800a65e:	e7f2      	b.n	800a646 <__libc_init_array+0x1e>
 800a660:	0800a77c 	.word	0x0800a77c
 800a664:	0800a77c 	.word	0x0800a77c
 800a668:	0800a77c 	.word	0x0800a77c
 800a66c:	0800a780 	.word	0x0800a780

0800a670 <_init>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	bf00      	nop
 800a674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a676:	bc08      	pop	{r3}
 800a678:	469e      	mov	lr, r3
 800a67a:	4770      	bx	lr

0800a67c <_fini>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	bf00      	nop
 800a680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a682:	bc08      	pop	{r3}
 800a684:	469e      	mov	lr, r3
 800a686:	4770      	bx	lr
