
USB_Gamepad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800b334  0800b334  0000c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b430  0800b430  0000c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b434  0800b434  0000c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000118  20000008  0800b438  0000d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000770  20000120  0800b550  0000d120  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000890  0800b550  0000d890  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b716  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f24  00000000  00000000  00028866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d60  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001650  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025e25  00000000  00000000  0002fb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001c547  00000000  00000000  00055965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ede17  00000000  00000000  00071eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015fcc3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007bf8  00000000  00000000  0015fd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  00167900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000120 	.word	0x20000120
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b31c 	.word	0x0800b31c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000124 	.word	0x20000124
 8000178:	0800b31c 	.word	0x0800b31c

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	/*
	 * To minimize the space in the hardware, the following configuration must be noted:
	 * 	1. The axis of X & Y is switched
	 * 	2. The X-axis is inverted polarity
	 * */
	joystick_X = ~(int8_t)rawADC[1] - 128;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 80001ea:	785b      	ldrb	r3, [r3, #1]
 80001ec:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b0e      	ldr	r3, [pc, #56]	@ (800022c <HAL_ADC_ConvCpltCallback+0x4c>)
 80001f4:	701a      	strb	r2, [r3, #0]
	joystick_Y = (int8_t)rawADC[0] - 128;
 80001f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	3b80      	subs	r3, #128	@ 0x80
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <HAL_ADC_ConvCpltCallback+0x50>)
 8000200:	701a      	strb	r2, [r3, #0]
	joystick_RX = ~(int8_t)rawADC[3] - 128;
 8000202:	4b09      	ldr	r3, [pc, #36]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 8000204:	78db      	ldrb	r3, [r3, #3]
 8000206:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <HAL_ADC_ConvCpltCallback+0x54>)
 800020e:	701a      	strb	r2, [r3, #0]
	joystick_RY = (int8_t)rawADC[2] - 128;
 8000210:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <HAL_ADC_ConvCpltCallback+0x48>)
 8000212:	789b      	ldrb	r3, [r3, #2]
 8000214:	3b80      	subs	r3, #128	@ 0x80
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <HAL_ADC_ConvCpltCallback+0x58>)
 800021a:	701a      	strb	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	2000025c 	.word	0x2000025c
 800022c:	20000256 	.word	0x20000256
 8000230:	20000257 	.word	0x20000257
 8000234:	20000258 	.word	0x20000258
 8000238:	20000259 	.word	0x20000259

0800023c <controlButtonState>:
 * 		debounceDelay		button delay read
 * 		returnState			State to change when the button is pressed
 * @retval None
**/
void controlButtonState(button_t *button, uint32_t debounceDelay, bool *returnState)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
	// Ignoring noise or accidentally pressed
	if(button->currentState != button->lastState)
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	785a      	ldrb	r2, [r3, #1]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	789b      	ldrb	r3, [r3, #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d004      	beq.n	800025e <controlButtonState+0x22>
		button->lastDebounceTime = HAL_GetTick();
 8000254:	f000 fd76 	bl	8000d44 <HAL_GetTick>
 8000258:	4602      	mov	r2, r0
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	605a      	str	r2, [r3, #4]

	// Read the actual state from the button
	if((HAL_GetTick() - button->lastDebounceTime) > debounceDelay){
 800025e:	f000 fd71 	bl	8000d44 <HAL_GetTick>
 8000262:	4602      	mov	r2, r0
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	429a      	cmp	r2, r3
 800026e:	d210      	bcs.n	8000292 <controlButtonState+0x56>
		if(button->readState != button->currentState){
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	781a      	ldrb	r2, [r3, #0]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	785b      	ldrb	r3, [r3, #1]
 8000278:	429a      	cmp	r2, r3
 800027a:	d00a      	beq.n	8000292 <controlButtonState+0x56>
			button->currentState = button->readState;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	705a      	strb	r2, [r3, #1]
			if(button->currentState == GPIO_PIN_RESET){
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d102      	bne.n	8000292 <controlButtonState+0x56>
				*returnState = true;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b09a      	sub	sp, #104	@ 0x68
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  button_t bt_leftJS		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002a2:	4aa6      	ldr	r2, [pc, #664]	@ (800053c <main+0x2a0>)
 80002a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ac:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_rightJS		= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002b0:	4aa2      	ldr	r2, [pc, #648]	@ (800053c <main+0x2a0>)
 80002b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80002b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ba:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_a 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002be:	4a9f      	ldr	r2, [pc, #636]	@ (800053c <main+0x2a0>)
 80002c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c8:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_b 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002cc:	4a9b      	ldr	r2, [pc, #620]	@ (800053c <main+0x2a0>)
 80002ce:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80002d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d6:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_x 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002da:	4a98      	ldr	r2, [pc, #608]	@ (800053c <main+0x2a0>)
 80002dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e4:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t bt_y 			= {GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_SET, 0};
 80002e8:	4a94      	ldr	r2, [pc, #592]	@ (800053c <main+0x2a0>)
 80002ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f2:	e883 0003 	stmia.w	r3, {r0, r1}
  button_t arrButtons[6] 	= {bt_leftJS, bt_rightJS, bt_a, bt_b, bt_x, bt_y};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80002fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000300:	e883 0003 	stmia.w	r3, {r0, r1}
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800030c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000310:	e883 0003 	stmia.w	r3, {r0, r1}
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800031c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000320:	e883 0003 	stmia.w	r3, {r0, r1}
 8000324:	f107 031c 	add.w	r3, r7, #28
 8000328:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800032c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000330:	e883 0003 	stmia.w	r3, {r0, r1}
 8000334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000338:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800033c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000340:	e883 0003 	stmia.w	r3, {r0, r1}
 8000344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000348:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800034c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000350:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000354:	f000 fc88 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000358:	f000 f90a 	bl	8000570 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800035c:	f000 f974 	bl	8000648 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 faa0 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 fa8c 	bl	8000880 <MX_DMA_Init>
  MX_ADC1_Init();
 8000368:	f000 f9a0 	bl	80006ac <MX_ADC1_Init>
  MX_USB_Device_Init();
 800036c:	f00a fb60 	bl	800aa30 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000370:	f000 fa32 	bl	80007d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)rawADC, 4);
 8000374:	2204      	movs	r2, #4
 8000376:	4972      	ldr	r1, [pc, #456]	@ (8000540 <main+0x2a4>)
 8000378:	4872      	ldr	r0, [pc, #456]	@ (8000544 <main+0x2a8>)
 800037a:	f001 f843 	bl	8001404 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 800037e:	4872      	ldr	r0, [pc, #456]	@ (8000548 <main+0x2ac>)
 8000380:	f005 fe54 	bl	800602c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  arrButtons[0].readState	= HAL_GPIO_ReadPin(joystick_sw_GPIO_Port, joystick_sw_Pin);
 8000384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800038c:	f002 fa9a 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	713b      	strb	r3, [r7, #4]
	  arrButtons[1].readState 	= HAL_GPIO_ReadPin(joystick_rsw_GPIO_Port, joystick_rsw_Pin);
 8000394:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000398:	486c      	ldr	r0, [pc, #432]	@ (800054c <main+0x2b0>)
 800039a:	f002 fa93 	bl	80028c4 <HAL_GPIO_ReadPin>
 800039e:	4603      	mov	r3, r0
 80003a0:	733b      	strb	r3, [r7, #12]
	  arrButtons[2].readState	= HAL_GPIO_ReadPin(bt_a_GPIO_Port, bt_a_Pin);
 80003a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a6:	4869      	ldr	r0, [pc, #420]	@ (800054c <main+0x2b0>)
 80003a8:	f002 fa8c 	bl	80028c4 <HAL_GPIO_ReadPin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	753b      	strb	r3, [r7, #20]
	  arrButtons[3].readState 	= HAL_GPIO_ReadPin(bt_b_GPIO_Port, bt_b_Pin);
 80003b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b8:	f002 fa84 	bl	80028c4 <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	773b      	strb	r3, [r7, #28]
	  arrButtons[4].readState	= HAL_GPIO_ReadPin(bt_x_GPIO_Port, bt_x_Pin);
 80003c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c8:	f002 fa7c 	bl	80028c4 <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  arrButtons[5].readState 	= HAL_GPIO_ReadPin(bt_y_GPIO_Port, bt_y_Pin);
 80003d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d6:	485d      	ldr	r0, [pc, #372]	@ (800054c <main+0x2b0>)
 80003d8:	f002 fa74 	bl	80028c4 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	  controlButtonState(&arrButtons[0], 50, &bt_states.leftJS_isPressed);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4a5a      	ldr	r2, [pc, #360]	@ (8000550 <main+0x2b4>)
 80003e6:	2132      	movs	r1, #50	@ 0x32
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff27 	bl	800023c <controlButtonState>
	  controlButtonState(&arrButtons[1], 50, &bt_states.rightJS_isPressed);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	3308      	adds	r3, #8
 80003f2:	4a58      	ldr	r2, [pc, #352]	@ (8000554 <main+0x2b8>)
 80003f4:	2132      	movs	r1, #50	@ 0x32
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff20 	bl	800023c <controlButtonState>
	  controlButtonState(&arrButtons[2], 50, &bt_states.a_isPressed);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	3310      	adds	r3, #16
 8000400:	4a55      	ldr	r2, [pc, #340]	@ (8000558 <main+0x2bc>)
 8000402:	2132      	movs	r1, #50	@ 0x32
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff19 	bl	800023c <controlButtonState>
	  controlButtonState(&arrButtons[3], 50, &bt_states.b_isPressed);
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	3318      	adds	r3, #24
 800040e:	4a53      	ldr	r2, [pc, #332]	@ (800055c <main+0x2c0>)
 8000410:	2132      	movs	r1, #50	@ 0x32
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff12 	bl	800023c <controlButtonState>
	  controlButtonState(&arrButtons[4], 50, &bt_states.x_isPressed);
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	3320      	adds	r3, #32
 800041c:	4a50      	ldr	r2, [pc, #320]	@ (8000560 <main+0x2c4>)
 800041e:	2132      	movs	r1, #50	@ 0x32
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff0b 	bl	800023c <controlButtonState>
	  controlButtonState(&arrButtons[5], 50, &bt_states.y_isPressed);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	3328      	adds	r3, #40	@ 0x28
 800042a:	4a4e      	ldr	r2, [pc, #312]	@ (8000564 <main+0x2c8>)
 800042c:	2132      	movs	r1, #50	@ 0x32
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff04 	bl	800023c <controlButtonState>

	  bt_gamepad[0] = (bt_states.y_isPressed << 3) | (bt_states.x_isPressed << 0) | (bt_states.b_isPressed << 2) | (bt_states.a_isPressed << 1);
 8000434:	4b46      	ldr	r3, [pc, #280]	@ (8000550 <main+0x2b4>)
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	b25a      	sxtb	r2, r3
 800043c:	4b44      	ldr	r3, [pc, #272]	@ (8000550 <main+0x2b4>)
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	b25b      	sxtb	r3, r3
 8000442:	4313      	orrs	r3, r2
 8000444:	b25a      	sxtb	r2, r3
 8000446:	4b42      	ldr	r3, [pc, #264]	@ (8000550 <main+0x2b4>)
 8000448:	78db      	ldrb	r3, [r3, #3]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	b25b      	sxtb	r3, r3
 800044e:	4313      	orrs	r3, r2
 8000450:	b25a      	sxtb	r2, r3
 8000452:	4b3f      	ldr	r3, [pc, #252]	@ (8000550 <main+0x2b4>)
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	b25b      	sxtb	r3, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	b25b      	sxtb	r3, r3
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b41      	ldr	r3, [pc, #260]	@ (8000568 <main+0x2cc>)
 8000462:	701a      	strb	r2, [r3, #0]
	  bt_gamepad[1] = (bt_states.rightJS_isPressed << 2) | (bt_states.leftJS_isPressed << 1);
 8000464:	4b3a      	ldr	r3, [pc, #232]	@ (8000550 <main+0x2b4>)
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	b25a      	sxtb	r2, r3
 800046c:	4b38      	ldr	r3, [pc, #224]	@ (8000550 <main+0x2b4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	b25b      	sxtb	r3, r3
 8000474:	4313      	orrs	r3, r2
 8000476:	b25b      	sxtb	r3, r3
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b3b      	ldr	r3, [pc, #236]	@ (8000568 <main+0x2cc>)
 800047c:	705a      	strb	r2, [r3, #1]

	  // Normalize state every 200 ms
	  if(HAL_GetTick() - prevTime >= 200){
 800047e:	f000 fc61 	bl	8000d44 <HAL_GetTick>
 8000482:	4602      	mov	r2, r0
 8000484:	4b39      	ldr	r3, [pc, #228]	@ (800056c <main+0x2d0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	2bc7      	cmp	r3, #199	@ 0xc7
 800048c:	d933      	bls.n	80004f6 <main+0x25a>
		  prevTime = HAL_GetTick();
 800048e:	f000 fc59 	bl	8000d44 <HAL_GetTick>
 8000492:	4603      	mov	r3, r0
 8000494:	4a35      	ldr	r2, [pc, #212]	@ (800056c <main+0x2d0>)
 8000496:	6013      	str	r3, [r2, #0]
		  if(bt_states.leftJS_isPressed)
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <main+0x2b4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d003      	beq.n	80004a8 <main+0x20c>
			  bt_states.leftJS_isPressed = false;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <main+0x2b4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e026      	b.n	80004f6 <main+0x25a>
		  else if(bt_states.rightJS_isPressed)
 80004a8:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <main+0x2b4>)
 80004aa:	785b      	ldrb	r3, [r3, #1]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d003      	beq.n	80004b8 <main+0x21c>
			  bt_states.rightJS_isPressed = false;
 80004b0:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <main+0x2b4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	705a      	strb	r2, [r3, #1]
 80004b6:	e01e      	b.n	80004f6 <main+0x25a>
		  else if(bt_states.a_isPressed)
 80004b8:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <main+0x2b4>)
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <main+0x22c>
			  bt_states.a_isPressed = false;
 80004c0:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <main+0x2b4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	709a      	strb	r2, [r3, #2]
 80004c6:	e016      	b.n	80004f6 <main+0x25a>
		  else if(bt_states.b_isPressed)
 80004c8:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <main+0x2b4>)
 80004ca:	78db      	ldrb	r3, [r3, #3]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <main+0x23c>
			  bt_states.b_isPressed = false;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <main+0x2b4>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	70da      	strb	r2, [r3, #3]
 80004d6:	e00e      	b.n	80004f6 <main+0x25a>
		  else if(bt_states.x_isPressed)
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <main+0x2b4>)
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d003      	beq.n	80004e8 <main+0x24c>
			  bt_states.x_isPressed = false;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <main+0x2b4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	711a      	strb	r2, [r3, #4]
 80004e6:	e006      	b.n	80004f6 <main+0x25a>
		  else if(bt_states.y_isPressed)
 80004e8:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <main+0x2b4>)
 80004ea:	795b      	ldrb	r3, [r3, #5]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <main+0x25a>
			  bt_states.y_isPressed = false;
 80004f0:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <main+0x2b4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	715a      	strb	r2, [r3, #5]
	  }


	  // Save the reading for the next iteration
	  for(uint8_t i=0; i<6; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80004fc:	e013      	b.n	8000526 <main+0x28a>
		  arrButtons[i].lastState	= arrButtons[i].readState;
 80004fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000502:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	3368      	adds	r3, #104	@ 0x68
 800050a:	443b      	add	r3, r7
 800050c:	f813 1c64 	ldrb.w	r1, [r3, #-100]
 8000510:	00d3      	lsls	r3, r2, #3
 8000512:	3368      	adds	r3, #104	@ 0x68
 8000514:	443b      	add	r3, r7
 8000516:	460a      	mov	r2, r1
 8000518:	f803 2c62 	strb.w	r2, [r3, #-98]
	  for(uint8_t i=0; i<6; i++)
 800051c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000520:	3301      	adds	r3, #1
 8000522:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000526:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800052a:	2b05      	cmp	r3, #5
 800052c:	d9e7      	bls.n	80004fe <main+0x262>

	  // Send the Gamepad reading through the USB
	  JoystickControl(bt_gamepad);
 800052e:	480e      	ldr	r0, [pc, #56]	@ (8000568 <main+0x2cc>)
 8000530:	f00a fa10 	bl	800a954 <JoystickControl>
	  HAL_Delay(10);
 8000534:	200a      	movs	r0, #10
 8000536:	f000 fc1d 	bl	8000d74 <HAL_Delay>
	  arrButtons[0].readState	= HAL_GPIO_ReadPin(joystick_sw_GPIO_Port, joystick_sw_Pin);
 800053a:	e723      	b.n	8000384 <main+0xe8>
 800053c:	0800b334 	.word	0x0800b334
 8000540:	2000025c 	.word	0x2000025c
 8000544:	2000013c 	.word	0x2000013c
 8000548:	20000200 	.word	0x20000200
 800054c:	48000800 	.word	0x48000800
 8000550:	2000024c 	.word	0x2000024c
 8000554:	2000024d 	.word	0x2000024d
 8000558:	2000024e 	.word	0x2000024e
 800055c:	2000024f 	.word	0x2000024f
 8000560:	20000250 	.word	0x20000250
 8000564:	20000251 	.word	0x20000251
 8000568:	20000254 	.word	0x20000254
 800056c:	20000260 	.word	0x20000260

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09a      	sub	sp, #104	@ 0x68
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2248      	movs	r2, #72	@ 0x48
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f00a fea0 	bl	800b2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <SystemClock_Config+0xd4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800059e:	4a29      	ldr	r2, [pc, #164]	@ (8000644 <SystemClock_Config+0xd4>)
 80005a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <SystemClock_Config+0xd4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80005b2:	2326      	movs	r3, #38	@ 0x26
 80005b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2340      	movs	r3, #64	@ 0x40
 80005c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005cc:	2360      	movs	r3, #96	@ 0x60
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005dc:	2320      	movs	r3, #32
 80005de:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80005e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80005ea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fa40 	bl	8004a7c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000602:	f000 f97f 	bl	8000904 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000606:	236f      	movs	r3, #111	@ 0x6f
 8000608:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800061a:	2380      	movs	r3, #128	@ 0x80
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fd9c 	bl	8005164 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f967 	bl	8000904 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000636:	f005 fb50 	bl	8005cda <HAL_RCCEx_EnableMSIPLLMode>
}
 800063a:	bf00      	nop
 800063c:	3768      	adds	r7, #104	@ 0x68
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	58000400 	.word	0x58000400

08000648 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2250      	movs	r2, #80	@ 0x50
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f00a fe35 	bl	800b2c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800065a:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000660:	2318      	movs	r3, #24
 8000662:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800066a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000670:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000676:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800067a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800067c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000680:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000682:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f9ab 	bl	80059ee <HAL_RCCEx_PeriphCLKConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800069e:	f000 f931 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c2:	4b3f      	ldr	r3, [pc, #252]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006c4:	4a3f      	ldr	r2, [pc, #252]	@ (80007c4 <MX_ADC1_Init+0x118>)
 80006c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	4b3d      	ldr	r3, [pc, #244]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006d0:	4b3b      	ldr	r3, [pc, #236]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006d2:	2210      	movs	r2, #16
 80006d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006dc:	4b38      	ldr	r3, [pc, #224]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006de:	2201      	movs	r2, #1
 80006e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006e2:	4b37      	ldr	r3, [pc, #220]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e8:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ee:	4b34      	ldr	r3, [pc, #208]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80006f4:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fa:	4b31      	ldr	r3, [pc, #196]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000702:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <MX_ADC1_Init+0x114>)
 8000704:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_ADC1_Init+0x114>)
 800070c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000712:	4b2b      	ldr	r3, [pc, #172]	@ (80007c0 <MX_ADC1_Init+0x114>)
 8000714:	2201      	movs	r2, #1
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <MX_ADC1_Init+0x114>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <MX_ADC1_Init+0x114>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000728:	4825      	ldr	r0, [pc, #148]	@ (80007c0 <MX_ADC1_Init+0x114>)
 800072a:	f000 fd1f 	bl	800116c <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f8e6 	bl	8000904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000738:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <MX_ADC1_Init+0x11c>)
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2306      	movs	r3, #6
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000740:	2307      	movs	r3, #7
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000744:	237f      	movs	r3, #127	@ 0x7f
 8000746:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000748:	2304      	movs	r3, #4
 800074a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <MX_ADC1_Init+0x114>)
 8000756:	f000 feed 	bl	8001534 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000760:	f000 f8d0 	bl	8000904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_ADC1_Init+0x120>)
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000768:	230c      	movs	r3, #12
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <MX_ADC1_Init+0x114>)
 8000772:	f000 fedf 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800077c:	f000 f8c2 	bl	8000904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_ADC1_Init+0x124>)
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000784:	2312      	movs	r3, #18
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ADC1_Init+0x114>)
 800078e:	f000 fed1 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000798:	f000 f8b4 	bl	8000904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_ADC1_Init+0x128>)
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007a0:	2318      	movs	r3, #24
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_ADC1_Init+0x114>)
 80007aa:	f000 fec3 	bl	8001534 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80007b4:	f000 f8a6 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000013c 	.word	0x2000013c
 80007c4:	50040000 	.word	0x50040000
 80007c8:	04300002 	.word	0x04300002
 80007cc:	08600004 	.word	0x08600004
 80007d0:	19200040 	.word	0x19200040
 80007d4:	14f00020 	.word	0x14f00020

080007d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <MX_TIM1_Init+0xa0>)
 80007f8:	4a20      	ldr	r2, [pc, #128]	@ (800087c <MX_TIM1_Init+0xa4>)
 80007fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000-1;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_TIM1_Init+0xa0>)
 80007fe:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_TIM1_Init+0xa0>)
 800080c:	2263      	movs	r2, #99	@ 0x63
 800080e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_TIM1_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000822:	4815      	ldr	r0, [pc, #84]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000824:	f005 fbab 	bl	8005f7e <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800082e:	f000 f869 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480e      	ldr	r0, [pc, #56]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000840:	f005 fd41 	bl	80062c6 <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800084a:	f000 f85b 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800084e:	2320      	movs	r3, #32
 8000850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <MX_TIM1_Init+0xa0>)
 8000860:	f005 ff38 	bl	80066d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800086a:	f000 f84b 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000200 	.word	0x20000200
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000884:	2004      	movs	r0, #4
 8000886:	f7ff fc79 	bl	800017c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fc76 	bl	800017c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	200b      	movs	r0, #11
 8000896:	f001 fbfc 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800089a:	200b      	movs	r0, #11
 800089c:	f001 fc13 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b8:	2004      	movs	r0, #4
 80008ba:	f7ff fc78 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fc75 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : bt_y_Pin joystick_rsw_Pin bt_a_Pin */
  GPIO_InitStruct.Pin = bt_y_Pin|joystick_rsw_Pin|bt_a_Pin;
 80008c4:	f44f 5350 	mov.w	r3, #13312	@ 0x3400
 80008c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	480a      	ldr	r0, [pc, #40]	@ (8000900 <MX_GPIO_Init+0x5c>)
 80008d8:	f001 fe84 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : bt_b_Pin bt_x_Pin joystick_sw_Pin */
  GPIO_InitStruct.Pin = bt_b_Pin|bt_x_Pin|joystick_sw_Pin;
 80008dc:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f001 fe77 	bl	80025e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	48000800 	.word	0x48000800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <LL_AHB2_GRP1_EnableClock>:
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800091c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800091e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4313      	orrs	r3, r2
 8000926:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000942:	b480      	push	{r7}
 8000944:	b085      	sub	sp, #20
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800094a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800094e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4313      	orrs	r3, r2
 8000958:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800095e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a29      	ldr	r2, [pc, #164]	@ (8000a48 <HAL_ADC_MspInit+0xc4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d14c      	bne.n	8000a40 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009aa:	f7ff ffb1 	bl	8000910 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2004      	movs	r0, #4
 80009b0:	f7ff ffae 	bl	8000910 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ffab 	bl	8000910 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = joystick_x_Pin|joystick_y_Pin;
 80009ba:	2303      	movs	r3, #3
 80009bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009be:	2303      	movs	r3, #3
 80009c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	@ (8000a4c <HAL_ADC_MspInit+0xc8>)
 80009ce:	f001 fe09 	bl	80025e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = joystick_ry_Pin|joystick_rx_Pin;
 80009d2:	2303      	movs	r3, #3
 80009d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f001 fdfc 	bl	80025e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 80009ee:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_ADC_MspInit+0xd0>)
 80009f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 80009f4:	2205      	movs	r2, #5
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a06:	2280      	movs	r2, #128	@ 0x80
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a18:	2220      	movs	r2, #32
 8000a1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a24:	480a      	ldr	r0, [pc, #40]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a26:	f001 fb69 	bl	80020fc <HAL_DMA_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000a30:	f7ff ff68 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a38:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <HAL_ADC_MspInit+0xcc>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	50040000 	.word	0x50040000
 8000a4c:	48000800 	.word	0x48000800
 8000a50:	200001a0 	.word	0x200001a0
 8000a54:	40020008 	.word	0x40020008

08000a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <HAL_TIM_Base_MspInit+0x44>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d113      	bne.n	8000a92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a6e:	f7ff ff68 	bl	8000942 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2019      	movs	r0, #25
 8000a78:	f001 fb0b 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f001 fb22 	bl	80020c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	201a      	movs	r0, #26
 8000a88:	f001 fb03 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a8c:	201a      	movs	r0, #26
 8000a8e:	f001 fb1a 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 f911 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <DMA1_Channel1_IRQHandler+0x10>)
 8000b06:	f001 fc1c 	bl	8002342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001a0 	.word	0x200001a0

08000b14 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USB_LP_IRQHandler+0x10>)
 8000b1a:	f001 ffdb 	bl	8002ad4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200005a0 	.word	0x200005a0

08000b28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b2e:	f005 fac3 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000200 	.word	0x20000200

08000b3c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b42:	f005 fab9 	bl	80060b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000200 	.word	0x20000200

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <SystemInit+0x98>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <SystemInit+0x98>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b78:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b7c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <SystemInit+0x9c>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b9a:	f023 0305 	bic.w	r3, r3, #5
 8000b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bba:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <SystemInit+0xa0>)
 8000bbc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <SystemInit+0xa0>)
 8000bc4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00
 8000bec:	faf6fefb 	.word	0xfaf6fefb
 8000bf0:	22041000 	.word	0x22041000

08000bf4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000bf4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf8:	3304      	adds	r3, #4

08000bfa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000bfe:	d3f9      	bcc.n	8000bf4 <CopyDataInit>
  bx lr
 8000c00:	4770      	bx	lr

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c04:	3004      	adds	r0, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>
  bx lr
 8000c0a:	4770      	bx	lr

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f7ff ff9e 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c14:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <LoopForever+0x6>)
 8000c16:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <LoopForever+0xa>)
 8000c18:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <LoopForever+0xe>)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f7ff ffed 	bl	8000bfa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <LoopForever+0x12>)
 8000c22:	490c      	ldr	r1, [pc, #48]	@ (8000c54 <LoopForever+0x16>)
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <LoopForever+0x1a>)
 8000c26:	2300      	movs	r3, #0
 8000c28:	f7ff ffe7 	bl	8000bfa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LoopForever+0x1e>)
 8000c2e:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <LoopForever+0x22>)
 8000c30:	2300      	movs	r3, #0
 8000c32:	f7ff ffe8 	bl	8000c06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c36:	f00a fb4d 	bl	800b2d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c3a:	f7ff fb2f 	bl	800029c <main>

08000c3e <LoopForever>:

LoopForever:
  b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   r0, =_estack
 8000c40:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000120 	.word	0x20000120
 8000c4c:	0800b438 	.word	0x0800b438
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c50:	20030000 	.word	0x20030000
 8000c54:	20030000 	.word	0x20030000
 8000c58:	0800b550 	.word	0x0800b550
  INIT_BSS _sbss, _ebss
 8000c5c:	20000120 	.word	0x20000120
 8000c60:	20000890 	.word	0x20000890

08000c64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <HAL_Init+0x3c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <HAL_Init+0x3c>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f001 f9fc 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 f80f 	bl	8000ca8 <HAL_InitTick>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	e001      	b.n	8000c9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c96:	f7ff fe6d 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58004000 	.word	0x58004000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d024      	beq.n	8000d06 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cbc:	f004 fbfe 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_InitTick+0x6c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fa04 	bl	80020e2 <HAL_SYSTICK_Config>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10f      	bne.n	8000d00 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d809      	bhi.n	8000cfa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295
 8000cee:	f001 f9d0 	bl	8002092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf2:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <HAL_InitTick+0x70>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e004      	b.n	8000d0a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e001      	b.n	8000d0a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000010 	.word	0x20000010
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000010 	.word	0x20000010
 8000d40:	20000264 	.word	0x20000264

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000264 	.word	0x20000264

08000d5c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTickPrio+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffe2 	bl	8000d44 <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffd2 	bl	8000d44 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000010 	.word	0x20000010

08000dbc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <HAL_ResumeTick+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_ResumeTick+0x1c>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3360      	adds	r3, #96	@ 0x60
 8000e56:	461a      	mov	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <LL_ADC_SetOffset+0x44>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	4313      	orrs	r3, r2
 8000e74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e7c:	bf00      	nop
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	03fff000 	.word	0x03fff000

08000e8c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3360      	adds	r3, #96	@ 0x60
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3360      	adds	r3, #96	@ 0x60
 8000ec8:	461a      	mov	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f06:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3330      	adds	r3, #48	@ 0x30
 8000f24:	461a      	mov	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	4413      	add	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	211f      	movs	r1, #31
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0e9b      	lsrs	r3, r3, #26
 8000f4c:	f003 011f 	and.w	r1, r3, #31
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000f60:	bf00      	nop
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3314      	adds	r3, #20
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	0e5b      	lsrs	r3, r3, #25
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	0d1b      	lsrs	r3, r3, #20
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	2107      	movs	r1, #7
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	0d1b      	lsrs	r3, r3, #20
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0318 	and.w	r3, r3, #24
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fe8:	40d9      	lsrs	r1, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	400b      	ands	r3, r1
 8000fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	0007ffff 	.word	0x0007ffff

0800100c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800101c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6093      	str	r3, [r2, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001044:	d101      	bne.n	800104a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800106c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001094:	d101      	bne.n	800109a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_IsEnabled+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_IsEnabled+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001106:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800110a:	f043 0204 	orr.w	r2, r3, #4
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b04      	cmp	r3, #4
 8001130:	d101      	bne.n	8001136 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b08      	cmp	r3, #8
 8001156:	d101      	bne.n	800115c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e12e      	b.n	80013e8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fbf3 	bl	8000984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff3d 	bl	8001030 <LL_ADC_IsDeepPowerDownEnabled>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff23 	bl	800100c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff58 	bl	8001080 <LL_ADC_IsInternalRegulatorEnabled>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d115      	bne.n	8001202 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff3c 	bl	8001058 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011e0:	4b83      	ldr	r3, [pc, #524]	@ (80013f0 <HAL_ADC_Init+0x284>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	099b      	lsrs	r3, r3, #6
 80011e6:	4a83      	ldr	r2, [pc, #524]	@ (80013f4 <HAL_ADC_Init+0x288>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	3301      	adds	r3, #1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff3a 	bl	8001080 <LL_ADC_IsInternalRegulatorEnabled>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	f043 0210 	orr.w	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff73 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 8001238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 80c7 	bne.w	80013d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 80c3 	bne.w	80013d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001254:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001258:	f043 0202 	orr.w	r2, r3, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff33 	bl	80010d0 <LL_ADC_IsEnabled>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001270:	4861      	ldr	r0, [pc, #388]	@ (80013f8 <HAL_ADC_Init+0x28c>)
 8001272:	f7ff ff2d 	bl	80010d0 <LL_ADC_IsEnabled>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	485e      	ldr	r0, [pc, #376]	@ (80013fc <HAL_ADC_Init+0x290>)
 8001284:	f7ff fdaa 	bl	8000ddc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e5b      	ldrb	r3, [r3, #25]
 800128c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001292:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001298:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800129e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80012a8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	3b01      	subs	r3, #1
 80012c0:	045b      	lsls	r3, r3, #17
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d009      	beq.n	80012e4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <HAL_ADC_Init+0x294>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	430b      	orrs	r3, r1
 80012f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff0e 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 8001302:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff1b 	bl	8001144 <LL_ADC_INJ_IsConversionOngoing>
 800130e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d13d      	bne.n	8001392 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d13a      	bne.n	8001392 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001320:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001328:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001338:	f023 0302 	bic.w	r3, r3, #2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	69b9      	ldr	r1, [r7, #24]
 8001342:	430b      	orrs	r3, r1
 8001344:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800134c:	2b01      	cmp	r3, #1
 800134e:	d118      	bne.n	8001382 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800135a:	f023 0304 	bic.w	r3, r3, #4
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001366:	4311      	orrs	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001372:	430a      	orrs	r2, r1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	e007      	b.n	8001392 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10c      	bne.n	80013b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f023 010f 	bic.w	r1, r3, #15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020f 	bic.w	r2, r2, #15
 80013c2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80013d4:	e007      	b.n	80013e6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013da:	f043 0210 	orr.w	r2, r3, #16
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000008 	.word	0x20000008
 80013f4:	053e2d63 	.word	0x053e2d63
 80013f8:	50040000 	.word	0x50040000
 80013fc:	50040300 	.word	0x50040300
 8001400:	fff0c007 	.word	0xfff0c007

08001404 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe82 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d167      	bne.n	80014f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_ADC_Start_DMA+0x2a>
 800142a:	2302      	movs	r3, #2
 800142c:	e063      	b.n	80014f6 <HAL_ADC_Start_DMA+0xf2>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fc42 	bl	8001cc0 <ADC_Enable>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d14f      	bne.n	80014e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	f023 0206 	bic.w	r2, r3, #6
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	659a      	str	r2, [r3, #88]	@ 0x58
 8001472:	e002      	b.n	800147a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a20      	ldr	r2, [pc, #128]	@ (8001500 <HAL_ADC_Start_DMA+0xfc>)
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <HAL_ADC_Start_DMA+0x100>)
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_ADC_Start_DMA+0x104>)
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	221c      	movs	r2, #28
 8001498:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0210 	orr.w	r2, r2, #16
 80014b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3340      	adds	r3, #64	@ 0x40
 80014cc:	4619      	mov	r1, r3
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f000 febb 	bl	800224c <HAL_DMA_Start_IT>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fe09 	bl	80010f6 <LL_ADC_REG_StartConversion>
 80014e4:	e006      	b.n	80014f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80014ee:	e001      	b.n	80014f4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
 80014f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	08001db5 	.word	0x08001db5
 8001504:	08001e8d 	.word	0x08001e8d
 8001508:	08001ea9 	.word	0x08001ea9

0800150c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0b6      	sub	sp, #216	@ 0xd8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x22>
 8001552:	2302      	movs	r3, #2
 8001554:	e39f      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x762>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fddb 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8384 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff fcc9 	bl	8000f14 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fdc9 	bl	800111e <LL_ADC_REG_IsConversionOngoing>
 800158c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fdd5 	bl	8001144 <LL_ADC_INJ_IsConversionOngoing>
 800159a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 81a6 	bne.w	80018f4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 81a1 	bne.w	80018f4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	461a      	mov	r2, r3
 80015c0:	f7ff fcd4 	bl	8000f6c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00a      	beq.n	80015fc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015f6:	f7ff fc25 	bl	8000e44 <LL_ADC_SetOffset>
 80015fa:	e17b      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc42 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0xf4>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc37 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	f003 021f 	and.w	r2, r3, #31
 8001626:	e01e      	b.n	8001666 <HAL_ADC_ConfigChannel+0x132>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fc2c 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800164a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800164e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001656:	2320      	movs	r3, #32
 8001658:	e004      	b.n	8001664 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	2b00      	cmp	r3, #0
 8001670:	d105      	bne.n	800167e <HAL_ADC_ConfigChannel+0x14a>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	e018      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x17c>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800169a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80016a2:	2320      	movs	r3, #32
 80016a4:	e004      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80016a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fbfb 	bl	8000eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fbdf 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10a      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x1ba>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fbd4 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	e01e      	b.n	800172c <HAL_ADC_ConfigChannel+0x1f8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbc9 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800170c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800171c:	2320      	movs	r3, #32
 800171e:	e004      	b.n	800172a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x210>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0e9b      	lsrs	r3, r3, #26
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	e018      	b.n	8001776 <HAL_ADC_ConfigChannel+0x242>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800175c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001760:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001768:	2320      	movs	r3, #32
 800176a:	e004      	b.n	8001776 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800176c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	429a      	cmp	r2, r3
 8001778:	d106      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb98 	bl	8000eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2102      	movs	r1, #2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fb7c 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x280>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2102      	movs	r1, #2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb71 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 021f 	and.w	r2, r3, #31
 80017b2:	e01e      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x2be>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fb66 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80017d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80017da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e004      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80017e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_ConfigChannel+0x2d6>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	e016      	b.n	8001838 <HAL_ADC_ConfigChannel+0x304>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800181c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800181e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800182a:	2320      	movs	r3, #32
 800182c:	e004      	b.n	8001838 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800182e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb37 	bl	8000eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2103      	movs	r1, #3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb1b 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x342>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2103      	movs	r1, #3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb10 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 021f 	and.w	r2, r3, #31
 8001874:	e017      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x372>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2103      	movs	r1, #3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb05 	bl	8000e8c <LL_ADC_GetOffsetChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800188e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001890:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001898:	2320      	movs	r3, #32
 800189a:	e003      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800189c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <HAL_ADC_ConfigChannel+0x38a>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0e9b      	lsrs	r3, r3, #26
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	e011      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x3ae>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80018cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80018d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80018da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	2103      	movs	r1, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fae2 	bl	8000eb8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fbe9 	bl	80010d0 <LL_ADC_IsEnabled>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 81c2 	bne.w	8001c8a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff fb56 	bl	8000fc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a8e      	ldr	r2, [pc, #568]	@ (8001b58 <HAL_ADC_ConfigChannel+0x624>)
 800191e:	4293      	cmp	r3, r2
 8001920:	f040 8130 	bne.w	8001b84 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10b      	bne.n	800194c <HAL_ADC_ConfigChannel+0x418>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e9b      	lsrs	r3, r3, #26
 800193a:	3301      	adds	r3, #1
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b09      	cmp	r3, #9
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e019      	b.n	8001980 <HAL_ADC_ConfigChannel+0x44c>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800195a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800195c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800195e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001964:	2320      	movs	r3, #32
 8001966:	e003      	b.n	8001970 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b09      	cmp	r3, #9
 8001978:	bf94      	ite	ls
 800197a:	2301      	movls	r3, #1
 800197c:	2300      	movhi	r3, #0
 800197e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001980:	2b00      	cmp	r3, #0
 8001982:	d079      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x46c>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0e9b      	lsrs	r3, r3, #26
 8001996:	3301      	adds	r3, #1
 8001998:	069b      	lsls	r3, r3, #26
 800199a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800199e:	e015      	b.n	80019cc <HAL_ADC_ConfigChannel+0x498>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80019ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80019b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e003      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80019bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	069b      	lsls	r3, r3, #26
 80019c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x4b8>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	3301      	adds	r3, #1
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	e017      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x4e8>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80019fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80019fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e003      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	ea42 0103 	orr.w	r1, r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x50e>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0e9b      	lsrs	r3, r3, #26
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	051b      	lsls	r3, r3, #20
 8001a40:	e018      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x540>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e003      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a74:	430b      	orrs	r3, r1
 8001a76:	e080      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x560>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	069b      	lsls	r3, r3, #26
 8001a8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a92:	e015      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x58c>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	069b      	lsls	r3, r3, #26
 8001abc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x5ac>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	2101      	movs	r1, #1
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	e017      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x5dc>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	61fb      	str	r3, [r7, #28]
  return result;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e003      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	ea42 0103 	orr.w	r1, r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x608>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e9b      	lsrs	r3, r3, #26
 8001b26:	3301      	adds	r3, #1
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	051b      	lsls	r3, r3, #20
 8001b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	e01d      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x644>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	613b      	str	r3, [r7, #16]
  return result;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d103      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e005      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x630>
 8001b58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	051b      	lsls	r3, r3, #20
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b78:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff f9f4 	bl	8000f6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b45      	ldr	r3, [pc, #276]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x76c>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d07c      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b90:	4844      	ldr	r0, [pc, #272]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x770>)
 8001b92:	f7ff f949 	bl	8000e28 <LL_ADC_GetCommonPathInternalCh>
 8001b96:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b9a:	4843      	ldr	r0, [pc, #268]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x774>)
 8001b9c:	f7ff fa98 	bl	80010d0 <LL_ADC_IsEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d15e      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <HAL_ADC_ConfigChannel+0x778>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d127      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x6cc>
 8001bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d121      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a39      	ldr	r2, [pc, #228]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x774>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d161      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4834      	ldr	r0, [pc, #208]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x770>)
 8001bd2:	f7ff f916 	bl	8000e02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd6:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <HAL_ADC_ConfigChannel+0x77c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	4a35      	ldr	r2, [pc, #212]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x780>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bfe:	e044      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2c      	ldr	r2, [pc, #176]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x784>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x6fe>
 8001c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x774>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d134      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c28:	4619      	mov	r1, r3
 8001c2a:	481e      	ldr	r0, [pc, #120]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x770>)
 8001c2c:	f7ff f8e9 	bl	8000e02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c30:	e02b      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_ADC_ConfigChannel+0x788>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d126      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
 8001c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d120      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x774>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11b      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4811      	ldr	r0, [pc, #68]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x770>)
 8001c5e:	f7ff f8d0 	bl	8000e02 <LL_ADC_SetCommonPathInternalCh>
 8001c62:	e012      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001c76:	e008      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001c92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	37d8      	adds	r7, #216	@ 0xd8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	80080000 	.word	0x80080000
 8001ca4:	50040300 	.word	0x50040300
 8001ca8:	50040000 	.word	0x50040000
 8001cac:	c7520000 	.word	0xc7520000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	053e2d63 	.word	0x053e2d63
 8001cb8:	cb840000 	.word	0xcb840000
 8001cbc:	80000001 	.word	0x80000001

08001cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9fd 	bl	80010d0 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d15e      	bne.n	8001d9a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <ADC_Enable+0xe4>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e04a      	b.n	8001d9c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9cc 	bl	80010a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d10:	4825      	ldr	r0, [pc, #148]	@ (8001da8 <ADC_Enable+0xe8>)
 8001d12:	f7ff f889 	bl	8000e28 <LL_ADC_GetCommonPathInternalCh>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00f      	beq.n	8001d40 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <ADC_Enable+0xec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	4a22      	ldr	r2, [pc, #136]	@ (8001db0 <ADC_Enable+0xf0>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d32:	e002      	b.n	8001d3a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f9      	bne.n	8001d34 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f800 	bl	8000d44 <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d46:	e021      	b.n	8001d8c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f9bf 	bl	80010d0 <LL_ADC_IsEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f9a3 	bl	80010a8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d62:	f7fe ffef 	bl	8000d44 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d90d      	bls.n	8001d8c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	f043 0210 	orr.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e007      	b.n	8001d9c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d1d6      	bne.n	8001d48 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	8000003f 	.word	0x8000003f
 8001da8:	50040300 	.word	0x50040300
 8001dac:	20000008 	.word	0x20000008
 8001db0:	053e2d63 	.word	0x053e2d63

08001db4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d14b      	bne.n	8001e66 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d021      	beq.n	8001e2c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f87e 	bl	8000eee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12b      	bne.n	8001e5e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11f      	bne.n	8001e5e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e2a:	e018      	b.n	8001e5e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d111      	bne.n	8001e5e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7fe f9be 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e64:	e00e      	b.n	8001e84 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fb54 	bl	8001520 <HAL_ADC_ErrorCallback>
}
 8001e78:	e004      	b.n	8001e84 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fb36 	bl	800150c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff fb26 	bl	8001520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	@ (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff29 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff40 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff90 	bl	8001fd0 <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff33 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa4 	bl	8002038 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e08e      	b.n	800222c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <HAL_DMA_Init+0x138>)
 8002116:	429a      	cmp	r2, r3
 8002118:	d80f      	bhi.n	800213a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <HAL_DMA_Init+0x13c>)
 8002122:	4413      	add	r3, r2
 8002124:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_DMA_Init+0x140>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	009a      	lsls	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a42      	ldr	r2, [pc, #264]	@ (8002240 <HAL_DMA_Init+0x144>)
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40
 8002138:	e00e      	b.n	8002158 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b40      	ldr	r3, [pc, #256]	@ (8002244 <HAL_DMA_Init+0x148>)
 8002142:	4413      	add	r3, r2
 8002144:	4a3d      	ldr	r2, [pc, #244]	@ (800223c <HAL_DMA_Init+0x140>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a3c      	ldr	r2, [pc, #240]	@ (8002248 <HAL_DMA_Init+0x14c>)
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800216e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f9b6 	bl	800251c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021b8:	d102      	bne.n	80021c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80021cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_DMA_Init+0x106>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d80c      	bhi.n	8002202 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f9d5 	bl	8002598 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e008      	b.n	8002214 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020407 	.word	0x40020407
 8002238:	bffdfff8 	.word	0xbffdfff8
 800223c:	cccccccd 	.word	0xcccccccd
 8002240:	40020000 	.word	0x40020000
 8002244:	bffdfbf8 	.word	0xbffdfbf8
 8002248:	40020400 	.word	0x40020400

0800224c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_DMA_Start_IT+0x20>
 8002268:	2302      	movs	r3, #2
 800226a:	e066      	b.n	800233a <HAL_DMA_Start_IT+0xee>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d155      	bne.n	800232c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8fb 	bl	80024a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 020e 	orr.w	r2, r2, #14
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e00f      	b.n	80022e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 020a 	orr.w	r2, r2, #10
 80022e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002300:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e005      	b.n	8002338 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002334:	2302      	movs	r3, #2
 8002336:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002338:	7dfb      	ldrb	r3, [r7, #23]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f003 031c 	and.w	r3, r3, #28
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d026      	beq.n	80023bc <HAL_DMA_IRQHandler+0x7a>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d021      	beq.n	80023bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0204 	bic.w	r2, r2, #4
 8002394:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f003 021c 	and.w	r2, r3, #28
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	2104      	movs	r1, #4
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d071      	beq.n	8002496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023ba:	e06c      	b.n	8002496 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c0:	f003 031c 	and.w	r3, r3, #28
 80023c4:	2202      	movs	r2, #2
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02e      	beq.n	800242e <HAL_DMA_IRQHandler+0xec>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d029      	beq.n	800242e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 020a 	bic.w	r2, r2, #10
 80023f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	f003 021c 	and.w	r2, r3, #28
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2102      	movs	r1, #2
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d038      	beq.n	8002496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800242c:	e033      	b.n	8002496 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f003 031c 	and.w	r3, r3, #28
 8002436:	2208      	movs	r2, #8
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x156>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d025      	beq.n	8002498 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 020e 	bic.w	r2, r2, #14
 800245a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	f003 021c 	and.w	r2, r3, #28
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002496:	bf00      	nop
 8002498:	bf00      	nop
}
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f003 021c 	and.w	r2, r3, #28
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d108      	bne.n	8002500 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024fe:	e007      	b.n	8002510 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	60da      	str	r2, [r3, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800252c:	429a      	cmp	r2, r3
 800252e:	d80a      	bhi.n	8002546 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800253c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6493      	str	r3, [r2, #72]	@ 0x48
 8002544:	e007      	b.n	8002556 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002550:	4413      	add	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b08      	subs	r3, #8
 800255e:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800256c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40020407 	.word	0x40020407
 800258c:	4002081c 	.word	0x4002081c
 8002590:	cccccccd 	.word	0xcccccccd
 8002594:	40020880 	.word	0x40020880

08002598 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80025bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2201      	movs	r2, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	1000823f 	.word	0x1000823f
 80025e0:	40020940 	.word	0x40020940

080025e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	e14c      	b.n	800288e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 813e 	beq.w	8002888 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d005      	beq.n	8002624 <HAL_GPIO_Init+0x40>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0201 	and.w	r2, r3, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d017      	beq.n	80026c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8098 	beq.w	8002888 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002758:	4a54      	ldr	r2, [pc, #336]	@ (80028ac <HAL_GPIO_Init+0x2c8>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002782:	d019      	beq.n	80027b8 <HAL_GPIO_Init+0x1d4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4a      	ldr	r2, [pc, #296]	@ (80028b0 <HAL_GPIO_Init+0x2cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_GPIO_Init+0x1d0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a49      	ldr	r2, [pc, #292]	@ (80028b4 <HAL_GPIO_Init+0x2d0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d00d      	beq.n	80027b0 <HAL_GPIO_Init+0x1cc>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a48      	ldr	r2, [pc, #288]	@ (80028b8 <HAL_GPIO_Init+0x2d4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x1c8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a47      	ldr	r2, [pc, #284]	@ (80028bc <HAL_GPIO_Init+0x2d8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_GPIO_Init+0x1c4>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e008      	b.n	80027ba <HAL_GPIO_Init+0x1d6>
 80027a8:	2307      	movs	r3, #7
 80027aa:	e006      	b.n	80027ba <HAL_GPIO_Init+0x1d6>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e004      	b.n	80027ba <HAL_GPIO_Init+0x1d6>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_Init+0x1d6>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_GPIO_Init+0x1d6>
 80027b8:	2300      	movs	r3, #0
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	f002 0203 	and.w	r2, r2, #3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	4093      	lsls	r3, r2
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ca:	4938      	ldr	r1, [pc, #224]	@ (80028ac <HAL_GPIO_Init+0x2c8>)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027fc:	4a30      	ldr	r2, [pc, #192]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002802:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002826:	4a26      	ldr	r2, [pc, #152]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800282c:	4b24      	ldr	r3, [pc, #144]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 800282e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002852:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800285a:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 800285c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002880:	4a0f      	ldr	r2, [pc, #60]	@ (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	f47f aeab 	bne.w	80025f4 <HAL_GPIO_Init+0x10>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40010000 	.word	0x40010000
 80028b0:	48000400 	.word	0x48000400
 80028b4:	48000800 	.word	0x48000800
 80028b8:	48000c00 	.word	0x48000c00
 80028bc:	48001000 	.word	0x48001000
 80028c0:	58000800 	.word	0x58000800

080028c4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0c0      	b.n	8002a88 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f008 f9f2 	bl	800ad04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 ff66 	bl	80067fe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e03e      	b.n	80029b6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	3311      	adds	r3, #17
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3310      	adds	r3, #16
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	3313      	adds	r3, #19
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	3320      	adds	r3, #32
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3324      	adds	r3, #36	@ 0x24
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	3301      	adds	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	791b      	ldrb	r3, [r3, #4]
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3bb      	bcc.n	8002938 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e044      	b.n	8002a50 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3b5      	bcc.n	80029c6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a66:	f003 fee5 	bl	8006834 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7a9b      	ldrb	r3, [r3, #10]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f001 fc44 	bl	800430e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_Start+0x16>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e012      	b.n	8002acc <HAL_PCD_Start+0x3c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fe8c 	bl	80067d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f006 f94c 	bl	8008d5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f006 f951 	bl	8008d88 <USB_ReadInterrupts>
 8002ae6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fb08 	bl	8003108 <PCD_EP_ISR_Handler>

    return;
 8002af8:	e110      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	b292      	uxth	r2, r2
 8002b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f008 f97e 	bl	800ae1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b22:	2100      	movs	r1, #0
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8fc 	bl	8002d22 <HAL_PCD_SetAddress>

    return;
 8002b2a:	e0f7      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b4e:	e0e5      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b72:	e0d3      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d034      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	b292      	uxth	r2, r2
 8002b92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0208 	bic.w	r2, r2, #8
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f008 fafc 	bl	800b1c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f008 f961 	bl	800ae90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be0:	b292      	uxth	r2, r2
 8002be2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002be6:	e099      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d027      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0208 	orr.w	r2, r2, #8
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0204 	orr.w	r2, r2, #4
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f008 f90e 	bl	800ae5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c40:	e06c      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d040      	beq.n	8002cce <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d12b      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0204 	orr.w	r2, r2, #4
 8002c80:	b292      	uxth	r2, r2
 8002c82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0208 	orr.w	r2, r2, #8
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f008 fa7e 	bl	800b1c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002cc4:	e02a      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f008 f8c8 	bl	800ae5c <HAL_PCD_SuspendCallback>
    return;
 8002ccc:	e026      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cea:	b292      	uxth	r2, r2
 8002cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f008 f886 	bl	800ae02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cf6:	e011      	b.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d14:	b292      	uxth	r2, r2
 8002d16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d1a:	bf00      	nop
  }
}
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_SetAddress+0x1a>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e012      	b.n	8002d62 <HAL_PCD_SetAddress+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 ffed 	bl	8008d32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	70fb      	strb	r3, [r7, #3]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	803b      	strh	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	da0e      	bge.n	8002dae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0207 	and.w	r2, r3, #7
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	3310      	adds	r3, #16
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	705a      	strb	r2, [r3, #1]
 8002dac:	e00e      	b.n	8002dcc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 0207 	and.w	r2, r3, #7
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dd8:	883a      	ldrh	r2, [r7, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	78ba      	ldrb	r2, [r7, #2]
 8002de2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002de4:	78bb      	ldrb	r3, [r7, #2]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d102      	bne.n	8002df0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_PCD_EP_Open+0x94>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e00e      	b.n	8002e1c <HAL_PCD_EP_Open+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fd2f 	bl	8006870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da0e      	bge.n	8002e56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	3310      	adds	r3, #16
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	705a      	strb	r2, [r3, #1]
 8002e54:	e00e      	b.n	8002e74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 0207 	and.w	r2, r3, #7
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_EP_Close+0x6a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e00e      	b.n	8002eac <HAL_PCD_EP_Close+0x88>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 f8ab 	bl	8006ff8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec4:	7afb      	ldrb	r3, [r7, #11]
 8002ec6:	f003 0207 	and.w	r2, r3, #7
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4413      	add	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6979      	ldr	r1, [r7, #20]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f004 fa63 	bl	80073d2 <USB_EPStartXfer>

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	460b      	mov	r3, r1
 8002f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f003 0207 	and.w	r2, r3, #7
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	3310      	adds	r3, #16
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 fa2c 	bl	80073d2 <USB_EPStartXfer>

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	7912      	ldrb	r2, [r2, #4]
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e03e      	b.n	8003020 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da0e      	bge.n	8002fc8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 0207 	and.w	r2, r3, #7
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	3310      	adds	r3, #16
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
 8002fc6:	e00c      	b.n	8002fe2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_PCD_EP_SetStall+0x7e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e00e      	b.n	8003020 <HAL_PCD_EP_SetStall+0x9c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fd8f 	bl	8008b34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	7912      	ldrb	r2, [r2, #4]
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e040      	b.n	80030c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003046:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304a:	2b00      	cmp	r3, #0
 800304c:	da0e      	bge.n	800306c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 0207 	and.w	r2, r3, #7
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	3310      	adds	r3, #16
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	e00e      	b.n	800308a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_PCD_EP_ClrStall+0x82>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e00e      	b.n	80030c8 <HAL_PCD_EP_ClrStall+0xa0>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fd8c 	bl	8008bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f005 fe63 	bl	8008da8 <USB_ActivateRemoteWakeup>
 80030e2:	4603      	mov	r3, r0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 fe6a 	bl	8008dd2 <USB_DeActivateRemoteWakeup>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b096      	sub	sp, #88	@ 0x58
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003110:	e3ad      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800311a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800311e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800312c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 816f 	bne.w	8003414 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d14c      	bne.n	80031dc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800314e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003152:	81fb      	strh	r3, [r7, #14]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800315e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3310      	adds	r3, #16
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	4413      	add	r3, r2
 8003186:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003192:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	441a      	add	r2, r3
 800319e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f007 fe12 	bl	800adce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7b1b      	ldrb	r3, [r3, #12]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 835c 	beq.w	800386e <PCD_EP_ISR_Handler+0x766>
 80031b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 8357 	bne.w	800386e <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7b1b      	ldrb	r3, [r3, #12]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	731a      	strb	r2, [r3, #12]
 80031da:	e348      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031e2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d032      	beq.n	8003260 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	4413      	add	r3, r2
 8003214:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800321e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003220:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003232:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003234:	b29b      	uxth	r3, r3
 8003236:	f005 fe23 	bl	8008e80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29a      	uxth	r2, r3
 8003242:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003246:	4013      	ands	r3, r2
 8003248:	823b      	strh	r3, [r7, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	8a3a      	ldrh	r2, [r7, #16]
 8003250:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003254:	b292      	uxth	r2, r2
 8003256:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f007 fd8b 	bl	800ad74 <HAL_PCD_SetupStageCallback>
 800325e:	e306      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003260:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003264:	2b00      	cmp	r3, #0
 8003266:	f280 8302 	bge.w	800386e <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29a      	uxth	r2, r3
 8003272:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003276:	4013      	ands	r3, r2
 8003278:	83fb      	strh	r3, [r7, #30]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	8bfa      	ldrh	r2, [r7, #30]
 8003280:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003284:	b292      	uxth	r2, r2
 8003286:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4413      	add	r3, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1e4>
 80032b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f005 fdd5 	bl	8008e80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	441a      	add	r2, r3
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032e4:	2100      	movs	r1, #0
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f007 fd56 	bl	800ad98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 82b5 	bne.w	800386e <PCD_EP_ISR_Handler+0x766>
 8003304:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003308:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800330c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003310:	f000 82ad 	beq.w	800386e <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4413      	add	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333e:	b29a      	uxth	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b3e      	cmp	r3, #62	@ 0x3e
 800334a:	d91d      	bls.n	8003388 <PCD_EP_ISR_Handler+0x280>
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
 8003354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <PCD_EP_ISR_Handler+0x25e>
 8003360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003362:	3b01      	subs	r3, #1
 8003364:	647b      	str	r3, [r7, #68]	@ 0x44
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29a      	uxth	r2, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336e:	b29b      	uxth	r3, r3
 8003370:	029b      	lsls	r3, r3, #10
 8003372:	b29b      	uxth	r3, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003380:	b29a      	uxth	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e026      	b.n	80033d6 <PCD_EP_ISR_Handler+0x2ce>
 8003388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <PCD_EP_ISR_Handler+0x29e>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800339a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339e:	b29a      	uxth	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	e017      	b.n	80033d6 <PCD_EP_ISR_Handler+0x2ce>
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <PCD_EP_ISR_Handler+0x2b8>
 80033ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033bc:	3301      	adds	r3, #1
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	029b      	lsls	r3, r3, #10
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e6:	827b      	strh	r3, [r7, #18]
 80033e8:	8a7b      	ldrh	r3, [r7, #18]
 80033ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80033ee:	827b      	strh	r3, [r7, #18]
 80033f0:	8a7b      	ldrh	r3, [r7, #18]
 80033f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033f6:	827b      	strh	r3, [r7, #18]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	8a7b      	ldrh	r3, [r7, #18]
 80033fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800340a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340e:	b29b      	uxth	r3, r3
 8003410:	8013      	strh	r3, [r2, #0]
 8003412:	e22c      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003428:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800342c:	2b00      	cmp	r3, #0
 800342e:	f280 80f6 	bge.w	800361e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29a      	uxth	r2, r3
 8003444:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003448:	4013      	ands	r3, r2
 800344a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003464:	b292      	uxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003468:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	7b1b      	ldrb	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d123      	bne.n	80034ce <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80034ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808e 	beq.w	80035d4 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	6959      	ldr	r1, [r3, #20]
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	88da      	ldrh	r2, [r3, #6]
 80034c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034c8:	f005 fcda 	bl	8008e80 <USB_ReadPMA>
 80034cc:	e082      	b.n	80035d4 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	78db      	ldrb	r3, [r3, #3]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d10a      	bne.n	80034ec <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034da:	461a      	mov	r2, r3
 80034dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9d3 	bl	800388a <HAL_PCD_EP_DB_Receive>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80034ea:	e073      	b.n	80035d4 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003506:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003528:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d022      	beq.n	8003590 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4413      	add	r3, r2
 8003564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003572:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02c      	beq.n	80035d4 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	6959      	ldr	r1, [r3, #20]
 8003582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003584:	891a      	ldrh	r2, [r3, #8]
 8003586:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800358a:	f005 fc79 	bl	8008e80 <USB_ReadPMA>
 800358e:	e021      	b.n	80035d4 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003598:	b29b      	uxth	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80035b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c6:	6959      	ldr	r1, [r3, #20]
 80035c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ca:	895a      	ldrh	r2, [r3, #10]
 80035cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035d0:	f005 fc56 	bl	8008e80 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035dc:	441a      	add	r2, r3
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035ea:	441a      	add	r2, r3
 80035ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <PCD_EP_ISR_Handler+0x4fc>
 80035f8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	429a      	cmp	r2, r3
 8003602:	d206      	bcs.n	8003612 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f007 fbc4 	bl	800ad98 <HAL_PCD_DataOutStageCallback>
 8003610:	e005      	b.n	800361e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003618:	4618      	mov	r0, r3
 800361a:	f003 feda 	bl	80073d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800361e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8121 	beq.w	800386e <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800362c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	3310      	adds	r3, #16
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	441a      	add	r2, r3
 800366c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	78db      	ldrb	r3, [r3, #3]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 80a2 	bne.w	80037ca <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368e:	7b1b      	ldrb	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8093 	beq.w	80037bc <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d046      	beq.n	8003730 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d126      	bne.n	80036f8 <PCD_EP_ISR_Handler+0x5f0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	4413      	add	r3, r2
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	00da      	lsls	r2, r3, #3
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e061      	b.n	80037bc <PCD_EP_ISR_Handler+0x6b4>
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d15d      	bne.n	80037bc <PCD_EP_ISR_Handler+0x6b4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370e:	b29b      	uxth	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	4413      	add	r3, r2
 8003716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	00da      	lsls	r2, r3, #3
 800371e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003720:	4413      	add	r3, r2
 8003722:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	e045      	b.n	80037bc <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d126      	bne.n	800378c <PCD_EP_ISR_Handler+0x684>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	4413      	add	r3, r2
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
 8003756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00da      	lsls	r2, r3, #3
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	4413      	add	r3, r2
 8003760:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003764:	633b      	str	r3, [r7, #48]	@ 0x30
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003770:	b29a      	uxth	r2, r3
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	801a      	strh	r2, [r3, #0]
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003784:	b29a      	uxth	r2, r3
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	e017      	b.n	80037bc <PCD_EP_ISR_Handler+0x6b4>
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d113      	bne.n	80037bc <PCD_EP_ISR_Handler+0x6b4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	4413      	add	r3, r2
 80037a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	00da      	lsls	r2, r3, #3
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	4413      	add	r3, r2
 80037b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80037b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f007 fb03 	bl	800adce <HAL_PCD_DataInStageCallback>
 80037c8:	e051      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d144      	bne.n	8003860 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003806:	429a      	cmp	r2, r3
 8003808:	d907      	bls.n	800381a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800380a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003816:	619a      	str	r2, [r3, #24]
 8003818:	e002      	b.n	8003820 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800381a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f007 facd 	bl	800adce <HAL_PCD_DataInStageCallback>
 8003834:	e01b      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800383e:	441a      	add	r2, r3
 8003840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003842:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800384c:	441a      	add	r2, r3
 800384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003850:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fdba 	bl	80073d2 <USB_EPStartXfer>
 800385e:	e006      	b.n	800386e <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003860:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003864:	461a      	mov	r2, r3
 8003866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f917 	bl	8003a9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003876:	b29b      	uxth	r3, r3
 8003878:	b21b      	sxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f6ff ac49 	blt.w	8003112 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3758      	adds	r7, #88	@ 0x58
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d07c      	beq.n	800399c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	8b7b      	ldrh	r3, [r7, #26]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d306      	bcc.n	80038e0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	8b7b      	ldrh	r3, [r7, #26]
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	619a      	str	r2, [r3, #24]
 80038de:	e002      	b.n	80038e6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d123      	bne.n	8003936 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003908:	833b      	strh	r3, [r7, #24]
 800390a:	8b3b      	ldrh	r3, [r7, #24]
 800390c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003910:	833b      	strh	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	8b3b      	ldrh	r3, [r7, #24]
 8003922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800392a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01f      	beq.n	8003980 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395a:	82fb      	strh	r3, [r7, #22]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003978:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800397c:	b29b      	uxth	r3, r3
 800397e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003980:	8b7b      	ldrh	r3, [r7, #26]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8085 	beq.w	8003a92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	6959      	ldr	r1, [r3, #20]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	891a      	ldrh	r2, [r3, #8]
 8003994:	8b7b      	ldrh	r3, [r7, #26]
 8003996:	f005 fa73 	bl	8008e80 <USB_ReadPMA>
 800399a:	e07a      	b.n	8003a92 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d306      	bcc.n	80039da <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	8b7b      	ldrh	r3, [r7, #26]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	619a      	str	r2, [r3, #24]
 80039d8:	e002      	b.n	80039e0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d123      	bne.n	8003a30 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	83fb      	strh	r3, [r7, #30]
 8003a04:	8bfb      	ldrh	r3, [r7, #30]
 8003a06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a0a:	83fb      	strh	r3, [r7, #30]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	8bfb      	ldrh	r3, [r7, #30]
 8003a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11f      	bne.n	8003a7a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a54:	83bb      	strh	r3, [r7, #28]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8bbb      	ldrh	r3, [r7, #28]
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a7a:	8b7b      	ldrh	r3, [r7, #26]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6959      	ldr	r1, [r3, #20]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	895a      	ldrh	r2, [r3, #10]
 8003a8c:	8b7b      	ldrh	r3, [r7, #26]
 8003a8e:	f005 f9f7 	bl	8008e80 <USB_ReadPMA>
    }
  }

  return count;
 8003a92:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b0a4      	sub	sp, #144	@ 0x90
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 81db 	beq.w	8003e6c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ada:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d907      	bls.n	8003afa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003af2:	1ad2      	subs	r2, r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	e002      	b.n	8003b00 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 80b9 	bne.w	8003c7c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d126      	bne.n	8003b60 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	4413      	add	r3, r2
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00da      	lsls	r2, r3, #3
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	4413      	add	r3, r2
 8003b34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e01a      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d116      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7c:	4413      	add	r3, r2
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00da      	lsls	r2, r3, #3
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d126      	bne.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x156>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	00da      	lsls	r2, r3, #3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	e017      	b.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x186>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d113      	bne.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x186>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	4413      	add	r3, r2
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00da      	lsls	r2, r3, #3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	4413      	add	r3, r2
 8003c16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f007 f8d0 	bl	800adce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 82fa 	beq.w	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c54:	82fb      	strh	r3, [r7, #22]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	8afb      	ldrh	r3, [r7, #22]
 8003c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8013      	strh	r3, [r2, #0]
 8003c7a:	e2d8      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d021      	beq.n	8003cca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 82ac 	bne.w	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cde:	441a      	add	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cec:	441a      	add	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d30b      	bcc.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	621a      	str	r2, [r3, #32]
 8003d14:	e017      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003d1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d2e:	e00a      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d165      	bne.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x37e>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d62:	4413      	add	r3, r2
 8003d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	00da      	lsls	r2, r3, #3
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d8c:	d91d      	bls.n	8003dca <HAL_PCD_EP_DB_Transmit+0x32e>
 8003d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003da4:	3b01      	subs	r3, #1
 8003da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	801a      	strh	r2, [r3, #0]
 8003dc8:	e044      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	e035      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x366>
 8003dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dfe:	3301      	adds	r3, #1
 8003e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	e01c      	b.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d118      	bne.n	8003e54 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e36:	4413      	add	r3, r2
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	00da      	lsls	r2, r3, #3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	4413      	add	r3, r2
 8003e44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e52:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6959      	ldr	r1, [r3, #20]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	891a      	ldrh	r2, [r3, #8]
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f004 ffc9 	bl	8008dfc <USB_WritePMA>
 8003e6a:	e1e0      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e90:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d307      	bcc.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ea8:	1ad2      	subs	r2, r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	619a      	str	r2, [r3, #24]
 8003eae:	e002      	b.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 80c0 	bne.w	8004040 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d126      	bne.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003edc:	4413      	add	r3, r2
 8003ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	00da      	lsls	r2, r3, #3
 8003ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	e01a      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d116      	bne.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f32:	4413      	add	r3, r2
 8003f34:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	00da      	lsls	r2, r3, #3
 8003f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f3e:	4413      	add	r3, r2
 8003f40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f48:	2200      	movs	r2, #0
 8003f4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12b      	bne.n	8003fb2 <HAL_PCD_EP_DB_Transmit+0x516>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6e:	4413      	add	r3, r2
 8003f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	00da      	lsls	r2, r3, #3
 8003f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e017      	b.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x546>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d113      	bne.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x546>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc8:	4413      	add	r3, r2
 8003fca:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	00da      	lsls	r2, r3, #3
 8003fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fda:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f006 fef0 	bl	800adce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 811a 	bne.w	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004014:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]
 800403e:	e0f6      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d121      	bne.n	800408e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004064:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004094:	2b01      	cmp	r3, #1
 8004096:	f040 80ca 	bne.w	800422e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040a2:	441a      	add	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040b0:	441a      	add	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d30b      	bcc.n	80040da <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	621a      	str	r2, [r3, #32]
 80040d8:	e017      	b.n	800410a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80040e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040f2:	e00a      	b.n	800410a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d165      	bne.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x748>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800412c:	4413      	add	r3, r2
 800412e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	00da      	lsls	r2, r3, #3
 8004136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004138:	4413      	add	r3, r2
 800413a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800413e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004140:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414a:	b29a      	uxth	r2, r3
 800414c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800414e:	801a      	strh	r2, [r3, #0]
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004154:	2b3e      	cmp	r3, #62	@ 0x3e
 8004156:	d91d      	bls.n	8004194 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800416c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800416e:	3b01      	subs	r3, #1
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29a      	uxth	r2, r3
 8004178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800417a:	b29b      	uxth	r3, r3
 800417c:	029b      	lsls	r3, r3, #10
 800417e:	b29b      	uxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e041      	b.n	8004218 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <HAL_PCD_EP_DB_Transmit+0x716>
 800419c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	e032      	b.n	8004218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80041b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_PCD_EP_DB_Transmit+0x730>
 80041c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c8:	3301      	adds	r3, #1
 80041ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	029b      	lsls	r3, r3, #10
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4313      	orrs	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e019      	b.n	8004218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d115      	bne.n	8004218 <HAL_PCD_EP_DB_Transmit+0x77c>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fa:	4413      	add	r3, r2
 80041fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00da      	lsls	r2, r3, #3
 8004204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004206:	4413      	add	r3, r2
 8004208:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800420c:	653b      	str	r3, [r7, #80]	@ 0x50
 800420e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004212:	b29a      	uxth	r2, r3
 8004214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004216:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6959      	ldr	r1, [r3, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	895a      	ldrh	r2, [r3, #10]
 8004224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004228:	b29b      	uxth	r3, r3
 800422a:	f004 fde7 	bl	8008dfc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004248:	82bb      	strh	r3, [r7, #20]
 800424a:	8abb      	ldrh	r3, [r7, #20]
 800424c:	f083 0310 	eor.w	r3, r3, #16
 8004250:	82bb      	strh	r3, [r7, #20]
 8004252:	8abb      	ldrh	r3, [r7, #20]
 8004254:	f083 0320 	eor.w	r3, r3, #32
 8004258:	82bb      	strh	r3, [r7, #20]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8abb      	ldrh	r3, [r7, #20]
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3790      	adds	r7, #144	@ 0x90
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	4613      	mov	r3, r2
 8004298:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	f003 0207 	and.w	r2, r3, #7
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	3310      	adds	r3, #16
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e009      	b.n	80042d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042be:	897a      	ldrh	r2, [r7, #10]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	80da      	strh	r2, [r3, #6]
 80042e6:	e00b      	b.n	8004300 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2201      	movs	r2, #1
 80042ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004332:	b29b      	uxth	r3, r3
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004346:	b29b      	uxth	r3, r3
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a04      	ldr	r2, [pc, #16]	@ (8004380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800436e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58000400 	.word	0x58000400

08004384 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <HAL_PWREx_GetVoltageRange+0x18>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004390:	4618      	mov	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58000400 	.word	0x58000400

080043a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80043aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043ae:	6053      	str	r3, [r2, #4]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	58000400 	.word	0x58000400

080043c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d2:	d101      	bne.n	80043d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004414:	6013      	str	r3, [r2, #0]
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004432:	d101      	bne.n	8004438 <LL_RCC_HSE_IsReady+0x18>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <LL_RCC_HSE_IsReady+0x1a>
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004456:	6013      	str	r3, [r2, #0]
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004474:	6013      	str	r3, [r2, #0]
}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004492:	d101      	bne.n	8004498 <LL_RCC_HSI_IsReady+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_RCC_HSI_IsReady+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80044f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004512:	b480      	push	{r7}
 8004514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800451a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d101      	bne.n	800452a <LL_RCC_HSI48_IsReady+0x18>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <LL_RCC_HSI48_IsReady+0x1a>
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d101      	bne.n	80045d6 <LL_RCC_LSE_IsReady+0x18>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_RCC_LSE_IsReady+0x1a>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80045fa:	bf00      	nop
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d101      	bne.n	800463e <LL_RCC_LSI1_IsReady+0x18>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <LL_RCC_LSI1_IsReady+0x1a>
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800464a:	b480      	push	{r7}
 800464c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800465a:	f043 0304 	orr.w	r3, r3, #4
 800465e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004678:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d101      	bne.n	80046a6 <LL_RCC_LSI2_IsReady+0x18>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <LL_RCC_LSI2_IsReady+0x1a>
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80046ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6013      	str	r3, [r2, #0]
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d101      	bne.n	8004732 <LL_RCC_MSI_IsReady+0x16>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <LL_RCC_MSI_IsReady+0x18>
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004750:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004776:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2bb0      	cmp	r3, #176	@ 0xb0
 800477c:	d901      	bls.n	8004782 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800477e:	23b0      	movs	r3, #176	@ 0xb0
 8004780:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004782:	687b      	ldr	r3, [r7, #4]
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80047c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 0203 	bic.w	r2, r3, #3
 80047cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800480c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004832:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800488e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4313      	orrs	r3, r2
 8004896:	608b      	str	r3, [r1, #8]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800490e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004912:	6013      	str	r3, [r2, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800492c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004930:	6013      	str	r3, [r2, #0]
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800494e:	d101      	bne.n	8004954 <LL_RCC_PLL_IsReady+0x18>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <LL_RCC_PLL_IsReady+0x1a>
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0303 	and.w	r3, r3, #3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80049c2:	b480      	push	{r7}
 80049c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d101      	bne.n	80049da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049fa:	d101      	bne.n	8004a00 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d101      	bne.n	8004a26 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a44:	d101      	bne.n	8004a4a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a68:	d101      	bne.n	8004a6e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b08d      	sub	sp, #52	@ 0x34
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e363      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 808d 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9c:	f7ff fea1 	bl	80047e2 <LL_RCC_GetSysClkSource>
 8004aa0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa2:	f7ff ff82 	bl	80049aa <LL_RCC_PLL_GetMainSource>
 8004aa6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RCC_OscConfig+0x3e>
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d147      	bne.n	8004b44 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d144      	bne.n	8004b44 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e347      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004aca:	f7ff fe4c 	bl	8004766 <LL_RCC_MSI_GetRange>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d914      	bls.n	8004afe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fd03 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e336      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fe26 	bl	800473e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fe4a 	bl	8004790 <LL_RCC_MSI_SetCalibTrimming>
 8004afc:	e013      	b.n	8004b26 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fe1b 	bl	800473e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe3f 	bl	8004790 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fce4 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e317      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b26:	f000 fcc9 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4aa4      	ldr	r2, [pc, #656]	@ (8004dc0 <HAL_RCC_OscConfig+0x344>)
 8004b2e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b30:	4ba4      	ldr	r3, [pc, #656]	@ (8004dc4 <HAL_RCC_OscConfig+0x348>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc f8b7 	bl	8000ca8 <HAL_InitTick>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d039      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e308      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b4c:	f7ff fdc8 	bl	80046e0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b50:	f7fc f8f8 	bl	8000d44 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b58:	f7fc f8f4 	bl	8000d44 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e2f5      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b6a:	f7ff fdd7 	bl	800471c <LL_RCC_MSI_IsReady>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f1      	beq.n	8004b58 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fde0 	bl	800473e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fe04 	bl	8004790 <LL_RCC_MSI_SetCalibTrimming>
 8004b88:	e015      	b.n	8004bb6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b8a:	f7ff fdb8 	bl	80046fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b8e:	f7fc f8d9 	bl	8000d44 <HAL_GetTick>
 8004b92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b96:	f7fc f8d5 	bl	8000d44 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e2d6      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ba8:	f7ff fdb8 	bl	800471c <LL_RCC_MSI_IsReady>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f1      	bne.n	8004b96 <HAL_RCC_OscConfig+0x11a>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004bb4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d047      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc2:	f7ff fe0e 	bl	80047e2 <LL_RCC_GetSysClkSource>
 8004bc6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	f7ff feef 	bl	80049aa <LL_RCC_PLL_GetMainSource>
 8004bcc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_OscConfig+0x164>
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d108      	bne.n	8004bec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d105      	bne.n	8004bec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d134      	bne.n	8004c52 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2b4      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d102      	bne.n	8004bfc <HAL_RCC_OscConfig+0x180>
 8004bf6:	f7ff fbf5 	bl	80043e4 <LL_RCC_HSE_Enable>
 8004bfa:	e001      	b.n	8004c00 <HAL_RCC_OscConfig+0x184>
 8004bfc:	f7ff fc01 	bl	8004402 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc f89c 	bl	8000d44 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fc f898 	bl	8000d44 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	@ 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e299      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c22:	f7ff fbfd 	bl	8004420 <LL_RCC_HSE_IsReady>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f1      	beq.n	8004c10 <HAL_RCC_OscConfig+0x194>
 8004c2c:	e011      	b.n	8004c52 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fc f889 	bl	8000d44 <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c36:	f7fc f885 	bl	8000d44 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b64      	cmp	r3, #100	@ 0x64
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e286      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c48:	f7ff fbea 	bl	8004420 <LL_RCC_HSE_IsReady>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5e:	f7ff fdc0 	bl	80047e2 <LL_RCC_GetSysClkSource>
 8004c62:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	f7ff fea1 	bl	80049aa <LL_RCC_PLL_GetMainSource>
 8004c68:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_OscConfig+0x200>
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d10e      	bne.n	8004c94 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e266      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fc09 	bl	80044a4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c92:	e031      	b.n	8004cf8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d019      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9c:	f7ff fbd2 	bl	8004444 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fc f850 	bl	8000d44 <HAL_GetTick>
 8004ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fc f84c 	bl	8000d44 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e24d      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004cba:	f7ff fbe1 	bl	8004480 <LL_RCC_HSI_IsReady>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f1      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fbeb 	bl	80044a4 <LL_RCC_HSI_SetCalibTrimming>
 8004cce:	e013      	b.n	8004cf8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd0:	f7ff fbc7 	bl	8004462 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc f836 	bl	8000d44 <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fc f832 	bl	8000d44 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e233      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cee:	f7ff fbc7 	bl	8004480 <LL_RCC_HSI_IsReady>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f1      	bne.n	8004cdc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a3 	beq.w	8004e58 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d076      	beq.n	8004e08 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d046      	beq.n	8004db4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004d26:	f7ff fc7e 	bl	8004626 <LL_RCC_LSI1_IsReady>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004d30:	f7ff fc57 	bl	80045e2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d34:	f7fc f806 	bl	8000d44 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d3c:	f7fc f802 	bl	8000d44 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e203      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d4e:	f7ff fc6a 	bl	8004626 <LL_RCC_LSI1_IsReady>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f1      	beq.n	8004d3c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004d58:	f7ff fc77 	bl	800464a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fb fff2 	bl	8000d44 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d64:	f7fb ffee 	bl	8000d44 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1ef      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d76:	f7ff fc8a 	bl	800468e <LL_RCC_LSI2_IsReady>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f1      	beq.n	8004d64 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fc94 	bl	80046b2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004d8a:	f7ff fc3b 	bl	8004604 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fb ffd9 	bl	8000d44 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d96:	f7fb ffd5 	bl	8000d44 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1d6      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004da8:	f7ff fc3d 	bl	8004626 <LL_RCC_LSI1_IsReady>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f1      	bne.n	8004d96 <HAL_RCC_OscConfig+0x31a>
 8004db2:	e051      	b.n	8004e58 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004db4:	f7ff fc15 	bl	80045e2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fb ffc4 	bl	8000d44 <HAL_GetTick>
 8004dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dbe:	e00c      	b.n	8004dda <HAL_RCC_OscConfig+0x35e>
 8004dc0:	20000008 	.word	0x20000008
 8004dc4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004dc8:	f7fb ffbc 	bl	8000d44 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1bd      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dda:	f7ff fc24 	bl	8004626 <LL_RCC_LSI1_IsReady>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f1      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004de4:	f7ff fc42 	bl	800466c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004dea:	f7fb ffab 	bl	8000d44 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1ac      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004dfc:	f7ff fc47 	bl	800468e <LL_RCC_LSI2_IsReady>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f1      	bne.n	8004dea <HAL_RCC_OscConfig+0x36e>
 8004e06:	e027      	b.n	8004e58 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004e08:	f7ff fc30 	bl	800466c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fb ff9a 	bl	8000d44 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e14:	f7fb ff96 	bl	8000d44 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e197      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e26:	f7ff fc32 	bl	800468e <LL_RCC_LSI2_IsReady>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f1      	bne.n	8004e14 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004e30:	f7ff fbe8 	bl	8004604 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fb ff86 	bl	8000d44 <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e3c:	f7fb ff82 	bl	8000d44 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e183      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e4e:	f7ff fbea 	bl	8004626 <LL_RCC_LSI1_IsReady>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f1      	bne.n	8004e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e64:	4ba7      	ldr	r3, [pc, #668]	@ (8005104 <HAL_RCC_OscConfig+0x688>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d114      	bne.n	8004e9a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e70:	f7ff fa78 	bl	8004364 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e74:	f7fb ff66 	bl	8000d44 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7c:	f7fb ff62 	bl	8000d44 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e163      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8005104 <HAL_RCC_OscConfig+0x688>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x42c>
 8004ea2:	f7ff fb48 	bl	8004536 <LL_RCC_LSE_Enable>
 8004ea6:	e00c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x446>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d104      	bne.n	8004eba <HAL_RCC_OscConfig+0x43e>
 8004eb0:	f7ff fb63 	bl	800457a <LL_RCC_LSE_EnableBypass>
 8004eb4:	f7ff fb3f 	bl	8004536 <LL_RCC_LSE_Enable>
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCC_OscConfig+0x446>
 8004eba:	f7ff fb4d 	bl	8004558 <LL_RCC_LSE_Disable>
 8004ebe:	f7ff fb6d 	bl	800459c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d014      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fb ff3b 	bl	8000d44 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fb ff37 	bl	8000d44 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e136      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ee8:	f7ff fb69 	bl	80045be <LL_RCC_LSE_IsReady>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x456>
 8004ef2:	e013      	b.n	8004f1c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fb ff26 	bl	8000d44 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fb ff22 	bl	8000d44 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e121      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004f12:	f7ff fb54 	bl	80045be <LL_RCC_LSE_IsReady>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ef      	bne.n	8004efc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d014      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f30:	f7ff facd 	bl	80044ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fb ff06 	bl	8000d44 <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f3c:	f7fb ff02 	bl	8000d44 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e103      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f4e:	f7ff fae0 	bl	8004512 <LL_RCC_HSI48_IsReady>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f1      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4c0>
 8004f58:	e013      	b.n	8004f82 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5a:	f7ff fac9 	bl	80044f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fb fef1 	bl	8000d44 <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f66:	f7fb feed 	bl	8000d44 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0ee      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f78:	f7ff facb 	bl	8004512 <LL_RCC_HSI48_IsReady>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f1      	bne.n	8004f66 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 80e4 	beq.w	8005154 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8c:	f7ff fc29 	bl	80047e2 <LL_RCC_GetSysClkSource>
 8004f90:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	f040 80b4 	bne.w	800510c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d123      	bne.n	8004ffa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d11c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d114      	bne.n	8004ffa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10d      	bne.n	8004ffa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d05d      	beq.n	80050b6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d058      	beq.n	80050b2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0a1      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005012:	f7ff fc84 	bl	800491e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005016:	f7fb fe95 	bl	8000d44 <HAL_GetTick>
 800501a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fb fe91 	bl	8000d44 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e092      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ef      	bne.n	800501e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	4b30      	ldr	r3, [pc, #192]	@ (8005108 <HAL_RCC_OscConfig+0x68c>)
 8005046:	4013      	ands	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005056:	0212      	lsls	r2, r2, #8
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800506a:	430a      	orrs	r2, r1
 800506c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005070:	4313      	orrs	r3, r2
 8005072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005074:	f7ff fc44 	bl	8004900 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005088:	f7fb fe5c 	bl	8000d44 <HAL_GetTick>
 800508c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fb fe58 	bl	8000d44 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e059      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ef      	beq.n	8005090 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050b0:	e050      	b.n	8005154 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e04f      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d147      	bne.n	8005154 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050c4:	f7ff fc1c 	bl	8004900 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d8:	f7fb fe34 	bl	8000d44 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fb fe30 	bl	8000d44 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e031      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ef      	beq.n	80050e0 <HAL_RCC_OscConfig+0x664>
 8005100:	e028      	b.n	8005154 <HAL_RCC_OscConfig+0x6d8>
 8005102:	bf00      	nop
 8005104:	58000400 	.word	0x58000400
 8005108:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d01e      	beq.n	8005150 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	f7ff fc04 	bl	800491e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fb fe15 	bl	8000d44 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511e:	f7fb fe11 	bl	8000d44 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e012      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1ef      	bne.n	800511e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <HAL_RCC_OscConfig+0x6e4>)
 800514a:	4013      	ands	r3, r2
 800514c:	60cb      	str	r3, [r1, #12]
 800514e:	e001      	b.n	8005154 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3734      	adds	r7, #52	@ 0x34
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}
 800515e:	bf00      	nop
 8005160:	eefefffc 	.word	0xeefefffc

08005164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e12d      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005178:	4b98      	ldr	r3, [pc, #608]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d91b      	bls.n	80051be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b95      	ldr	r3, [pc, #596]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 0207 	bic.w	r2, r3, #7
 800518e:	4993      	ldr	r1, [pc, #588]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005196:	f7fb fdd5 	bl	8000d44 <HAL_GetTick>
 800519a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800519e:	f7fb fdd1 	bl	8000d44 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e111      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b0:	4b8a      	ldr	r3, [pc, #552]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d1ef      	bne.n	800519e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fb13 	bl	80047fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051d4:	f7fb fdb6 	bl	8000d44 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051dc:	f7fb fdb2 	bl	8000d44 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0f2      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051ee:	f7ff fbe8 	bl	80049c2 <LL_RCC_IsActiveFlag_HPRE>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f1      	beq.n	80051dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fb0a 	bl	8004822 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800520e:	f7fb fd99 	bl	8000d44 <HAL_GetTick>
 8005212:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005216:	f7fb fd95 	bl	8000d44 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e0d5      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005228:	f7ff fbdd 	bl	80049e6 <LL_RCC_IsActiveFlag_C2HPRE>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f1      	beq.n	8005216 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d016      	beq.n	800526c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fb03 	bl	800484e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005248:	f7fb fd7c 	bl	8000d44 <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005250:	f7fb fd78 	bl	8000d44 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0b8      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005262:	f7ff fbd3 	bl	8004a0c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f1      	beq.n	8005250 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d016      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fafd 	bl	800487c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005282:	f7fb fd5f 	bl	8000d44 <HAL_GetTick>
 8005286:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800528a:	f7fb fd5b 	bl	8000d44 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e09b      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800529c:	f7ff fbc9 	bl	8004a32 <LL_RCC_IsActiveFlag_PPRE1>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f1      	beq.n	800528a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d017      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff faf3 	bl	80048a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052be:	f7fb fd41 	bl	8000d44 <HAL_GetTick>
 80052c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052c6:	f7fb fd3d 	bl	8000d44 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e07d      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052d8:	f7ff fbbd 	bl	8004a56 <LL_RCC_IsActiveFlag_PPRE2>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f1      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d043      	beq.n	8005376 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80052f6:	f7ff f893 	bl	8004420 <LL_RCC_HSE_IsReady>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d11e      	bne.n	800533e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e067      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d106      	bne.n	800531a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800530c:	f7ff fb16 	bl	800493c <LL_RCC_PLL_IsReady>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d113      	bne.n	800533e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e05c      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005322:	f7ff f9fb 	bl	800471c <LL_RCC_MSI_IsReady>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e051      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005330:	f7ff f8a6 	bl	8004480 <LL_RCC_HSI_IsReady>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e04a      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fa39 	bl	80047ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fb fcfc 	bl	8000d44 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fb fcf8 	bl	8000d44 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e036      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005366:	f7ff fa3c 	bl	80047e2 <LL_RCC_GetSysClkSource>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	429a      	cmp	r2, r3
 8005374:	d1ec      	bne.n	8005350 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005376:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d21b      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005384:	4b15      	ldr	r3, [pc, #84]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0207 	bic.w	r2, r3, #7
 800538c:	4913      	ldr	r1, [pc, #76]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fb fcd6 	bl	8000d44 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	e008      	b.n	80053ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800539c:	f7fb fcd2 	bl	8000d44 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e012      	b.n	80053d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <HAL_RCC_ClockConfig+0x278>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1ef      	bne.n	800539c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053bc:	f000 f87e 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4a07      	ldr	r2, [pc, #28]	@ (80053e0 <HAL_RCC_ClockConfig+0x27c>)
 80053c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80053c6:	f7fb fcc9 	bl	8000d5c <HAL_GetTickPrio>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb fc6b 	bl	8000ca8 <HAL_InitTick>
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58004000 	.word	0x58004000
 80053e0:	20000008 	.word	0x20000008

080053e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ea:	f7ff f9fa 	bl	80047e2 <LL_RCC_GetSysClkSource>
 80053ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053f6:	f7ff f9b6 	bl	8004766 <LL_RCC_MSI_GetRange>
 80053fa:	4603      	mov	r3, r0
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	4a2b      	ldr	r2, [pc, #172]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e04b      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d102      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005412:	4b28      	ldr	r3, [pc, #160]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e045      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d10a      	bne.n	8005434 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800541e:	f7fe ffcf 	bl	80043c0 <LL_RCC_HSE_IsEnabledDiv2>
 8005422:	4603      	mov	r3, r0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005428:	4b22      	ldr	r3, [pc, #136]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e03a      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e037      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005434:	f7ff fab9 	bl	80049aa <LL_RCC_PLL_GetMainSource>
 8005438:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d003      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x64>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x6a>
 8005446:	e00d      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800544a:	60bb      	str	r3, [r7, #8]
        break;
 800544c:	e015      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800544e:	f7fe ffb7 	bl	80043c0 <LL_RCC_HSE_IsEnabledDiv2>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d102      	bne.n	800545e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005458:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800545a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800545c:	e00d      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800545e:	4b16      	ldr	r3, [pc, #88]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005460:	60bb      	str	r3, [r7, #8]
        break;
 8005462:	e00a      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005464:	f7ff f97f 	bl	8004766 <LL_RCC_MSI_GetRange>
 8005468:	4603      	mov	r3, r0
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	4a0f      	ldr	r2, [pc, #60]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	60bb      	str	r3, [r7, #8]
        break;
 8005478:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800547a:	f7ff fa71 	bl	8004960 <LL_RCC_PLL_GetN>
 800547e:	4602      	mov	r2, r0
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	fb03 f402 	mul.w	r4, r3, r2
 8005486:	f7ff fa84 	bl	8004992 <LL_RCC_PLL_GetDivider>
 800548a:	4603      	mov	r3, r0
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	3301      	adds	r3, #1
 8005490:	fbb4 f4f3 	udiv	r4, r4, r3
 8005494:	f7ff fa71 	bl	800497a <LL_RCC_PLL_GetR>
 8005498:	4603      	mov	r3, r0
 800549a:	0f5b      	lsrs	r3, r3, #29
 800549c:	3301      	adds	r3, #1
 800549e:	fbb4 f3f3 	udiv	r3, r4, r3
 80054a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	bf00      	nop
 80054b0:	0800b3f0 	.word	0x0800b3f0
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	01e84800 	.word	0x01e84800

080054bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054bc:	b598      	push	{r3, r4, r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054c0:	f7ff ff90 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 80054c4:	4604      	mov	r4, r0
 80054c6:	f7ff fa01 	bl	80048cc <LL_RCC_GetAHBPrescaler>
 80054ca:	4603      	mov	r3, r0
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	4a03      	ldr	r2, [pc, #12]	@ (80054e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd98      	pop	{r3, r4, r7, pc}
 80054e0:	0800b3b0 	.word	0x0800b3b0

080054e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2bb0      	cmp	r3, #176	@ 0xb0
 80054f0:	d903      	bls.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80054f2:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e007      	b.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005508:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800550a:	f7ff f9eb 	bl	80048e4 <LL_RCC_GetAHB4Prescaler>
 800550e:	4603      	mov	r3, r0
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	4a0d      	ldr	r2, [pc, #52]	@ (800554c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	0c9c      	lsrs	r4, r3, #18
 800552e:	f7fe ff29 	bl	8004384 <HAL_PWREx_GetVoltageRange>
 8005532:	4603      	mov	r3, r0
 8005534:	4619      	mov	r1, r3
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f80c 	bl	8005554 <RCC_SetFlashLatency>
 800553c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bd90      	pop	{r4, r7, pc}
 8005546:	bf00      	nop
 8005548:	0800b3f0 	.word	0x0800b3f0
 800554c:	0800b3b0 	.word	0x0800b3b0
 8005550:	431bde83 	.word	0x431bde83

08005554 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b093      	sub	sp, #76	@ 0x4c
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800555e:	4b37      	ldr	r3, [pc, #220]	@ (800563c <RCC_SetFlashLatency+0xe8>)
 8005560:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800556a:	4a35      	ldr	r2, [pc, #212]	@ (8005640 <RCC_SetFlashLatency+0xec>)
 800556c:	f107 031c 	add.w	r3, r7, #28
 8005570:	ca07      	ldmia	r2, {r0, r1, r2}
 8005572:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005576:	4b33      	ldr	r3, [pc, #204]	@ (8005644 <RCC_SetFlashLatency+0xf0>)
 8005578:	f107 040c 	add.w	r4, r7, #12
 800557c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800557e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005582:	2300      	movs	r3, #0
 8005584:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800558c:	d11a      	bne.n	80055c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800558e:	2300      	movs	r3, #0
 8005590:	643b      	str	r3, [r7, #64]	@ 0x40
 8005592:	e013      	b.n	80055bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	3348      	adds	r3, #72	@ 0x48
 800559a:	443b      	add	r3, r7
 800559c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d807      	bhi.n	80055b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	3348      	adds	r3, #72	@ 0x48
 80055ac:	443b      	add	r3, r7
 80055ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055b2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80055b4:	e020      	b.n	80055f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b8:	3301      	adds	r3, #1
 80055ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80055bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d9e8      	bls.n	8005594 <RCC_SetFlashLatency+0x40>
 80055c2:	e019      	b.n	80055f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c8:	e013      	b.n	80055f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80055ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	3348      	adds	r3, #72	@ 0x48
 80055d0:	443b      	add	r3, r7
 80055d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d807      	bhi.n	80055ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	3348      	adds	r3, #72	@ 0x48
 80055e2:	443b      	add	r3, r7
 80055e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80055ea:	e005      	b.n	80055f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ee:	3301      	adds	r3, #1
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d9e8      	bls.n	80055ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <RCC_SetFlashLatency+0xf4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 0207 	bic.w	r2, r3, #7
 8005600:	4911      	ldr	r1, [pc, #68]	@ (8005648 <RCC_SetFlashLatency+0xf4>)
 8005602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005608:	f7fb fb9c 	bl	8000d44 <HAL_GetTick>
 800560c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800560e:	e008      	b.n	8005622 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005610:	f7fb fb98 	bl	8000d44 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e007      	b.n	8005632 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005622:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <RCC_SetFlashLatency+0xf4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800562c:	429a      	cmp	r2, r3
 800562e:	d1ef      	bne.n	8005610 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	374c      	adds	r7, #76	@ 0x4c
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}
 800563a:	bf00      	nop
 800563c:	0800b33c 	.word	0x0800b33c
 8005640:	0800b34c 	.word	0x0800b34c
 8005644:	0800b358 	.word	0x0800b358
 8005648:	58004000 	.word	0x58004000

0800564c <LL_RCC_LSE_IsEnabled>:
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <LL_RCC_LSE_IsEnabled+0x18>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <LL_RCC_LSE_IsEnabled+0x1a>
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_RCC_LSE_IsReady>:
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d101      	bne.n	8005688 <LL_RCC_LSE_IsReady+0x18>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <LL_RCC_LSE_IsReady+0x1a>
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_RCC_MSI_EnablePLLMode>:
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056a2:	f043 0304 	orr.w	r3, r3, #4
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_SetRFWKPClockSource>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <LL_RCC_SetSMPSClockSource>:
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <LL_RCC_SetSMPSPrescaler>:
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4313      	orrs	r3, r2
 8005720:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_RCC_SetUSARTClockSource>:
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f023 0203 	bic.w	r2, r3, #3
 8005742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <LL_RCC_SetLPUARTClockSource>:
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800576e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LL_RCC_SetI2CClockSource>:
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005792:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800579e:	43db      	mvns	r3, r3
 80057a0:	401a      	ands	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80057aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_RCC_SetLPTIMClockSource>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	43db      	mvns	r3, r3
 80057d8:	401a      	ands	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_SetSAIClockSource>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005808:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_RCC_SetRNGClockSource>:
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <LL_RCC_SetCLK48ClockSource>:
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005860:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_RCC_SetUSBClockSource>:
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ffe3 	bl	800584c <LL_RCC_SetCLK48ClockSource>
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <LL_RCC_SetADCClockSource>:
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_RCC_SetRTCClockSource>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_GetRTCClockSource>:
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_RCC_ForceBackupDomainReset>:
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_RCC_PLLSAI1_Enable>:
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_PLLSAI1_Disable>:
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005970:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005974:	6013      	str	r3, [r2, #0]
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LL_RCC_PLLSAI1_IsReady>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800598e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005992:	d101      	bne.n	8005998 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_APB1_GRP1_ForceReset>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_APB1_GRP1_ReleaseReset>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	43db      	mvns	r3, r3
 80059da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059de:	4013      	ands	r3, r2
 80059e0:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80059f6:	2300      	movs	r3, #0
 80059f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80059fa:	2300      	movs	r3, #0
 80059fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d034      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a12:	d021      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005a14:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a18:	d81b      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a1e:	d01d      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005a20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a24:	d815      	bhi.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a2e:	d110      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a40:	e00d      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f988 	bl	8005d5c <RCCEx_PLLSAI1_ConfigNP>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a50:	e005      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	77fb      	strb	r3, [r7, #31]
        break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d105      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fec3 	bl	80057f4 <LL_RCC_SetSAIClockSource>
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
 8005a72:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d046      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a80:	f7ff ff31 	bl	80058e6 <LL_RCC_GetRTCClockSource>
 8005a84:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d03c      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a90:	f7fe fc68 	bl	8004364 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ff0b 	bl	80058ba <LL_RCC_SetRTCClockSource>
 8005aa4:	e02e      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005ab0:	f7ff ff26 	bl	8005900 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005ab4:	f7ff ff35 	bl	8005922 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ad0:	f7ff fdbc 	bl	800564c <LL_RCC_LSE_IsEnabled>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d114      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ada:	f7fb f933 	bl	8000d44 <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ae0:	e00b      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae2:	f7fb f92f 	bl	8000d44 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d902      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	77fb      	strb	r3, [r7, #31]
              break;
 8005af8:	e004      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005afa:	f7ff fdb9 	bl	8005670 <LL_RCC_LSE_IsReady>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d1ee      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005b04:	7ffb      	ldrb	r3, [r7, #31]
 8005b06:	77bb      	strb	r3, [r7, #30]
 8005b08:	e001      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	7ffb      	ldrb	r3, [r7, #31]
 8005b0c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fe05 	bl	800572e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fe10 	bl	800575a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fe38 	bl	80057c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fe2d 	bl	80057c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fe05 	bl	8005786 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fdfa 	bl	8005786 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d022      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fe68 	bl	8005878 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bc0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bca:	d10b      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f91e 	bl	8005e12 <RCCEx_PLLSAI1_ConfigNQ>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005be0:	7ffb      	ldrb	r3, [r7, #31]
 8005be2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02b      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fe05 	bl	8005820 <LL_RCC_SetRNGClockSource>
 8005c16:	e00a      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	2000      	movs	r0, #0
 8005c24:	f7ff fdfc 	bl	8005820 <LL_RCC_SetRNGClockSource>
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fe0f 	bl	800584c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c36:	d107      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d022      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fe18 	bl	800588e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c66:	d107      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c76:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c80:	d10b      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3304      	adds	r3, #4
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f91e 	bl	8005ec8 <RCCEx_PLLSAI1_ConfigNR>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c90:	7ffb      	ldrb	r3, [r7, #31]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005c96:	7ffb      	ldrb	r3, [r7, #31]
 8005c98:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fd01 	bl	80056b2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fd20 	bl	8005706 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fd07 	bl	80056de <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005cd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005cde:	f7ff fcd9 	bl	8005694 <LL_RCC_MSI_EnablePLLMode>
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005cf0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005cf4:	f7ff fe56 	bl	80059a4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8005cf8:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005cfc:	f7ff fe64 	bl	80059c8 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005d28:	4a0b      	ldr	r2, [pc, #44]	@ (8005d58 <HAL_RCCEx_CRSConfig+0x70>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <HAL_RCCEx_CRSConfig+0x70>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	4906      	ldr	r1, [pc, #24]	@ (8005d58 <HAL_RCCEx_CRSConfig+0x70>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005d42:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HAL_RCCEx_CRSConfig+0x70>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a04      	ldr	r2, [pc, #16]	@ (8005d58 <HAL_RCCEx_CRSConfig+0x70>)
 8005d48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40006000 	.word	0x40006000

08005d5c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d68:	f7ff fdfb 	bl	8005962 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d6c:	f7fa ffea 	bl	8000d44 <HAL_GetTick>
 8005d70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d72:	e009      	b.n	8005d88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d74:	f7fa ffe6 	bl	8000d44 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d902      	bls.n	8005d88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	73fb      	strb	r3, [r7, #15]
      break;
 8005d86:	e004      	b.n	8005d92 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d88:	f7ff fdfa 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d137      	bne.n	8005e08 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dac:	4313      	orrs	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005dc6:	f7ff fdbd 	bl	8005944 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dca:	f7fa ffbb 	bl	8000d44 <HAL_GetTick>
 8005dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dd0:	e009      	b.n	8005de6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dd2:	f7fa ffb7 	bl	8000d44 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d902      	bls.n	8005de6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	73fb      	strb	r3, [r7, #15]
        break;
 8005de4:	e004      	b.n	8005df0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005de6:	f7ff fdcb 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d1f0      	bne.n	8005dd2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d108      	bne.n	8005e08 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e1e:	f7ff fda0 	bl	8005962 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e22:	f7fa ff8f 	bl	8000d44 <HAL_GetTick>
 8005e26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e28:	e009      	b.n	8005e3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e2a:	f7fa ff8b 	bl	8000d44 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d902      	bls.n	8005e3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3c:	e004      	b.n	8005e48 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e3e:	f7ff fd9f 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f0      	bne.n	8005e2a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d137      	bne.n	8005ebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e62:	4313      	orrs	r3, r2
 8005e64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e7c:	f7ff fd62 	bl	8005944 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e80:	f7fa ff60 	bl	8000d44 <HAL_GetTick>
 8005e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e86:	e009      	b.n	8005e9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e88:	f7fa ff5c 	bl	8000d44 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	73fb      	strb	r3, [r7, #15]
        break;
 8005e9a:	e004      	b.n	8005ea6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e9c:	f7ff fd70 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d1f0      	bne.n	8005e88 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ed4:	f7ff fd45 	bl	8005962 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ed8:	f7fa ff34 	bl	8000d44 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ede:	e009      	b.n	8005ef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee0:	f7fa ff30 	bl	8000d44 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d902      	bls.n	8005ef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef2:	e004      	b.n	8005efe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ef4:	f7ff fd44 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d137      	bne.n	8005f74 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f32:	f7ff fd07 	bl	8005944 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fa ff05 	bl	8000d44 <HAL_GetTick>
 8005f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f3c:	e009      	b.n	8005f52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f3e:	f7fa ff01 	bl	8000d44 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d902      	bls.n	8005f52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8005f50:	e004      	b.n	8005f5c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f52:	f7ff fd15 	bl	8005980 <LL_RCC_PLLSAI1_IsReady>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d1f0      	bne.n	8005f3e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e049      	b.n	8006024 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fa fd57 	bl	8000a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2202      	movs	r2, #2
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 fa7d 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e02e      	b.n	80060a2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a17      	ldr	r2, [pc, #92]	@ (80060b0 <HAL_TIM_Base_Start+0x84>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_TIM_Base_Start+0x34>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d115      	bne.n	800608c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <HAL_TIM_Base_Start+0x88>)
 8006068:	4013      	ands	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b06      	cmp	r3, #6
 8006070:	d015      	beq.n	800609e <HAL_TIM_Base_Start+0x72>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006078:	d011      	beq.n	800609e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	e008      	b.n	800609e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e000      	b.n	80060a0 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	00010007 	.word	0x00010007

080060b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0202 	mvn.w	r2, #2
 80060ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f9bc 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9ae 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9bf 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0204 	mvn.w	r2, #4
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f996 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f988 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f999 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0208 	mvn.w	r2, #8
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2204      	movs	r2, #4
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f970 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f962 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f973 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0210 	mvn.w	r2, #16
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2208      	movs	r2, #8
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f94a 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f93c 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f94d 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0201 	mvn.w	r2, #1
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f91a 	bl	8006458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00c      	beq.n	8006252 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800624a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 faab 	bl	80067a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800626e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 faa3 	bl	80067bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f907 	bl	80064a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f06f 0220 	mvn.w	r2, #32
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa6b 	bl	8006794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062be:	bf00      	nop
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_ConfigClockSource+0x1c>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0b6      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x18a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006300:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006304:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800630c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800631e:	d03e      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xd8>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006324:	f200 8087 	bhi.w	8006436 <HAL_TIM_ConfigClockSource+0x170>
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632c:	f000 8086 	beq.w	800643c <HAL_TIM_ConfigClockSource+0x176>
 8006330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006334:	d87f      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 8006336:	2b70      	cmp	r3, #112	@ 0x70
 8006338:	d01a      	beq.n	8006370 <HAL_TIM_ConfigClockSource+0xaa>
 800633a:	2b70      	cmp	r3, #112	@ 0x70
 800633c:	d87b      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 800633e:	2b60      	cmp	r3, #96	@ 0x60
 8006340:	d050      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0x11e>
 8006342:	2b60      	cmp	r3, #96	@ 0x60
 8006344:	d877      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 8006346:	2b50      	cmp	r3, #80	@ 0x50
 8006348:	d03c      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xfe>
 800634a:	2b50      	cmp	r3, #80	@ 0x50
 800634c:	d873      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	d058      	beq.n	8006404 <HAL_TIM_ConfigClockSource+0x13e>
 8006352:	2b40      	cmp	r3, #64	@ 0x40
 8006354:	d86f      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 8006356:	2b30      	cmp	r3, #48	@ 0x30
 8006358:	d064      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0x15e>
 800635a:	2b30      	cmp	r3, #48	@ 0x30
 800635c:	d86b      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 800635e:	2b20      	cmp	r3, #32
 8006360:	d060      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0x15e>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d867      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d05c      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0x15e>
 800636a:	2b10      	cmp	r3, #16
 800636c:	d05a      	beq.n	8006424 <HAL_TIM_ConfigClockSource+0x15e>
 800636e:	e062      	b.n	8006436 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006380:	f000 f988 	bl	8006694 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006392:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	609a      	str	r2, [r3, #8]
      break;
 800639c:	e04f      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ae:	f000 f971 	bl	8006694 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e03c      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d0:	461a      	mov	r2, r3
 80063d2:	f000 f8e3 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2150      	movs	r1, #80	@ 0x50
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f93c 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 80063e2:	e02c      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f0:	461a      	mov	r2, r3
 80063f2:	f000 f902 	bl	80065fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2160      	movs	r1, #96	@ 0x60
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f92c 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8006402:	e01c      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006410:	461a      	mov	r2, r3
 8006412:	f000 f8c3 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2140      	movs	r1, #64	@ 0x40
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f91c 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8006422:	e00c      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 f913 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8006434:	e003      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	73fb      	strb	r3, [r7, #15]
      break;
 800643a:	e000      	b.n	800643e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800643c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <TIM_Base_SetConfig+0xd4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x20>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a27      	ldr	r2, [pc, #156]	@ (8006590 <TIM_Base_SetConfig+0xd4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d007      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a24      	ldr	r2, [pc, #144]	@ (8006594 <TIM_Base_SetConfig+0xd8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a23      	ldr	r2, [pc, #140]	@ (8006598 <TIM_Base_SetConfig+0xdc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a12      	ldr	r2, [pc, #72]	@ (8006590 <TIM_Base_SetConfig+0xd4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0xa0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a11      	ldr	r2, [pc, #68]	@ (8006594 <TIM_Base_SetConfig+0xd8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0xa0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a10      	ldr	r2, [pc, #64]	@ (8006598 <TIM_Base_SetConfig+0xdc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d103      	bne.n	8006564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	d105      	bne.n	8006582 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	611a      	str	r2, [r3, #16]
  }
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006636:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	f043 0307 	orr.w	r3, r3, #7
 8006680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	021a      	lsls	r2, r3, #8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	609a      	str	r2, [r3, #8]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e04a      	b.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800671c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a12      	ldr	r2, [pc, #72]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006754:	d10c      	bne.n	8006770 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	4313      	orrs	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40012c00 	.word	0x40012c00

08006794 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067e0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80067e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006806:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800680a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	b29b      	uxth	r3, r3
 8006818:	43db      	mvns	r3, r3
 800681a:	b29b      	uxth	r3, r3
 800681c:	4013      	ands	r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	1d3b      	adds	r3, r7, #4
 800683e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006870:	b480      	push	{r7}
 8006872:	b09d      	sub	sp, #116	@ 0x74
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	78db      	ldrb	r3, [r3, #3]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d81f      	bhi.n	80068e2 <USB_ActivateEndpoint+0x72>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <USB_ActivateEndpoint+0x38>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068d5 	.word	0x080068d5
 80068b0:	080068eb 	.word	0x080068eb
 80068b4:	080068c7 	.word	0x080068c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80068c4:	e012      	b.n	80068ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068ca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80068ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80068d2:	e00b      	b.n	80068ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80068e0:	e004      	b.n	80068ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80068e8:	e000      	b.n	80068ec <USB_ActivateEndpoint+0x7c>
      break;
 80068ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690a:	b29b      	uxth	r3, r3
 800690c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	b21b      	sxth	r3, r3
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	b21a      	sxth	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b21b      	sxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b21b      	sxth	r3, r3
 8006932:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	7b1b      	ldrb	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8178 	bne.w	8006c52 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8084 	beq.w	8006a74 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	4413      	add	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00da      	lsls	r2, r3, #3
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	88db      	ldrh	r3, [r3, #6]
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	b29b      	uxth	r3, r3
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	827b      	strh	r3, [r7, #18]
 80069ae:	8a7b      	ldrh	r3, [r7, #18]
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <USB_ActivateEndpoint+0x180>
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ce:	823b      	strh	r3, [r7, #16]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	8a3b      	ldrh	r3, [r7, #16]
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	78db      	ldrb	r3, [r3, #3]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d020      	beq.n	8006a3a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a0e:	81bb      	strh	r3, [r7, #12]
 8006a10:	89bb      	ldrh	r3, [r7, #12]
 8006a12:	f083 0320 	eor.w	r3, r3, #32
 8006a16:	81bb      	strh	r3, [r7, #12]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	89bb      	ldrh	r3, [r7, #12]
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]
 8006a38:	e2d5      	b.n	8006fe6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a50:	81fb      	strh	r3, [r7, #14]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
 8006a72:	e2b8      	b.n	8006fe6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	4413      	add	r3, r2
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	00da      	lsls	r2, r3, #3
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	88db      	ldrh	r3, [r3, #6]
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	4413      	add	r3, r2
 8006aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	00da      	lsls	r2, r3, #3
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	801a      	strh	r2, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ae2:	d91d      	bls.n	8006b20 <USB_ActivateEndpoint+0x2b0>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	095b      	lsrs	r3, r3, #5
 8006aea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <USB_ActivateEndpoint+0x28e>
 8006af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006afa:	3b01      	subs	r3, #1
 8006afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	801a      	strh	r2, [r3, #0]
 8006b1e:	e026      	b.n	8006b6e <USB_ActivateEndpoint+0x2fe>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <USB_ActivateEndpoint+0x2ce>
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e017      	b.n	8006b6e <USB_ActivateEndpoint+0x2fe>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <USB_ActivateEndpoint+0x2e8>
 8006b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b54:	3301      	adds	r3, #1
 8006b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	029b      	lsls	r3, r3, #10
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01b      	beq.n	8006bbe <USB_ActivateEndpoint+0x34e>
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9c:	843b      	strh	r3, [r7, #32]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	8c3b      	ldrh	r3, [r7, #32]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d124      	bne.n	8006c10 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bdc:	83bb      	strh	r3, [r7, #28]
 8006bde:	8bbb      	ldrh	r3, [r7, #28]
 8006be0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006be4:	83bb      	strh	r3, [r7, #28]
 8006be6:	8bbb      	ldrh	r3, [r7, #28]
 8006be8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bec:	83bb      	strh	r3, [r7, #28]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8bbb      	ldrh	r3, [r7, #28]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
 8006c0e:	e1ea      	b.n	8006fe6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c26:	83fb      	strh	r3, [r7, #30]
 8006c28:	8bfb      	ldrh	r3, [r7, #30]
 8006c2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c2e:	83fb      	strh	r3, [r7, #30]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	441a      	add	r2, r3
 8006c3a:	8bfb      	ldrh	r3, [r7, #30]
 8006c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8013      	strh	r3, [r2, #0]
 8006c50:	e1c9      	b.n	8006fe6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	78db      	ldrb	r3, [r3, #3]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d11e      	bne.n	8006c98 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	441a      	add	r2, r3
 8006c7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]
 8006c96:	e01d      	b.n	8006cd4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	441a      	add	r2, r3
 8006cbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ce4:	4413      	add	r3, r2
 8006ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	891b      	ldrh	r3, [r3, #8]
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d18:	4413      	add	r3, r2
 8006d1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00da      	lsls	r2, r3, #3
 8006d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	895b      	ldrh	r3, [r3, #10]
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f040 8093 	bne.w	8006e6c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006d56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01b      	beq.n	8006d9a <USB_ActivateEndpoint+0x52a>
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d78:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006da8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01b      	beq.n	8006dea <USB_ActivateEndpoint+0x57a>
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e10:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
 8006e6a:	e0bc      	b.n	8006fe6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01d      	beq.n	8006ec4 <USB_ActivateEndpoint+0x654>
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01d      	beq.n	8006f1c <USB_ActivateEndpoint+0x6ac>
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	441a      	add	r2, r3
 8006f04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	78db      	ldrb	r3, [r3, #3]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d024      	beq.n	8006f6e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006f3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006f42:	f083 0320 	eor.w	r3, r3, #32
 8006f46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
 8006f6c:	e01d      	b.n	8006faa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006fe6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3774      	adds	r7, #116	@ 0x74
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop

08006ff8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b08d      	sub	sp, #52	@ 0x34
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	7b1b      	ldrb	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 808e 	bne.w	8007128 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d044      	beq.n	800709e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	81bb      	strh	r3, [r7, #12]
 8007022:	89bb      	ldrh	r3, [r7, #12]
 8007024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <USB_DeactivateEndpoint+0x6c>
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007042:	817b      	strh	r3, [r7, #10]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	441a      	add	r2, r3
 800704e:	897b      	ldrh	r3, [r7, #10]
 8007050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007060:	b29b      	uxth	r3, r3
 8007062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800707a:	813b      	strh	r3, [r7, #8]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800708c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007098:	b29b      	uxth	r3, r3
 800709a:	8013      	strh	r3, [r2, #0]
 800709c:	e192      	b.n	80073c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	827b      	strh	r3, [r7, #18]
 80070ac:	8a7b      	ldrh	r3, [r7, #18]
 80070ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01b      	beq.n	80070ee <USB_DeactivateEndpoint+0xf6>
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070cc:	823b      	strh	r3, [r7, #16]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	8a3b      	ldrh	r3, [r7, #16]
 80070da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007104:	81fb      	strh	r3, [r7, #14]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800711e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007122:	b29b      	uxth	r3, r3
 8007124:	8013      	strh	r3, [r2, #0]
 8007126:	e14d      	b.n	80073c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f040 80a5 	bne.w	800727c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	843b      	strh	r3, [r7, #32]
 8007140:	8c3b      	ldrh	r3, [r7, #32]
 8007142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01b      	beq.n	8007182 <USB_DeactivateEndpoint+0x18a>
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007160:	83fb      	strh	r3, [r7, #30]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	8bfb      	ldrh	r3, [r7, #30]
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800717a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	83bb      	strh	r3, [r7, #28]
 8007190:	8bbb      	ldrh	r3, [r7, #28]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <USB_DeactivateEndpoint+0x1da>
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b0:	837b      	strh	r3, [r7, #26]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	8b7b      	ldrh	r3, [r7, #26]
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e8:	833b      	strh	r3, [r7, #24]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	8b3b      	ldrh	r3, [r7, #24]
 80071f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800721c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007220:	82fb      	strh	r3, [r7, #22]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	441a      	add	r2, r3
 800722c:	8afb      	ldrh	r3, [r7, #22]
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007258:	82bb      	strh	r3, [r7, #20]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	8abb      	ldrh	r3, [r7, #20]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
 800727a:	e0a3      	b.n	80073c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800728a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800728c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01b      	beq.n	80072cc <USB_DeactivateEndpoint+0x2d4>
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80072b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80072da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <USB_DeactivateEndpoint+0x324>
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007314:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007318:	b29b      	uxth	r3, r3
 800731a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007332:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800734c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800736a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	441a      	add	r2, r3
 8007376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800739e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3734      	adds	r7, #52	@ 0x34
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b0c2      	sub	sp, #264	@ 0x108
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e0:	6018      	str	r0, [r3, #0]
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	f040 86b7 	bne.w	800816c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80073fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	429a      	cmp	r2, r3
 8007418:	d908      	bls.n	800742c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800741a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800742a:	e007      	b.n	800743c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	7b1b      	ldrb	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d13a      	bne.n	80074c2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6959      	ldr	r1, [r3, #20]
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	88da      	ldrh	r2, [r3, #6]
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	b29b      	uxth	r3, r3
 800746a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800746e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007472:	6800      	ldr	r0, [r0, #0]
 8007474:	f001 fcc2 	bl	8008dfc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007492:	b29b      	uxth	r3, r3
 8007494:	461a      	mov	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	4413      	add	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	00da      	lsls	r2, r3, #3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4413      	add	r3, r2
 80074ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	801a      	strh	r2, [r3, #0]
 80074be:	f000 be1f 	b.w	8008100 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	f040 8462 	bne.w	8007d98 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	f240 83df 	bls.w	8007cb0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007518:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007542:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800754e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 81c7 	beq.w	8007922 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d177      	bne.n	80076a0 <USB_EPStartXfer+0x2ce>
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d0:	4413      	add	r3, r2
 80075d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	2b3e      	cmp	r3, #62	@ 0x3e
 8007602:	d921      	bls.n	8007648 <USB_EPStartXfer+0x276>
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	2b00      	cmp	r3, #0
 8007618:	d104      	bne.n	8007624 <USB_EPStartXfer+0x252>
 800761a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800761e:	3b01      	subs	r3, #1
 8007620:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29a      	uxth	r2, r3
 800762a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800762e:	b29b      	uxth	r3, r3
 8007630:	029b      	lsls	r3, r3, #10
 8007632:	b29b      	uxth	r3, r3
 8007634:	4313      	orrs	r3, r2
 8007636:	b29b      	uxth	r3, r3
 8007638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007640:	b29a      	uxth	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e050      	b.n	80076ea <USB_EPStartXfer+0x318>
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <USB_EPStartXfer+0x294>
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	e041      	b.n	80076ea <USB_EPStartXfer+0x318>
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <USB_EPStartXfer+0x2b4>
 800767c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007680:	3301      	adds	r3, #1
 8007682:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29a      	uxth	r2, r3
 800768c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007690:	b29b      	uxth	r3, r3
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e024      	b.n	80076ea <USB_EPStartXfer+0x318>
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d11c      	bne.n	80076ea <USB_EPStartXfer+0x318>
 80076b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076be:	b29b      	uxth	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	4413      	add	r3, r2
 80076c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00da      	lsls	r2, r3, #3
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	4413      	add	r3, r2
 80076da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	895b      	ldrh	r3, [r3, #10]
 80076f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6959      	ldr	r1, [r3, #20]
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	b29b      	uxth	r3, r3
 800770c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007710:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007714:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007718:	6800      	ldr	r0, [r0, #0]
 800771a:	f001 fb6f 	bl	8008dfc <USB_WritePMA>
            ep->xfer_buff += len;
 800771e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695a      	ldr	r2, [r3, #20]
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772e:	441a      	add	r2, r3
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a1a      	ldr	r2, [r3, #32]
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	d90f      	bls.n	8007778 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	621a      	str	r2, [r3, #32]
 8007776:	e00e      	b.n	8007796 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d177      	bne.n	8007896 <USB_EPStartXfer+0x4c4>
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	4413      	add	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	00da      	lsls	r2, r3, #3
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	4413      	add	r3, r2
 80077dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80077f8:	d921      	bls.n	800783e <USB_EPStartXfer+0x46c>
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <USB_EPStartXfer+0x448>
 8007810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007814:	3b01      	subs	r3, #1
 8007816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007824:	b29b      	uxth	r3, r3
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e056      	b.n	80078ec <USB_EPStartXfer+0x51a>
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <USB_EPStartXfer+0x48a>
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	e047      	b.n	80078ec <USB_EPStartXfer+0x51a>
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <USB_EPStartXfer+0x4aa>
 8007872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007876:	3301      	adds	r3, #1
 8007878:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007886:	b29b      	uxth	r3, r3
 8007888:	029b      	lsls	r3, r3, #10
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	e02a      	b.n	80078ec <USB_EPStartXfer+0x51a>
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	785b      	ldrb	r3, [r3, #1]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d122      	bne.n	80078ec <USB_EPStartXfer+0x51a>
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	4413      	add	r3, r2
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	00da      	lsls	r2, r3, #3
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	4413      	add	r3, r2
 80078dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	891b      	ldrh	r3, [r3, #8]
 80078f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6959      	ldr	r1, [r3, #20]
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	b29b      	uxth	r3, r3
 800790e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007912:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007916:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	f001 fa6e 	bl	8008dfc <USB_WritePMA>
 8007920:	e3ee      	b.n	8008100 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d177      	bne.n	8007a22 <USB_EPStartXfer+0x650>
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007952:	4413      	add	r3, r2
 8007954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	00da      	lsls	r2, r3, #3
 8007964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007966:	4413      	add	r3, r2
 8007968:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800796c:	647b      	str	r3, [r7, #68]	@ 0x44
 800796e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	2b3e      	cmp	r3, #62	@ 0x3e
 8007984:	d921      	bls.n	80079ca <USB_EPStartXfer+0x5f8>
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	f003 031f 	and.w	r3, r3, #31
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USB_EPStartXfer+0x5d4>
 800799c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079a0:	3b01      	subs	r3, #1
 80079a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	029b      	lsls	r3, r3, #10
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e056      	b.n	8007a78 <USB_EPStartXfer+0x6a6>
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <USB_EPStartXfer+0x616>
 80079d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	e047      	b.n	8007a78 <USB_EPStartXfer+0x6a6>
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <USB_EPStartXfer+0x636>
 80079fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a02:	3301      	adds	r3, #1
 8007a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e02a      	b.n	8007a78 <USB_EPStartXfer+0x6a6>
 8007a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d122      	bne.n	8007a78 <USB_EPStartXfer+0x6a6>
 8007a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a52:	4413      	add	r3, r2
 8007a54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00da      	lsls	r2, r3, #3
 8007a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a66:	4413      	add	r3, r2
 8007a68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	891b      	ldrh	r3, [r3, #8]
 8007a84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6959      	ldr	r1, [r3, #20]
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007aa2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aa6:	6800      	ldr	r0, [r0, #0]
 8007aa8:	f001 f9a8 	bl	8008dfc <USB_WritePMA>
            ep->xfer_buff += len;
 8007aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	695a      	ldr	r2, [r3, #20]
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	441a      	add	r2, r3
 8007abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d90f      	bls.n	8007b06 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	621a      	str	r2, [r3, #32]
 8007b04:	e00e      	b.n	8007b24 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d177      	bne.n	8007c30 <USB_EPStartXfer+0x85e>
 8007b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	4413      	add	r3, r2
 8007b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	00da      	lsls	r2, r3, #3
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	4413      	add	r3, r2
 8007b76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b90:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b92:	d921      	bls.n	8007bd8 <USB_EPStartXfer+0x806>
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <USB_EPStartXfer+0x7e2>
 8007baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	029b      	lsls	r3, r3, #10
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e050      	b.n	8007c7a <USB_EPStartXfer+0x8a8>
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <USB_EPStartXfer+0x824>
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e041      	b.n	8007c7a <USB_EPStartXfer+0x8a8>
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <USB_EPStartXfer+0x844>
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	3301      	adds	r3, #1
 8007c12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	029b      	lsls	r3, r3, #10
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4313      	orrs	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e024      	b.n	8007c7a <USB_EPStartXfer+0x8a8>
 8007c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d11c      	bne.n	8007c7a <USB_EPStartXfer+0x8a8>
 8007c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c54:	4413      	add	r3, r2
 8007c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	00da      	lsls	r2, r3, #3
 8007c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	895b      	ldrh	r3, [r3, #10]
 8007c86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6959      	ldr	r1, [r3, #20]
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007ca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ca8:	6800      	ldr	r0, [r0, #0]
 8007caa:	f001 f8a7 	bl	8008dfc <USB_WritePMA>
 8007cae:	e227      	b.n	8008100 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d3c:	4413      	add	r3, r2
 8007d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	00da      	lsls	r2, r3, #3
 8007d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	891b      	ldrh	r3, [r3, #8]
 8007d6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6959      	ldr	r1, [r3, #20]
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d88:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d8c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d90:	6800      	ldr	r0, [r0, #0]
 8007d92:	f001 f833 	bl	8008dfc <USB_WritePMA>
 8007d96:	e1b3      	b.n	8008100 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6a1a      	ldr	r2, [r3, #32]
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	1ad2      	subs	r2, r2, r3
 8007daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80c6 	beq.w	8007f6a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d177      	bne.n	8007eea <USB_EPStartXfer+0xb18>
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e1a:	4413      	add	r3, r2
 8007e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	00da      	lsls	r2, r3, #3
 8007e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e2e:	4413      	add	r3, r2
 8007e30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e34:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e4c:	d921      	bls.n	8007e92 <USB_EPStartXfer+0xac0>
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <USB_EPStartXfer+0xa9c>
 8007e64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	029b      	lsls	r3, r3, #10
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e8e:	801a      	strh	r2, [r3, #0]
 8007e90:	e050      	b.n	8007f34 <USB_EPStartXfer+0xb62>
 8007e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <USB_EPStartXfer+0xade>
 8007e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	e041      	b.n	8007f34 <USB_EPStartXfer+0xb62>
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <USB_EPStartXfer+0xafe>
 8007ec6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007eca:	3301      	adds	r3, #1
 8007ecc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	e024      	b.n	8007f34 <USB_EPStartXfer+0xb62>
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d11c      	bne.n	8007f34 <USB_EPStartXfer+0xb62>
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f0e:	4413      	add	r3, r2
 8007f10:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	00da      	lsls	r2, r3, #3
 8007f20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f22:	4413      	add	r3, r2
 8007f24:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	895b      	ldrh	r3, [r3, #10]
 8007f40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6959      	ldr	r1, [r3, #20]
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f62:	6800      	ldr	r0, [r0, #0]
 8007f64:	f000 ff4a 	bl	8008dfc <USB_WritePMA>
 8007f68:	e0ca      	b.n	8008100 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d177      	bne.n	800806a <USB_EPStartXfer+0xc98>
 8007f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f9a:	4413      	add	r3, r2
 8007f9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	00da      	lsls	r2, r3, #3
 8007fac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fae:	4413      	add	r3, r2
 8007fb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fca:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fcc:	d921      	bls.n	8008012 <USB_EPStartXfer+0xc40>
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <USB_EPStartXfer+0xc1c>
 8007fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	029b      	lsls	r3, r3, #10
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800a:	b29a      	uxth	r2, r3
 800800c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	e05c      	b.n	80080cc <USB_EPStartXfer+0xcfa>
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <USB_EPStartXfer+0xc5e>
 800801a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008028:	b29a      	uxth	r2, r3
 800802a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e04d      	b.n	80080cc <USB_EPStartXfer+0xcfa>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0xc7e>
 8008046:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800804a:	3301      	adds	r3, #1
 800804c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800805a:	b29b      	uxth	r3, r3
 800805c:	029b      	lsls	r3, r3, #10
 800805e:	b29b      	uxth	r3, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	b29a      	uxth	r2, r3
 8008064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	e030      	b.n	80080cc <USB_EPStartXfer+0xcfa>
 800806a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d128      	bne.n	80080cc <USB_EPStartXfer+0xcfa>
 800807a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008096:	b29b      	uxth	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800809e:	4413      	add	r3, r2
 80080a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	00da      	lsls	r2, r3, #3
 80080b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080b6:	4413      	add	r3, r2
 80080b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6959      	ldr	r1, [r3, #20]
 80080e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080fa:	6800      	ldr	r0, [r0, #0]
 80080fc:	f000 fe7e 	bl	8008dfc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008126:	817b      	strh	r3, [r7, #10]
 8008128:	897b      	ldrh	r3, [r7, #10]
 800812a:	f083 0310 	eor.w	r3, r3, #16
 800812e:	817b      	strh	r3, [r7, #10]
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	f083 0320 	eor.w	r3, r3, #32
 8008136:	817b      	strh	r3, [r7, #10]
 8008138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800813c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	441a      	add	r2, r3
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800815c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008164:	b29b      	uxth	r3, r3
 8008166:	8013      	strh	r3, [r2, #0]
 8008168:	f000 bcde 	b.w	8008b28 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800816c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	7b1b      	ldrb	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 80bb 	bne.w	80082f4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	429a      	cmp	r2, r3
 8008198:	d917      	bls.n	80081ca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800819a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80081aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	619a      	str	r2, [r3, #24]
 80081c8:	e00e      	b.n	80081e8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80081da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2200      	movs	r2, #0
 80081e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008204:	b29b      	uxth	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800820c:	4413      	add	r3, r2
 800820e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	00da      	lsls	r2, r3, #3
 8008220:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008224:	4413      	add	r3, r2
 8008226:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800822a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800822e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823a:	b29a      	uxth	r2, r3
 800823c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	2b3e      	cmp	r3, #62	@ 0x3e
 8008248:	d924      	bls.n	8008294 <USB_EPStartXfer+0xec2>
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008258:	f003 031f 	and.w	r3, r3, #31
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <USB_EPStartXfer+0xe98>
 8008260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008264:	3b01      	subs	r3, #1
 8008266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800826a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29a      	uxth	r2, r3
 8008272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008276:	b29b      	uxth	r3, r3
 8008278:	029b      	lsls	r3, r3, #10
 800827a:	b29b      	uxth	r3, r3
 800827c:	4313      	orrs	r3, r2
 800827e:	b29b      	uxth	r3, r3
 8008280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008288:	b29a      	uxth	r2, r3
 800828a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800828e:	801a      	strh	r2, [r3, #0]
 8008290:	f000 bc10 	b.w	8008ab4 <USB_EPStartXfer+0x16e2>
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10c      	bne.n	80082b6 <USB_EPStartXfer+0xee4>
 800829c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e3fe      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ba:	085b      	lsrs	r3, r3, #1
 80082bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <USB_EPStartXfer+0xf04>
 80082cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082d0:	3301      	adds	r3, #1
 80082d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29a      	uxth	r2, r3
 80082de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	029b      	lsls	r3, r3, #10
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	e3df      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	2b02      	cmp	r3, #2
 8008302:	f040 8218 	bne.w	8008736 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f040 809d 	bne.w	8008452 <USB_EPStartXfer+0x1080>
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800833c:	4413      	add	r3, r2
 800833e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	00da      	lsls	r2, r3, #3
 8008350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008354:	4413      	add	r3, r2
 8008356:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800835a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800835e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800836a:	b29a      	uxth	r2, r3
 800836c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008380:	d92b      	bls.n	80083da <USB_EPStartXfer+0x1008>
 8008382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <USB_EPStartXfer+0xfe0>
 80083a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ac:	3b01      	subs	r3, #1
 80083ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083be:	b29b      	uxth	r3, r3
 80083c0:	029b      	lsls	r3, r3, #10
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	e070      	b.n	80084bc <USB_EPStartXfer+0x10ea>
 80083da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10c      	bne.n	8008404 <USB_EPStartXfer+0x1032>
 80083ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e05b      	b.n	80084bc <USB_EPStartXfer+0x10ea>
 8008404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <USB_EPStartXfer+0x1062>
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842e:	3301      	adds	r3, #1
 8008430:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29a      	uxth	r2, r3
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008440:	b29b      	uxth	r3, r3
 8008442:	029b      	lsls	r3, r3, #10
 8008444:	b29b      	uxth	r3, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	b29a      	uxth	r2, r3
 800844a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	e034      	b.n	80084bc <USB_EPStartXfer+0x10ea>
 8008452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d12c      	bne.n	80084bc <USB_EPStartXfer+0x10ea>
 8008462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008474:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800847e:	b29b      	uxth	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008486:	4413      	add	r3, r2
 8008488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	00da      	lsls	r2, r3, #3
 800849a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800849e:	4413      	add	r3, r2
 80084a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 809d 	bne.w	8008616 <USB_EPStartXfer+0x1244>
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008500:	4413      	add	r3, r2
 8008502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	00da      	lsls	r2, r3, #3
 8008514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008518:	4413      	add	r3, r2
 800851a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800851e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800852e:	b29a      	uxth	r2, r3
 8008530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b3e      	cmp	r3, #62	@ 0x3e
 8008544:	d92b      	bls.n	800859e <USB_EPStartXfer+0x11cc>
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	2b00      	cmp	r3, #0
 800856a:	d104      	bne.n	8008576 <USB_EPStartXfer+0x11a4>
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	3b01      	subs	r3, #1
 8008572:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008576:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29a      	uxth	r2, r3
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008582:	b29b      	uxth	r3, r3
 8008584:	029b      	lsls	r3, r3, #10
 8008586:	b29b      	uxth	r3, r3
 8008588:	4313      	orrs	r3, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008594:	b29a      	uxth	r2, r3
 8008596:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	e069      	b.n	8008672 <USB_EPStartXfer+0x12a0>
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <USB_EPStartXfer+0x11f6>
 80085ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e054      	b.n	8008672 <USB_EPStartXfer+0x12a0>
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <USB_EPStartXfer+0x1226>
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f2:	3301      	adds	r3, #1
 80085f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008604:	b29b      	uxth	r3, r3
 8008606:	029b      	lsls	r3, r3, #10
 8008608:	b29b      	uxth	r3, r3
 800860a:	4313      	orrs	r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	e02d      	b.n	8008672 <USB_EPStartXfer+0x12a0>
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	785b      	ldrb	r3, [r3, #1]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d125      	bne.n	8008672 <USB_EPStartXfer+0x12a0>
 8008626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008634:	b29b      	uxth	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800863c:	4413      	add	r3, r2
 800863e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008654:	4413      	add	r3, r2
 8008656:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800865a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800865e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	b29a      	uxth	r2, r3
 800866c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008670:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 8218 	beq.w	8008ab4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <USB_EPStartXfer+0x12ea>
 80086b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10d      	bne.n	80086d8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 81f5 	bne.w	8008ab4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 81ee 	bne.w	8008ab4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800872c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008730:	b29b      	uxth	r3, r3
 8008732:	8013      	strh	r3, [r2, #0]
 8008734:	e1be      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	78db      	ldrb	r3, [r3, #3]
 8008742:	2b01      	cmp	r3, #1
 8008744:	f040 81b4 	bne.w	8008ab0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	429a      	cmp	r2, r3
 8008762:	d917      	bls.n	8008794 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008784:	1ad2      	subs	r2, r2, r3
 8008786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	619a      	str	r2, [r3, #24]
 8008792:	e00e      	b.n	80087b2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80087a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2200      	movs	r2, #0
 80087b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 8085 	bne.w	80088ce <USB_EPStartXfer+0x14fc>
 80087c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087e8:	4413      	add	r3, r2
 80087ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	00da      	lsls	r2, r3, #3
 80087fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008800:	4413      	add	r3, r2
 8008802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800880a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008816:	b29a      	uxth	r2, r3
 8008818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008822:	2b3e      	cmp	r3, #62	@ 0x3e
 8008824:	d923      	bls.n	800886e <USB_EPStartXfer+0x149c>
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <USB_EPStartXfer+0x1474>
 800883c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008840:	3b01      	subs	r3, #1
 8008842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29a      	uxth	r2, r3
 800884e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008852:	b29b      	uxth	r3, r3
 8008854:	029b      	lsls	r3, r3, #10
 8008856:	b29b      	uxth	r3, r3
 8008858:	4313      	orrs	r3, r2
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008864:	b29a      	uxth	r2, r3
 8008866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	e060      	b.n	8008930 <USB_EPStartXfer+0x155e>
 800886e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10c      	bne.n	8008890 <USB_EPStartXfer+0x14be>
 8008876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800888c:	801a      	strh	r2, [r3, #0]
 800888e:	e04f      	b.n	8008930 <USB_EPStartXfer+0x155e>
 8008890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800889a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d004      	beq.n	80088b0 <USB_EPStartXfer+0x14de>
 80088a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088aa:	3301      	adds	r3, #1
 80088ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80088b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088bc:	b29b      	uxth	r3, r3
 80088be:	029b      	lsls	r3, r3, #10
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	e030      	b.n	8008930 <USB_EPStartXfer+0x155e>
 80088ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d128      	bne.n	8008930 <USB_EPStartXfer+0x155e>
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80088ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008902:	4413      	add	r3, r2
 8008904:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	00da      	lsls	r2, r3, #3
 8008916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800891a:	4413      	add	r3, r2
 800891c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800893e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 8085 	bne.w	8008a5a <USB_EPStartXfer+0x1688>
 8008950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800895e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800896c:	b29b      	uxth	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008974:	4413      	add	r3, r2
 8008976:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800897a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	00da      	lsls	r2, r3, #3
 8008988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800898c:	4413      	add	r3, r2
 800898e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008992:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80089b0:	d923      	bls.n	80089fa <USB_EPStartXfer+0x1628>
 80089b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USB_EPStartXfer+0x1600>
 80089c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089cc:	3b01      	subs	r3, #1
 80089ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089de:	b29b      	uxth	r3, r3
 80089e0:	029b      	lsls	r3, r3, #10
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	4313      	orrs	r3, r2
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e05c      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
 80089fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10c      	bne.n	8008a1c <USB_EPStartXfer+0x164a>
 8008a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	e04b      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
 8008a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <USB_EPStartXfer+0x166a>
 8008a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a36:	3301      	adds	r3, #1
 8008a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	029b      	lsls	r3, r3, #10
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e02c      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
 8008a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d124      	bne.n	8008ab4 <USB_EPStartXfer+0x16e2>
 8008a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a80:	4413      	add	r3, r2
 8008a82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	00da      	lsls	r2, r3, #3
 8008a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e001      	b.n	8008ab4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e03a      	b.n	8008b2a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ada:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ade:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ae2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ae6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008aea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008aee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008af2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b5c:	81bb      	strh	r3, [r7, #12]
 8008b5e:	89bb      	ldrh	r3, [r7, #12]
 8008b60:	f083 0310 	eor.w	r3, r3, #16
 8008b64:	81bb      	strh	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	441a      	add	r2, r3
 8008b70:	89bb      	ldrh	r3, [r7, #12]
 8008b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	8013      	strh	r3, [r2, #0]
 8008b86:	e01f      	b.n	8008bc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9e:	81fb      	strh	r3, [r7, #14]
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
 8008ba2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ba6:	81fb      	strh	r3, [r7, #14]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	89fb      	ldrh	r3, [r7, #14]
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b087      	sub	sp, #28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	7b1b      	ldrb	r3, [r3, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 809d 	bne.w	8008d24 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d04c      	beq.n	8008c8c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	823b      	strh	r3, [r7, #16]
 8008c00:	8a3b      	ldrh	r3, [r7, #16]
 8008c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01b      	beq.n	8008c42 <USB_EPClearStall+0x6c>
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c20:	81fb      	strh	r3, [r7, #14]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	78db      	ldrb	r3, [r3, #3]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d06c      	beq.n	8008d24 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c60:	81bb      	strh	r3, [r7, #12]
 8008c62:	89bb      	ldrh	r3, [r7, #12]
 8008c64:	f083 0320 	eor.w	r3, r3, #32
 8008c68:	81bb      	strh	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	89bb      	ldrh	r3, [r7, #12]
 8008c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	8013      	strh	r3, [r2, #0]
 8008c8a:	e04b      	b.n	8008d24 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	82fb      	strh	r3, [r7, #22]
 8008c9a:	8afb      	ldrh	r3, [r7, #22]
 8008c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01b      	beq.n	8008cdc <USB_EPClearStall+0x106>
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cba:	82bb      	strh	r3, [r7, #20]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	441a      	add	r2, r3
 8008cc6:	8abb      	ldrh	r3, [r7, #20]
 8008cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf2:	827b      	strh	r3, [r7, #18]
 8008cf4:	8a7b      	ldrh	r3, [r7, #18]
 8008cf6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cfa:	827b      	strh	r3, [r7, #18]
 8008cfc:	8a7b      	ldrh	r3, [r7, #18]
 8008cfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d02:	827b      	strh	r3, [r7, #18]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	441a      	add	r2, r3
 8008d0e:	8a7b      	ldrh	r3, [r7, #18]
 8008d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2280      	movs	r2, #128	@ 0x80
 8008d48:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= (uint16_t)USB_CNTR_RESUME;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f043 0310 	orr.w	r3, r3, #16
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f023 0310 	bic.w	r3, r3, #16
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b08b      	sub	sp, #44	@ 0x2c
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4611      	mov	r1, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	80fb      	strh	r3, [r7, #6]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e12:	88bb      	ldrh	r3, [r7, #4]
 8008e14:	3301      	adds	r3, #1
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e32:	e01b      	b.n	8008e6c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	b21a      	sxth	r2, r3
 8008e44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	8a7a      	ldrh	r2, [r7, #18]
 8008e52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3302      	adds	r3, #2
 8008e58:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	3301      	adds	r3, #1
 8008e64:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1e0      	bne.n	8008e34 <USB_WritePMA+0x38>
  }
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	372c      	adds	r7, #44	@ 0x2c
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b08b      	sub	sp, #44	@ 0x2c
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	460b      	mov	r3, r1
 8008e90:	80fb      	strh	r3, [r7, #6]
 8008e92:	4613      	mov	r3, r2
 8008e94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e96:	88bb      	ldrh	r3, [r7, #4]
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eb0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eb6:	e018      	b.n	8008eea <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e3      	bne.n	8008eb8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008ef0:	88bb      	ldrh	r3, [r7, #4]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	701a      	strb	r2, [r3, #0]
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	372c      	adds	r7, #44	@ 0x2c
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008f24:	2010      	movs	r0, #16
 8008f26:	f002 f981 	bl	800b22c <USBD_static_malloc>
 8008f2a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <USBD_HID_Init+0x2e>
  {
	pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	32b0      	adds	r2, #176	@ 0xb0
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return (uint8_t)USBD_EMEM;
 8008f42:	2302      	movs	r3, #2
 8008f44:	e048      	b.n	8008fd8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	32b0      	adds	r2, #176	@ 0xb0
 8008f50:	68f9      	ldr	r1, [r7, #12]
 8008f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	32b0      	adds	r2, #176	@ 0xb0
 8008f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7c1b      	ldrb	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10d      	bne.n	8008f8e <USBD_HID_Init+0x76>
  {
	pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008f72:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe0 <USBD_HID_Init+0xc8>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3326      	adds	r3, #38	@ 0x26
 8008f88:	2207      	movs	r2, #7
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e00c      	b.n	8008fa8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
	pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008f8e:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <USBD_HID_Init+0xc8>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f003 020f 	and.w	r2, r3, #15
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3326      	adds	r3, #38	@ 0x26
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe0 <USBD_HID_Init+0xc8>)
 8008faa:	7819      	ldrb	r1, [r3, #0]
 8008fac:	2304      	movs	r3, #4
 8008fae:	2203      	movs	r2, #3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fff4 	bl	800af9e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <USBD_HID_Init+0xc8>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	f003 020f 	and.w	r2, r3, #15
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	3324      	adds	r3, #36	@ 0x24
 8008fcc:	2201      	movs	r2, #1
 8008fce:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	200000ca 	.word	0x200000ca

08008fe4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8009070 <USBD_HID_DeInit+0x8c>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 fff7 	bl	800afea <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8009070 <USBD_HID_DeInit+0x8c>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	3324      	adds	r3, #36	@ 0x24
 8009012:	2200      	movs	r2, #0
 8009014:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009016:	4b16      	ldr	r3, [pc, #88]	@ (8009070 <USBD_HID_DeInit+0x8c>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 020f 	and.w	r2, r3, #15
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	3326      	adds	r3, #38	@ 0x26
 800902c:	2200      	movs	r2, #0
 800902e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	32b0      	adds	r2, #176	@ 0xb0
 800903a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <USBD_HID_DeInit+0x82>
  {
	(void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	32b0      	adds	r2, #176	@ 0xb0
 800904c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009050:	4618      	mov	r0, r3
 8009052:	f002 f8f9 	bl	800b248 <USBD_static_free>
	pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	32b0      	adds	r2, #176	@ 0xb0
 8009060:	2100      	movs	r1, #0
 8009062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200000ca 	.word	0x200000ca

08009074 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	32b0      	adds	r2, #176	@ 0xb0
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBD_HID_Setup+0x2c>
  {
	return (uint8_t)USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	e0e8      	b.n	8009272 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d046      	beq.n	800913a <USBD_HID_Setup+0xc6>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	f040 80d8 	bne.w	8009262 <USBD_HID_Setup+0x1ee>
  {
	case USB_REQ_TYPE_CLASS :
	  switch (req->bRequest)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	3b02      	subs	r3, #2
 80090b8:	2b09      	cmp	r3, #9
 80090ba:	d836      	bhi.n	800912a <USBD_HID_Setup+0xb6>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <USBD_HID_Setup+0x50>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	0800911b 	.word	0x0800911b
 80090c8:	080090fb 	.word	0x080090fb
 80090cc:	0800912b 	.word	0x0800912b
 80090d0:	0800912b 	.word	0x0800912b
 80090d4:	0800912b 	.word	0x0800912b
 80090d8:	0800912b 	.word	0x0800912b
 80090dc:	0800912b 	.word	0x0800912b
 80090e0:	0800912b 	.word	0x0800912b
 80090e4:	08009109 	.word	0x08009109
 80090e8:	080090ed 	.word	0x080090ed
	  {
		case USBD_HID_REQ_SET_PROTOCOL:
		  hhid->Protocol = (uint8_t)(req->wValue);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	461a      	mov	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]
		  break;
 80090f8:	e01e      	b.n	8009138 <USBD_HID_Setup+0xc4>

		case USBD_HID_REQ_GET_PROTOCOL:
		  (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fb71 	bl	800a7e8 <USBD_CtlSendData>
		  break;
 8009106:	e017      	b.n	8009138 <USBD_HID_Setup+0xc4>

		case USBD_HID_REQ_SET_IDLE:
		  hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	b29b      	uxth	r3, r3
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	605a      	str	r2, [r3, #4]
		  break;
 8009118:	e00e      	b.n	8009138 <USBD_HID_Setup+0xc4>

		case USBD_HID_REQ_GET_IDLE:
		  (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3304      	adds	r3, #4
 800911e:	2201      	movs	r2, #1
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fb60 	bl	800a7e8 <USBD_CtlSendData>
		  break;
 8009128:	e006      	b.n	8009138 <USBD_HID_Setup+0xc4>

		default:
		  USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 faea 	bl	800a706 <USBD_CtlError>
		  ret = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	75fb      	strb	r3, [r7, #23]
		  break;
 8009136:	bf00      	nop
	  }
	  break;
 8009138:	e09a      	b.n	8009270 <USBD_HID_Setup+0x1fc>
	case USB_REQ_TYPE_STANDARD:
	  switch (req->bRequest)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b0b      	cmp	r3, #11
 8009140:	f200 8086 	bhi.w	8009250 <USBD_HID_Setup+0x1dc>
 8009144:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <USBD_HID_Setup+0xd8>)
 8009146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914a:	bf00      	nop
 800914c:	0800917d 	.word	0x0800917d
 8009150:	0800925f 	.word	0x0800925f
 8009154:	08009251 	.word	0x08009251
 8009158:	08009251 	.word	0x08009251
 800915c:	08009251 	.word	0x08009251
 8009160:	08009251 	.word	0x08009251
 8009164:	080091a7 	.word	0x080091a7
 8009168:	08009251 	.word	0x08009251
 800916c:	08009251 	.word	0x08009251
 8009170:	08009251 	.word	0x08009251
 8009174:	080091ff 	.word	0x080091ff
 8009178:	08009229 	.word	0x08009229
	  {
		case USB_REQ_GET_STATUS:
		  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b03      	cmp	r3, #3
 8009186:	d107      	bne.n	8009198 <USBD_HID_Setup+0x124>
		  {
			(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009188:	f107 030a 	add.w	r3, r7, #10
 800918c:	2202      	movs	r2, #2
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 fb29 	bl	800a7e8 <USBD_CtlSendData>
		  else
		  {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		  }
		  break;
 8009196:	e063      	b.n	8009260 <USBD_HID_Setup+0x1ec>
			USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fab3 	bl	800a706 <USBD_CtlError>
			ret = USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	75fb      	strb	r3, [r7, #23]
		  break;
 80091a4:	e05c      	b.n	8009260 <USBD_HID_Setup+0x1ec>

		case USB_REQ_GET_DESCRIPTOR:
		  if ((req->wValue >> 8) == HID_REPORT_DESC)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	885b      	ldrh	r3, [r3, #2]
 80091aa:	0a1b      	lsrs	r3, r3, #8
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2b22      	cmp	r3, #34	@ 0x22
 80091b0:	d108      	bne.n	80091c4 <USBD_HID_Setup+0x150>
		  {
			len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b42      	cmp	r3, #66	@ 0x42
 80091b8:	bf28      	it	cs
 80091ba:	2342      	movcs	r3, #66	@ 0x42
 80091bc:	82bb      	strh	r3, [r7, #20]
			pbuf = HID_MOUSE_ReportDesc;
 80091be:	4b2f      	ldr	r3, [pc, #188]	@ (800927c <USBD_HID_Setup+0x208>)
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e015      	b.n	80091f0 <USBD_HID_Setup+0x17c>
		  }
		  else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	885b      	ldrh	r3, [r3, #2]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	2b21      	cmp	r3, #33	@ 0x21
 80091ce:	d108      	bne.n	80091e2 <USBD_HID_Setup+0x16e>
		  {
			pbuf = USBD_HID_Desc;
 80091d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009280 <USBD_HID_Setup+0x20c>)
 80091d2:	613b      	str	r3, [r7, #16]
			len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	2b09      	cmp	r3, #9
 80091da:	bf28      	it	cs
 80091dc:	2309      	movcs	r3, #9
 80091de:	82bb      	strh	r3, [r7, #20]
 80091e0:	e006      	b.n	80091f0 <USBD_HID_Setup+0x17c>
		  }
		  else
		  {
			USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fa8e 	bl	800a706 <USBD_CtlError>
			ret = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	75fb      	strb	r3, [r7, #23]
			break;
 80091ee:	e037      	b.n	8009260 <USBD_HID_Setup+0x1ec>
		  }
		  (void)USBD_CtlSendData(pdev, pbuf, len);
 80091f0:	8abb      	ldrh	r3, [r7, #20]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6939      	ldr	r1, [r7, #16]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 faf6 	bl	800a7e8 <USBD_CtlSendData>
		  break;
 80091fc:	e030      	b.n	8009260 <USBD_HID_Setup+0x1ec>

		case USB_REQ_GET_INTERFACE :
		  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b03      	cmp	r3, #3
 8009208:	d107      	bne.n	800921a <USBD_HID_Setup+0x1a6>
		  {
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3308      	adds	r3, #8
 800920e:	2201      	movs	r2, #1
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 fae8 	bl	800a7e8 <USBD_CtlSendData>
		  else
		  {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		  }
		  break;
 8009218:	e022      	b.n	8009260 <USBD_HID_Setup+0x1ec>
			USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 fa72 	bl	800a706 <USBD_CtlError>
			ret = USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	75fb      	strb	r3, [r7, #23]
		  break;
 8009226:	e01b      	b.n	8009260 <USBD_HID_Setup+0x1ec>

		case USB_REQ_SET_INTERFACE:
		  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b03      	cmp	r3, #3
 8009232:	d106      	bne.n	8009242 <USBD_HID_Setup+0x1ce>
		  {
			hhid->AltSetting = (uint8_t)(req->wValue);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	885b      	ldrh	r3, [r3, #2]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	609a      	str	r2, [r3, #8]
		  else
		  {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		  }
		  break;
 8009240:	e00e      	b.n	8009260 <USBD_HID_Setup+0x1ec>
			USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fa5e 	bl	800a706 <USBD_CtlError>
			ret = USBD_FAIL;
 800924a:	2303      	movs	r3, #3
 800924c:	75fb      	strb	r3, [r7, #23]
		  break;
 800924e:	e007      	b.n	8009260 <USBD_HID_Setup+0x1ec>

		case USB_REQ_CLEAR_FEATURE:
		  break;

		default:
		  USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fa57 	bl	800a706 <USBD_CtlError>
		  ret = USBD_FAIL;
 8009258:	2303      	movs	r3, #3
 800925a:	75fb      	strb	r3, [r7, #23]
		  break;
 800925c:	e000      	b.n	8009260 <USBD_HID_Setup+0x1ec>
		  break;
 800925e:	bf00      	nop
	  }
	  break;
 8009260:	e006      	b.n	8009270 <USBD_HID_Setup+0x1fc>

	default:
	  USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa4e 	bl	800a706 <USBD_CtlError>
	  ret = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	75fb      	strb	r3, [r7, #23]
	  break;
 800926e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000088 	.word	0x20000088
 8009280:	20000070 	.word	0x20000070

08009284 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	32b0      	adds	r2, #176	@ 0xb0
 800929c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <USBD_HID_SendReport+0x28>
  {
	return (uint8_t)USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e014      	b.n	80092d6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d10d      	bne.n	80092d4 <USBD_HID_SendReport+0x50>
  {
	if (hhid->state == USBD_HID_IDLE)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	7b1b      	ldrb	r3, [r3, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <USBD_HID_SendReport+0x50>
	{
	  hhid->state = USBD_HID_BUSY;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2201      	movs	r2, #1
 80092c4:	731a      	strb	r2, [r3, #12]
	  (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80092c6:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <USBD_HID_SendReport+0x5c>)
 80092c8:	7819      	ldrb	r1, [r3, #0]
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f001 ff33 	bl	800b13a <USBD_LL_Transmit>
	}
  }

  return (uint8_t)USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200000ca 	.word	0x200000ca

080092e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80092ec:	2181      	movs	r1, #129	@ 0x81
 80092ee:	4809      	ldr	r0, [pc, #36]	@ (8009314 <USBD_HID_GetFSCfgDesc+0x30>)
 80092f0:	f000 fba9 	bl	8009a46 <USBD_GetEpDesc>
 80092f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <USBD_HID_GetFSCfgDesc+0x1e>
  {
	pEpDesc->bInterval = HID_FS_BINTERVAL;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	220a      	movs	r2, #10
 8009300:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2222      	movs	r2, #34	@ 0x22
 8009306:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009308:	4b02      	ldr	r3, [pc, #8]	@ (8009314 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000004c 	.word	0x2000004c

08009318 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009320:	2181      	movs	r1, #129	@ 0x81
 8009322:	4809      	ldr	r0, [pc, #36]	@ (8009348 <USBD_HID_GetHSCfgDesc+0x30>)
 8009324:	f000 fb8f 	bl	8009a46 <USBD_GetEpDesc>
 8009328:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <USBD_HID_GetHSCfgDesc+0x1e>
  {
	pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2207      	movs	r2, #7
 8009334:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2222      	movs	r2, #34	@ 0x22
 800933a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800933c:	4b02      	ldr	r3, [pc, #8]	@ (8009348 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	2000004c 	.word	0x2000004c

0800934c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009354:	2181      	movs	r1, #129	@ 0x81
 8009356:	4809      	ldr	r0, [pc, #36]	@ (800937c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009358:	f000 fb75 	bl	8009a46 <USBD_GetEpDesc>
 800935c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
	pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	220a      	movs	r2, #10
 8009368:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2222      	movs	r2, #34	@ 0x22
 800936e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009370:	4b02      	ldr	r3, [pc, #8]	@ (800937c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	2000004c 	.word	0x2000004c

08009380 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	@ 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	2200      	movs	r2, #0
 800939c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220a      	movs	r2, #10
 80093b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80093ba:	4b03      	ldr	r3, [pc, #12]	@ (80093c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	2000007c 	.word	0x2000007c

080093cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e01f      	b.n	8009424 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	79fa      	ldrb	r2, [r7, #7]
 8009416:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f001 fd55 	bl	800aec8 <USBD_LL_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e025      	b.n	8009490 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32ae      	adds	r2, #174	@ 0xae
 8009456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00f      	beq.n	8009480 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	32ae      	adds	r2, #174	@ 0xae
 800946a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	f107 020e 	add.w	r2, r7, #14
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	4602      	mov	r2, r0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fd61 	bl	800af68 <USBD_LL_Start>
 80094a6:	4603      	mov	r3, r0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4611      	mov	r1, r2
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	78fa      	ldrb	r2, [r7, #3]
 8009518:	4611      	mov	r1, r2
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	4798      	blx	r3
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009524:	2303      	movs	r3, #3
 8009526:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f001 f8a4 	bl	800a692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009558:	461a      	mov	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009566:	f003 031f 	and.w	r3, r3, #31
 800956a:	2b02      	cmp	r3, #2
 800956c:	d01a      	beq.n	80095a4 <USBD_LL_SetupStage+0x72>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d822      	bhi.n	80095b8 <USBD_LL_SetupStage+0x86>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <USBD_LL_SetupStage+0x4a>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d00a      	beq.n	8009590 <USBD_LL_SetupStage+0x5e>
 800957a:	e01d      	b.n	80095b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fad1 	bl	8009b2c <USBD_StdDevReq>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
      break;
 800958e:	e020      	b.n	80095d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb39 	bl	8009c10 <USBD_StdItfReq>
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
      break;
 80095a2:	e016      	b.n	80095d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fb9b 	bl	8009ce8 <USBD_StdEPReq>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]
      break;
 80095b6:	e00c      	b.n	80095d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fd2e 	bl	800b028 <USBD_LL_StallEP>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73fb      	strb	r3, [r7, #15]
      break;
 80095d0:	bf00      	nop
  }

  return ret;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	460b      	mov	r3, r1
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80095ee:	7afb      	ldrb	r3, [r7, #11]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d16e      	bne.n	80096d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80095fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009602:	2b03      	cmp	r3, #3
 8009604:	f040 8098 	bne.w	8009738 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	429a      	cmp	r2, r3
 8009612:	d913      	bls.n	800963c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	689a      	ldr	r2, [r3, #8]
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	1ad2      	subs	r2, r2, r3
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	4293      	cmp	r3, r2
 800962c:	bf28      	it	cs
 800962e:	4613      	movcs	r3, r2
 8009630:	461a      	mov	r2, r3
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f001 f903 	bl	800a840 <USBD_CtlContinueRx>
 800963a:	e07d      	b.n	8009738 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	2b02      	cmp	r3, #2
 8009648:	d014      	beq.n	8009674 <USBD_LL_DataOutStage+0x98>
 800964a:	2b02      	cmp	r3, #2
 800964c:	d81d      	bhi.n	800968a <USBD_LL_DataOutStage+0xae>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <USBD_LL_DataOutStage+0x7c>
 8009652:	2b01      	cmp	r3, #1
 8009654:	d003      	beq.n	800965e <USBD_LL_DataOutStage+0x82>
 8009656:	e018      	b.n	800968a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009658:	2300      	movs	r3, #0
 800965a:	75bb      	strb	r3, [r7, #22]
            break;
 800965c:	e018      	b.n	8009690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009664:	b2db      	uxtb	r3, r3
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f9d2 	bl	8009a12 <USBD_CoreFindIF>
 800966e:	4603      	mov	r3, r0
 8009670:	75bb      	strb	r3, [r7, #22]
            break;
 8009672:	e00d      	b.n	8009690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800967a:	b2db      	uxtb	r3, r3
 800967c:	4619      	mov	r1, r3
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 f9d4 	bl	8009a2c <USBD_CoreFindEP>
 8009684:	4603      	mov	r3, r0
 8009686:	75bb      	strb	r3, [r7, #22]
            break;
 8009688:	e002      	b.n	8009690 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	75bb      	strb	r3, [r7, #22]
            break;
 800968e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009690:	7dbb      	ldrb	r3, [r7, #22]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d119      	bne.n	80096ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d113      	bne.n	80096ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096a2:	7dba      	ldrb	r2, [r7, #22]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	32ae      	adds	r2, #174	@ 0xae
 80096a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096b2:	7dba      	ldrb	r2, [r7, #22]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096ba:	7dba      	ldrb	r2, [r7, #22]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	32ae      	adds	r2, #174	@ 0xae
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f001 f8c9 	bl	800a862 <USBD_CtlSendStatus>
 80096d0:	e032      	b.n	8009738 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80096d2:	7afb      	ldrb	r3, [r7, #11]
 80096d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f9a5 	bl	8009a2c <USBD_CoreFindEP>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096e6:	7dbb      	ldrb	r3, [r7, #22]
 80096e8:	2bff      	cmp	r3, #255	@ 0xff
 80096ea:	d025      	beq.n	8009738 <USBD_LL_DataOutStage+0x15c>
 80096ec:	7dbb      	ldrb	r3, [r7, #22]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d122      	bne.n	8009738 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d117      	bne.n	800972e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80096fe:	7dba      	ldrb	r2, [r7, #22]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	32ae      	adds	r2, #174	@ 0xae
 8009704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00f      	beq.n	800972e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800970e:	7dba      	ldrb	r2, [r7, #22]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009716:	7dba      	ldrb	r2, [r7, #22]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	32ae      	adds	r2, #174	@ 0xae
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	7afa      	ldrb	r2, [r7, #11]
 8009724:	4611      	mov	r1, r2
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	4798      	blx	r3
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	e000      	b.n	800973a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	460b      	mov	r3, r1
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d16f      	bne.n	8009836 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3314      	adds	r3, #20
 800975a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009762:	2b02      	cmp	r3, #2
 8009764:	d15a      	bne.n	800981c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	429a      	cmp	r2, r3
 8009770:	d914      	bls.n	800979c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	1ad2      	subs	r2, r2, r3
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	461a      	mov	r2, r3
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f001 f848 	bl	800a81e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800978e:	2300      	movs	r3, #0
 8009790:	2200      	movs	r2, #0
 8009792:	2100      	movs	r1, #0
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f001 fcf1 	bl	800b17c <USBD_LL_PrepareReceive>
 800979a:	e03f      	b.n	800981c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d11c      	bne.n	80097e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d316      	bcc.n	80097e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097be:	429a      	cmp	r2, r3
 80097c0:	d20f      	bcs.n	80097e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097c2:	2200      	movs	r2, #0
 80097c4:	2100      	movs	r1, #0
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f001 f829 	bl	800a81e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d4:	2300      	movs	r3, #0
 80097d6:	2200      	movs	r2, #0
 80097d8:	2100      	movs	r1, #0
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f001 fcce 	bl	800b17c <USBD_LL_PrepareReceive>
 80097e0:	e01c      	b.n	800981c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d10f      	bne.n	800980e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d009      	beq.n	800980e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800980e:	2180      	movs	r1, #128	@ 0x80
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f001 fc09 	bl	800b028 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f001 f836 	bl	800a888 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d03a      	beq.n	800989c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7ff fe42 	bl	80094b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009834:	e032      	b.n	800989c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009836:	7afb      	ldrb	r3, [r7, #11]
 8009838:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800983c:	b2db      	uxtb	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f8f3 	bl	8009a2c <USBD_CoreFindEP>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	2bff      	cmp	r3, #255	@ 0xff
 800984e:	d025      	beq.n	800989c <USBD_LL_DataInStage+0x15a>
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d122      	bne.n	800989c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b03      	cmp	r3, #3
 8009860:	d11c      	bne.n	800989c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009862:	7dfa      	ldrb	r2, [r7, #23]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	32ae      	adds	r2, #174	@ 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d014      	beq.n	800989c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009872:	7dfa      	ldrb	r2, [r7, #23]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800987a:	7dfa      	ldrb	r2, [r7, #23]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	32ae      	adds	r2, #174	@ 0xae
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	7afa      	ldrb	r2, [r7, #11]
 8009888:	4611      	mov	r1, r2
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	4798      	blx	r3
 800988e:	4603      	mov	r3, r0
 8009890:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009892:	7dbb      	ldrb	r3, [r7, #22]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009898:	7dbb      	ldrb	r3, [r7, #22]
 800989a:	e000      	b.n	800989e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d014      	beq.n	800990c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00e      	beq.n	800990c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	6852      	ldr	r2, [r2, #4]
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	4611      	mov	r1, r2
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800990c:	2340      	movs	r3, #64	@ 0x40
 800990e:	2200      	movs	r2, #0
 8009910:	2100      	movs	r1, #0
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fb43 	bl	800af9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2240      	movs	r2, #64	@ 0x40
 8009924:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009928:	2340      	movs	r3, #64	@ 0x40
 800992a:	2200      	movs	r2, #0
 800992c:	2180      	movs	r1, #128	@ 0x80
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 fb35 	bl	800af9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2240      	movs	r2, #64	@ 0x40
 800993e:	621a      	str	r2, [r3, #32]

  return ret;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b04      	cmp	r3, #4
 800997c:	d006      	beq.n	800998c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009984:	b2da      	uxtb	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2204      	movs	r2, #4
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b04      	cmp	r3, #4
 80099b4:	d106      	bne.n	80099c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d110      	bne.n	8009a08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b086      	sub	sp, #24
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	885b      	ldrh	r3, [r3, #2]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	7812      	ldrb	r2, [r2, #0]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d91f      	bls.n	8009aac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a72:	e013      	b.n	8009a9c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a74:	f107 030a 	add.w	r3, r7, #10
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6978      	ldr	r0, [r7, #20]
 8009a7c:	f000 f81b 	bl	8009ab6 <USBD_GetNextDesc>
 8009a80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d108      	bne.n	8009a9c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	789b      	ldrb	r3, [r3, #2]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d008      	beq.n	8009aaa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	885b      	ldrh	r3, [r3, #2]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	897b      	ldrh	r3, [r7, #10]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d8e5      	bhi.n	8009a74 <USBD_GetEpDesc+0x2e>
 8009aa8:	e000      	b.n	8009aac <USBD_GetEpDesc+0x66>
          break;
 8009aaa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009aac:	693b      	ldr	r3, [r7, #16]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	7812      	ldrb	r2, [r2, #0]
 8009acc:	4413      	add	r3, r2
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b087      	sub	sp, #28
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	3301      	adds	r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b0c:	8a3b      	ldrh	r3, [r7, #16]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	b21a      	sxth	r2, r3
 8009b12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b21b      	sxth	r3, r3
 8009b1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
	...

08009b2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b42:	2b40      	cmp	r3, #64	@ 0x40
 8009b44:	d005      	beq.n	8009b52 <USBD_StdDevReq+0x26>
 8009b46:	2b40      	cmp	r3, #64	@ 0x40
 8009b48:	d857      	bhi.n	8009bfa <USBD_StdDevReq+0xce>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00f      	beq.n	8009b6e <USBD_StdDevReq+0x42>
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d153      	bne.n	8009bfa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	32ae      	adds	r2, #174	@ 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6c:	e04a      	b.n	8009c04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d83b      	bhi.n	8009bee <USBD_StdDevReq+0xc2>
 8009b76:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <USBD_StdDevReq+0x50>)
 8009b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7c:	08009bd1 	.word	0x08009bd1
 8009b80:	08009be5 	.word	0x08009be5
 8009b84:	08009bef 	.word	0x08009bef
 8009b88:	08009bdb 	.word	0x08009bdb
 8009b8c:	08009bef 	.word	0x08009bef
 8009b90:	08009baf 	.word	0x08009baf
 8009b94:	08009ba5 	.word	0x08009ba5
 8009b98:	08009bef 	.word	0x08009bef
 8009b9c:	08009bc7 	.word	0x08009bc7
 8009ba0:	08009bb9 	.word	0x08009bb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fa3c 	bl	800a024 <USBD_GetDescriptor>
          break;
 8009bac:	e024      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fbcb 	bl	800a34c <USBD_SetAddress>
          break;
 8009bb6:	e01f      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc0a 	bl	800a3d4 <USBD_SetConfig>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8009bc4:	e018      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fcad 	bl	800a528 <USBD_GetConfig>
          break;
 8009bce:	e013      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fcde 	bl	800a594 <USBD_GetStatus>
          break;
 8009bd8:	e00e      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fd0d 	bl	800a5fc <USBD_SetFeature>
          break;
 8009be2:	e009      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fd31 	bl	800a64e <USBD_ClrFeature>
          break;
 8009bec:	e004      	b.n	8009bf8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fd88 	bl	800a706 <USBD_CtlError>
          break;
 8009bf6:	bf00      	nop
      }
      break;
 8009bf8:	e004      	b.n	8009c04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fd82 	bl	800a706 <USBD_CtlError>
      break;
 8009c02:	bf00      	nop
  }

  return ret;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop

08009c10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c26:	2b40      	cmp	r3, #64	@ 0x40
 8009c28:	d005      	beq.n	8009c36 <USBD_StdItfReq+0x26>
 8009c2a:	2b40      	cmp	r3, #64	@ 0x40
 8009c2c:	d852      	bhi.n	8009cd4 <USBD_StdItfReq+0xc4>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <USBD_StdItfReq+0x26>
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d14e      	bne.n	8009cd4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d840      	bhi.n	8009cc6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	889b      	ldrh	r3, [r3, #4]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d836      	bhi.n	8009cbc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	889b      	ldrh	r3, [r3, #4]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fedb 	bl	8009a12 <USBD_CoreFindIF>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2bff      	cmp	r3, #255	@ 0xff
 8009c64:	d01d      	beq.n	8009ca2 <USBD_StdItfReq+0x92>
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d11a      	bne.n	8009ca2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c6c:	7bba      	ldrb	r2, [r7, #14]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	32ae      	adds	r2, #174	@ 0xae
 8009c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00f      	beq.n	8009c9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c7c:	7bba      	ldrb	r2, [r7, #14]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c84:	7bba      	ldrb	r2, [r7, #14]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32ae      	adds	r2, #174	@ 0xae
 8009c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c9a:	e004      	b.n	8009ca6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ca0:	e001      	b.n	8009ca6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	88db      	ldrh	r3, [r3, #6]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d110      	bne.n	8009cd0 <USBD_StdItfReq+0xc0>
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10d      	bne.n	8009cd0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fdd4 	bl	800a862 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cba:	e009      	b.n	8009cd0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fd21 	bl	800a706 <USBD_CtlError>
          break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fd1c 	bl	800a706 <USBD_CtlError>
          break;
 8009cce:	e000      	b.n	8009cd2 <USBD_StdItfReq+0xc2>
          break;
 8009cd0:	bf00      	nop
      }
      break;
 8009cd2:	e004      	b.n	8009cde <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fd15 	bl	800a706 <USBD_CtlError>
      break;
 8009cdc:	bf00      	nop
  }

  return ret;
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	889b      	ldrh	r3, [r3, #4]
 8009cfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	d007      	beq.n	8009d18 <USBD_StdEPReq+0x30>
 8009d08:	2b40      	cmp	r3, #64	@ 0x40
 8009d0a:	f200 817f 	bhi.w	800a00c <USBD_StdEPReq+0x324>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d02a      	beq.n	8009d68 <USBD_StdEPReq+0x80>
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	f040 817a 	bne.w	800a00c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fe85 	bl	8009a2c <USBD_CoreFindEP>
 8009d22:	4603      	mov	r3, r0
 8009d24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d26:	7b7b      	ldrb	r3, [r7, #13]
 8009d28:	2bff      	cmp	r3, #255	@ 0xff
 8009d2a:	f000 8174 	beq.w	800a016 <USBD_StdEPReq+0x32e>
 8009d2e:	7b7b      	ldrb	r3, [r7, #13]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 8170 	bne.w	800a016 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d36:	7b7a      	ldrb	r2, [r7, #13]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d3e:	7b7a      	ldrb	r2, [r7, #13]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	32ae      	adds	r2, #174	@ 0xae
 8009d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 8163 	beq.w	800a016 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d50:	7b7a      	ldrb	r2, [r7, #13]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32ae      	adds	r2, #174	@ 0xae
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d66:	e156      	b.n	800a016 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b03      	cmp	r3, #3
 8009d6e:	d008      	beq.n	8009d82 <USBD_StdEPReq+0x9a>
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	f300 8145 	bgt.w	800a000 <USBD_StdEPReq+0x318>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 809b 	beq.w	8009eb2 <USBD_StdEPReq+0x1ca>
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d03c      	beq.n	8009dfa <USBD_StdEPReq+0x112>
 8009d80:	e13e      	b.n	800a000 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d002      	beq.n	8009d94 <USBD_StdEPReq+0xac>
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d016      	beq.n	8009dc0 <USBD_StdEPReq+0xd8>
 8009d92:	e02c      	b.n	8009dee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00d      	beq.n	8009db6 <USBD_StdEPReq+0xce>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b80      	cmp	r3, #128	@ 0x80
 8009d9e:	d00a      	beq.n	8009db6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f93f 	bl	800b028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009daa:	2180      	movs	r1, #128	@ 0x80
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f93b 	bl	800b028 <USBD_LL_StallEP>
 8009db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009db4:	e020      	b.n	8009df8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fca4 	bl	800a706 <USBD_CtlError>
              break;
 8009dbe:	e01b      	b.n	8009df8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	885b      	ldrh	r3, [r3, #2]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10e      	bne.n	8009de6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <USBD_StdEPReq+0xfe>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	@ 0x80
 8009dd2:	d008      	beq.n	8009de6 <USBD_StdEPReq+0xfe>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	88db      	ldrh	r3, [r3, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f921 	bl	800b028 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fd3b 	bl	800a862 <USBD_CtlSendStatus>

              break;
 8009dec:	e004      	b.n	8009df8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fc88 	bl	800a706 <USBD_CtlError>
              break;
 8009df6:	bf00      	nop
          }
          break;
 8009df8:	e107      	b.n	800a00a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d002      	beq.n	8009e0c <USBD_StdEPReq+0x124>
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d016      	beq.n	8009e38 <USBD_StdEPReq+0x150>
 8009e0a:	e04b      	b.n	8009ea4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00d      	beq.n	8009e2e <USBD_StdEPReq+0x146>
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	2b80      	cmp	r3, #128	@ 0x80
 8009e16:	d00a      	beq.n	8009e2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f001 f903 	bl	800b028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e22:	2180      	movs	r1, #128	@ 0x80
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 f8ff 	bl	800b028 <USBD_LL_StallEP>
 8009e2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e2c:	e040      	b.n	8009eb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fc68 	bl	800a706 <USBD_CtlError>
              break;
 8009e36:	e03b      	b.n	8009eb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	885b      	ldrh	r3, [r3, #2]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d136      	bne.n	8009eae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 f909 	bl	800b066 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fd04 	bl	800a862 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff fde4 	bl	8009a2c <USBD_CoreFindEP>
 8009e64:	4603      	mov	r3, r0
 8009e66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e68:	7b7b      	ldrb	r3, [r7, #13]
 8009e6a:	2bff      	cmp	r3, #255	@ 0xff
 8009e6c:	d01f      	beq.n	8009eae <USBD_StdEPReq+0x1c6>
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11c      	bne.n	8009eae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e74:	7b7a      	ldrb	r2, [r7, #13]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e7c:	7b7a      	ldrb	r2, [r7, #13]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	32ae      	adds	r2, #174	@ 0xae
 8009e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d010      	beq.n	8009eae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e8c:	7b7a      	ldrb	r2, [r7, #13]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	32ae      	adds	r2, #174	@ 0xae
 8009e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009ea2:	e004      	b.n	8009eae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fc2d 	bl	800a706 <USBD_CtlError>
              break;
 8009eac:	e000      	b.n	8009eb0 <USBD_StdEPReq+0x1c8>
              break;
 8009eae:	bf00      	nop
          }
          break;
 8009eb0:	e0ab      	b.n	800a00a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0x1dc>
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d032      	beq.n	8009f28 <USBD_StdEPReq+0x240>
 8009ec2:	e097      	b.n	8009ff4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d007      	beq.n	8009eda <USBD_StdEPReq+0x1f2>
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b80      	cmp	r3, #128	@ 0x80
 8009ece:	d004      	beq.n	8009eda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fc17 	bl	800a706 <USBD_CtlError>
                break;
 8009ed8:	e091      	b.n	8009ffe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da0b      	bge.n	8009efa <USBD_StdEPReq+0x212>
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	3310      	adds	r3, #16
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	e00b      	b.n	8009f12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f00:	4613      	mov	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	4413      	add	r3, r2
 8009f10:	3304      	adds	r3, #4
 8009f12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc61 	bl	800a7e8 <USBD_CtlSendData>
              break;
 8009f26:	e06a      	b.n	8009ffe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	da11      	bge.n	8009f54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	f003 020f 	and.w	r2, r3, #15
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	3324      	adds	r3, #36	@ 0x24
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d117      	bne.n	8009f7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fbda 	bl	800a706 <USBD_CtlError>
                  break;
 8009f52:	e054      	b.n	8009ffe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	440b      	add	r3, r1
 8009f66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fbc7 	bl	800a706 <USBD_CtlError>
                  break;
 8009f78:	e041      	b.n	8009ffe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da0b      	bge.n	8009f9a <USBD_StdEPReq+0x2b2>
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	3310      	adds	r3, #16
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	3304      	adds	r3, #4
 8009f98:	e00b      	b.n	8009fb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <USBD_StdEPReq+0x2d8>
 8009fba:	7bbb      	ldrb	r3, [r7, #14]
 8009fbc:	2b80      	cmp	r3, #128	@ 0x80
 8009fbe:	d103      	bne.n	8009fc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	e00e      	b.n	8009fe6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f869 	bl	800b0a4 <USBD_LL_IsStallEP>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e002      	b.n	8009fe6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fbfb 	bl	800a7e8 <USBD_CtlSendData>
              break;
 8009ff2:	e004      	b.n	8009ffe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fb85 	bl	800a706 <USBD_CtlError>
              break;
 8009ffc:	bf00      	nop
          }
          break;
 8009ffe:	e004      	b.n	800a00a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fb7f 	bl	800a706 <USBD_CtlError>
          break;
 800a008:	bf00      	nop
      }
      break;
 800a00a:	e005      	b.n	800a018 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fb79 	bl	800a706 <USBD_CtlError>
      break;
 800a014:	e000      	b.n	800a018 <USBD_StdEPReq+0x330>
      break;
 800a016:	bf00      	nop
  }

  return ret;
 800a018:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	2b0e      	cmp	r3, #14
 800a046:	f200 8152 	bhi.w	800a2ee <USBD_GetDescriptor+0x2ca>
 800a04a:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <USBD_GetDescriptor+0x2c>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a0c1 	.word	0x0800a0c1
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a119 	.word	0x0800a119
 800a05c:	0800a2ef 	.word	0x0800a2ef
 800a060:	0800a2ef 	.word	0x0800a2ef
 800a064:	0800a28f 	.word	0x0800a28f
 800a068:	0800a2bb 	.word	0x0800a2bb
 800a06c:	0800a2ef 	.word	0x0800a2ef
 800a070:	0800a2ef 	.word	0x0800a2ef
 800a074:	0800a2ef 	.word	0x0800a2ef
 800a078:	0800a2ef 	.word	0x0800a2ef
 800a07c:	0800a2ef 	.word	0x0800a2ef
 800a080:	0800a2ef 	.word	0x0800a2ef
 800a084:	0800a2ef 	.word	0x0800a2ef
 800a088:	0800a08d 	.word	0x0800a08d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0ae:	e126      	b.n	800a2fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fb27 	bl	800a706 <USBD_CtlError>
        err++;
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a0be:	e11e      	b.n	800a2fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
      break;
 800a0d6:	e112      	b.n	800a2fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	7c1b      	ldrb	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10d      	bne.n	800a0fc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e8:	f107 0208 	add.w	r2, r7, #8
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0fa:	e100      	b.n	800a2fe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	f107 0208 	add.w	r2, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3301      	adds	r3, #1
 800a112:	2202      	movs	r2, #2
 800a114:	701a      	strb	r2, [r3, #0]
      break;
 800a116:	e0f2      	b.n	800a2fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	885b      	ldrh	r3, [r3, #2]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b05      	cmp	r3, #5
 800a120:	f200 80ac 	bhi.w	800a27c <USBD_GetDescriptor+0x258>
 800a124:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <USBD_GetDescriptor+0x108>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a145 	.word	0x0800a145
 800a130:	0800a179 	.word	0x0800a179
 800a134:	0800a1ad 	.word	0x0800a1ad
 800a138:	0800a1e1 	.word	0x0800a1e1
 800a13c:	0800a215 	.word	0x0800a215
 800a140:	0800a249 	.word	0x0800a249
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a166:	e091      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 facb 	bl	800a706 <USBD_CtlError>
            err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
          break;
 800a176:	e089      	b.n	800a28c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19a:	e077      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fab1 	bl	800a706 <USBD_CtlError>
            err++;
 800a1a4:	7afb      	ldrb	r3, [r7, #11]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1aa:	e06f      	b.n	800a28c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ce:	e05d      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa97 	bl	800a706 <USBD_CtlError>
            err++;
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1de:	e055      	b.n	800a28c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	7c12      	ldrb	r2, [r2, #16]
 800a1f8:	f107 0108 	add.w	r1, r7, #8
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3
 800a200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a202:	e043      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa7d 	bl	800a706 <USBD_CtlError>
            err++;
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	3301      	adds	r3, #1
 800a210:	72fb      	strb	r3, [r7, #11]
          break;
 800a212:	e03b      	b.n	800a28c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	7c12      	ldrb	r2, [r2, #16]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a236:	e029      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa63 	bl	800a706 <USBD_CtlError>
            err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
          break;
 800a246:	e021      	b.n	800a28c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	7c12      	ldrb	r2, [r2, #16]
 800a260:	f107 0108 	add.w	r1, r7, #8
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
 800a268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a26a:	e00f      	b.n	800a28c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fa49 	bl	800a706 <USBD_CtlError>
            err++;
 800a274:	7afb      	ldrb	r3, [r7, #11]
 800a276:	3301      	adds	r3, #1
 800a278:	72fb      	strb	r3, [r7, #11]
          break;
 800a27a:	e007      	b.n	800a28c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fa41 	bl	800a706 <USBD_CtlError>
          err++;
 800a284:	7afb      	ldrb	r3, [r7, #11]
 800a286:	3301      	adds	r3, #1
 800a288:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a28a:	bf00      	nop
      }
      break;
 800a28c:	e037      	b.n	800a2fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	7c1b      	ldrb	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d109      	bne.n	800a2aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a29e:	f107 0208 	add.w	r2, r7, #8
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	4798      	blx	r3
 800a2a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a8:	e029      	b.n	800a2fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa2a 	bl	800a706 <USBD_CtlError>
        err++;
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b8:	e021      	b.n	800a2fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	7c1b      	ldrb	r3, [r3, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10d      	bne.n	800a2de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ca:	f107 0208 	add.w	r2, r7, #8
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	4798      	blx	r3
 800a2d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	2207      	movs	r2, #7
 800a2da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2dc:	e00f      	b.n	800a2fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fa10 	bl	800a706 <USBD_CtlError>
        err++;
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	72fb      	strb	r3, [r7, #11]
      break;
 800a2ec:	e007      	b.n	800a2fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fa08 	bl	800a706 <USBD_CtlError>
      err++;
 800a2f6:	7afb      	ldrb	r3, [r7, #11]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a2fc:	bf00      	nop
  }

  if (err != 0U)
 800a2fe:	7afb      	ldrb	r3, [r7, #11]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d11e      	bne.n	800a342 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	88db      	ldrh	r3, [r3, #6]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d016      	beq.n	800a33a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a30c:	893b      	ldrh	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00e      	beq.n	800a330 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	88da      	ldrh	r2, [r3, #6]
 800a316:	893b      	ldrh	r3, [r7, #8]
 800a318:	4293      	cmp	r3, r2
 800a31a:	bf28      	it	cs
 800a31c:	4613      	movcs	r3, r2
 800a31e:	b29b      	uxth	r3, r3
 800a320:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a322:	893b      	ldrh	r3, [r7, #8]
 800a324:	461a      	mov	r2, r3
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa5d 	bl	800a7e8 <USBD_CtlSendData>
 800a32e:	e009      	b.n	800a344 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f9e7 	bl	800a706 <USBD_CtlError>
 800a338:	e004      	b.n	800a344 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa91 	bl	800a862 <USBD_CtlSendStatus>
 800a340:	e000      	b.n	800a344 <USBD_GetDescriptor+0x320>
    return;
 800a342:	bf00      	nop
  }
}
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop

0800a34c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	889b      	ldrh	r3, [r3, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d131      	bne.n	800a3c2 <USBD_SetAddress+0x76>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d12d      	bne.n	800a3c2 <USBD_SetAddress+0x76>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	885b      	ldrh	r3, [r3, #2]
 800a36a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a36c:	d829      	bhi.n	800a3c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a378:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b03      	cmp	r3, #3
 800a384:	d104      	bne.n	800a390 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f9bc 	bl	800a706 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	e01d      	b.n	800a3cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7bfa      	ldrb	r2, [r7, #15]
 800a394:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fead 	bl	800b0fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fa5d 	bl	800a862 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b6:	e009      	b.n	800a3cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c0:	e004      	b.n	800a3cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f99e 	bl	800a706 <USBD_CtlError>
  }
}
 800a3ca:	bf00      	nop
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	885b      	ldrh	r3, [r3, #2]
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	4b4e      	ldr	r3, [pc, #312]	@ (800a524 <USBD_SetConfig+0x150>)
 800a3ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a524 <USBD_SetConfig+0x150>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d905      	bls.n	800a400 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f985 	bl	800a706 <USBD_CtlError>
    return USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e08c      	b.n	800a51a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d002      	beq.n	800a412 <USBD_SetConfig+0x3e>
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d029      	beq.n	800a464 <USBD_SetConfig+0x90>
 800a410:	e075      	b.n	800a4fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a412:	4b44      	ldr	r3, [pc, #272]	@ (800a524 <USBD_SetConfig+0x150>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d020      	beq.n	800a45c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a41a:	4b42      	ldr	r3, [pc, #264]	@ (800a524 <USBD_SetConfig+0x150>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a424:	4b3f      	ldr	r3, [pc, #252]	@ (800a524 <USBD_SetConfig+0x150>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff f84b 	bl	80094c6 <USBD_SetClassConfig>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d008      	beq.n	800a44c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f962 	bl	800a706 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a44a:	e065      	b.n	800a518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa08 	bl	800a862 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2203      	movs	r2, #3
 800a456:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a45a:	e05d      	b.n	800a518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fa00 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a462:	e059      	b.n	800a518 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a464:	4b2f      	ldr	r3, [pc, #188]	@ (800a524 <USBD_SetConfig+0x150>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d112      	bne.n	800a492 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a474:	4b2b      	ldr	r3, [pc, #172]	@ (800a524 <USBD_SetConfig+0x150>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a47e:	4b29      	ldr	r3, [pc, #164]	@ (800a524 <USBD_SetConfig+0x150>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff f83a 	bl	80094fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f9e9 	bl	800a862 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a490:	e042      	b.n	800a518 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a492:	4b24      	ldr	r3, [pc, #144]	@ (800a524 <USBD_SetConfig+0x150>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d02a      	beq.n	800a4f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff f828 	bl	80094fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a524 <USBD_SetConfig+0x150>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a524 <USBD_SetConfig+0x150>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff f801 	bl	80094c6 <USBD_SetClassConfig>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00f      	beq.n	800a4ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f918 	bl	800a706 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff f80d 	bl	80094fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4ec:	e014      	b.n	800a518 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f9b7 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a4f4:	e010      	b.n	800a518 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f9b3 	bl	800a862 <USBD_CtlSendStatus>
      break;
 800a4fc:	e00c      	b.n	800a518 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f900 	bl	800a706 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a506:	4b07      	ldr	r3, [pc, #28]	@ (800a524 <USBD_SetConfig+0x150>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7fe fff6 	bl	80094fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a512:	2303      	movs	r3, #3
 800a514:	73fb      	strb	r3, [r7, #15]
      break;
 800a516:	bf00      	nop
  }

  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000268 	.word	0x20000268

0800a528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	88db      	ldrh	r3, [r3, #6]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d004      	beq.n	800a544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f8e2 	bl	800a706 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a542:	e023      	b.n	800a58c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	dc02      	bgt.n	800a556 <USBD_GetConfig+0x2e>
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc03      	bgt.n	800a55c <USBD_GetConfig+0x34>
 800a554:	e015      	b.n	800a582 <USBD_GetConfig+0x5a>
 800a556:	2b03      	cmp	r3, #3
 800a558:	d00b      	beq.n	800a572 <USBD_GetConfig+0x4a>
 800a55a:	e012      	b.n	800a582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3308      	adds	r3, #8
 800a566:	2201      	movs	r2, #1
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f93c 	bl	800a7e8 <USBD_CtlSendData>
        break;
 800a570:	e00c      	b.n	800a58c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3304      	adds	r3, #4
 800a576:	2201      	movs	r2, #1
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f934 	bl	800a7e8 <USBD_CtlSendData>
        break;
 800a580:	e004      	b.n	800a58c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f8be 	bl	800a706 <USBD_CtlError>
        break;
 800a58a:	bf00      	nop
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d81e      	bhi.n	800a5ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	88db      	ldrh	r3, [r3, #6]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d004      	beq.n	800a5be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f8a5 	bl	800a706 <USBD_CtlError>
        break;
 800a5bc:	e01a      	b.n	800a5f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d005      	beq.n	800a5da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f043 0202 	orr.w	r2, r3, #2
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	330c      	adds	r3, #12
 800a5de:	2202      	movs	r2, #2
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f900 	bl	800a7e8 <USBD_CtlSendData>
      break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f88a 	bl	800a706 <USBD_CtlError>
      break;
 800a5f2:	bf00      	nop
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	885b      	ldrh	r3, [r3, #2]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d107      	bne.n	800a61e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f923 	bl	800a862 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a61c:	e013      	b.n	800a646 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	885b      	ldrh	r3, [r3, #2]
 800a622:	2b02      	cmp	r3, #2
 800a624:	d10b      	bne.n	800a63e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	889b      	ldrh	r3, [r3, #4]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f913 	bl	800a862 <USBD_CtlSendStatus>
}
 800a63c:	e003      	b.n	800a646 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f860 	bl	800a706 <USBD_CtlError>
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	3b01      	subs	r3, #1
 800a662:	2b02      	cmp	r3, #2
 800a664:	d80b      	bhi.n	800a67e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d10c      	bne.n	800a688 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8f3 	bl	800a862 <USBD_CtlSendStatus>
      }
      break;
 800a67c:	e004      	b.n	800a688 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f840 	bl	800a706 <USBD_CtlError>
      break;
 800a686:	e000      	b.n	800a68a <USBD_ClrFeature+0x3c>
      break;
 800a688:	bf00      	nop
  }
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff fa16 	bl	8009aee <SWAPBYTE>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fa09 	bl	8009aee <SWAPBYTE>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff f9fc 	bl	8009aee <SWAPBYTE>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	80da      	strh	r2, [r3, #6]
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a710:	2180      	movs	r1, #128	@ 0x80
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fc88 	bl	800b028 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a718:	2100      	movs	r1, #0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fc84 	bl	800b028 <USBD_LL_StallEP>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d036      	beq.n	800a7ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a742:	6938      	ldr	r0, [r7, #16]
 800a744:	f000 f836 	bl	800a7b4 <USBD_GetLen>
 800a748:	4603      	mov	r3, r0
 800a74a:	3301      	adds	r3, #1
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	b29a      	uxth	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	4413      	add	r3, r2
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	7812      	ldrb	r2, [r2, #0]
 800a760:	701a      	strb	r2, [r3, #0]
  idx++;
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	3301      	adds	r3, #1
 800a766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	4413      	add	r3, r2
 800a76e:	2203      	movs	r2, #3
 800a770:	701a      	strb	r2, [r3, #0]
  idx++;
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	3301      	adds	r3, #1
 800a776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a778:	e013      	b.n	800a7a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	4413      	add	r3, r2
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	3301      	adds	r3, #1
 800a78a:	613b      	str	r3, [r7, #16]
    idx++;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	3301      	adds	r3, #1
 800a790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4413      	add	r3, r2
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1e7      	bne.n	800a77a <USBD_GetString+0x52>
 800a7aa:	e000      	b.n	800a7ae <USBD_GetString+0x86>
    return;
 800a7ac:	bf00      	nop
  }
}
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7c4:	e005      	b.n	800a7d2 <USBD_GetLen+0x1e>
  {
    len++;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1f5      	bne.n	800a7c6 <USBD_GetLen+0x12>
  }

  return len;
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	2100      	movs	r1, #0
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 fc93 	bl	800b13a <USBD_LL_Transmit>

  return USBD_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	60b9      	str	r1, [r7, #8]
 800a828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	2100      	movs	r1, #0
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fc82 	bl	800b13a <USBD_LL_Transmit>

  return USBD_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fc92 	bl	800b17c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2204      	movs	r2, #4
 800a86e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a872:	2300      	movs	r3, #0
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fc5e 	bl	800b13a <USBD_LL_Transmit>

  return USBD_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2205      	movs	r2, #5
 800a894:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a898:	2300      	movs	r3, #0
 800a89a:	2200      	movs	r2, #0
 800a89c:	2100      	movs	r1, #0
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fc6c 	bl	800b17c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <LL_APB1_GRP1_EnableClock>:
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a8b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a8c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
}
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b098      	sub	sp, #96	@ 0x60
 800a8e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a8e6:	f107 0318 	add.w	r3, r7, #24
 800a8ea:	2248      	movs	r2, #72	@ 0x48
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fce8 	bl	800b2c4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	605a      	str	r2, [r3, #4]
 800a8fc:	609a      	str	r2, [r3, #8]
 800a8fe:	60da      	str	r2, [r3, #12]
 800a900:	611a      	str	r2, [r3, #16]
 800a902:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800a904:	2340      	movs	r3, #64	@ 0x40
 800a906:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a908:	2301      	movs	r3, #1
 800a90a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800a910:	f107 0318 	add.w	r3, r7, #24
 800a914:	4618      	mov	r0, r3
 800a916:	f7fa f8b1 	bl	8004a7c <HAL_RCC_OscConfig>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800a920:	f7f5 fff0 	bl	8000904 <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 800a924:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800a928:	f7ff ffc1 	bl	800a8ae <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800a92c:	2300      	movs	r3, #0
 800a92e:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800a930:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a934:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 800a936:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800a93a:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800a93c:	2322      	movs	r3, #34	@ 0x22
 800a93e:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800a940:	2320      	movs	r3, #32
 800a942:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 800a944:	463b      	mov	r3, r7
 800a946:	4618      	mov	r0, r3
 800a948:	f7fb f9ce 	bl	8005ce8 <HAL_RCCEx_CRSConfig>
}
 800a94c:	bf00      	nop
 800a94e:	3760      	adds	r7, #96	@ 0x60
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <JoystickControl>:
  *         Handle joystick ADC input to control the mouse through USB Device
  * @param  None
  * @retval None
  */
void JoystickControl(uint8_t *_bt_gamepad)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	if ((((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup == 1) && (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_SUSPENDED))
 800a95c:	4b2c      	ldr	r3, [pc, #176]	@ (800aa10 <JoystickControl+0xbc>)
 800a95e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a962:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a966:	2b01      	cmp	r3, #1
 800a968:	d128      	bne.n	800a9bc <JoystickControl+0x68>
 800a96a:	4b29      	ldr	r3, [pc, #164]	@ (800aa10 <JoystickControl+0xbc>)
 800a96c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b04      	cmp	r3, #4
 800a978:	d120      	bne.n	800a9bc <JoystickControl+0x68>
	{
		if ((&hpcd_USB_FS)->Init.low_power_enable)
 800a97a:	4b25      	ldr	r3, [pc, #148]	@ (800aa10 <JoystickControl+0xbc>)
 800a97c:	7a5b      	ldrb	r3, [r3, #9]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <JoystickControl+0x36>
		{
			HAL_ResumeTick();
 800a982:	f7f6 fa1b 	bl	8000dbc <HAL_ResumeTick>
			SystemClockConfig_Resume();
 800a986:	f000 fc69 	bl	800b25c <SystemClockConfig_Resume>
		}
		/* Activate Remote wakeup */
		HAL_PCD_ActivateRemoteWakeup((&hpcd_USB_FS));
 800a98a:	4821      	ldr	r0, [pc, #132]	@ (800aa10 <JoystickControl+0xbc>)
 800a98c:	f7f8 fba0 	bl	80030d0 <HAL_PCD_ActivateRemoteWakeup>

		/* Remote wakeup delay */
		HAL_Delay(10);
 800a990:	200a      	movs	r0, #10
 800a992:	f7f6 f9ef 	bl	8000d74 <HAL_Delay>

		/* Disable Remote wakeup */
		HAL_PCD_DeActivateRemoteWakeup((&hpcd_USB_FS));
 800a996:	481e      	ldr	r0, [pc, #120]	@ (800aa10 <JoystickControl+0xbc>)
 800a998:	f7f8 fba8 	bl	80030ec <HAL_PCD_DeActivateRemoteWakeup>

		/* change state to configured */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state = USBD_STATE_CONFIGURED;
 800a99c:	4b1c      	ldr	r3, [pc, #112]	@ (800aa10 <JoystickControl+0xbc>)
 800a99e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9a2:	2203      	movs	r2, #3
 800a9a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

		/* Change remote_wakeup feature to 0 */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup = 0;
 800a9a8:	4b19      	ldr	r3, [pc, #100]	@ (800aa10 <JoystickControl+0xbc>)
 800a9aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
		remotewakeupon = 1;
 800a9b4:	4b17      	ldr	r3, [pc, #92]	@ (800aa14 <JoystickControl+0xc0>)
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]
		gamepadBuff[4] =  _bt_gamepad[0];
		gamepadBuff[5] =  _bt_gamepad[1];

		USBD_HID_SendReport(&hUsbDeviceFS, gamepadBuff, 6);
	}
}
 800a9ba:	e024      	b.n	800aa06 <JoystickControl+0xb2>
	else if (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_CONFIGURED){
 800a9bc:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <JoystickControl+0xbc>)
 800a9be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d11c      	bne.n	800aa06 <JoystickControl+0xb2>
		gamepadBuff[0] =  joystick_X;
 800a9cc:	4b12      	ldr	r3, [pc, #72]	@ (800aa18 <JoystickControl+0xc4>)
 800a9ce:	781a      	ldrb	r2, [r3, #0]
 800a9d0:	4b12      	ldr	r3, [pc, #72]	@ (800aa1c <JoystickControl+0xc8>)
 800a9d2:	701a      	strb	r2, [r3, #0]
		gamepadBuff[1] =  joystick_Y;
 800a9d4:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <JoystickControl+0xcc>)
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	4b10      	ldr	r3, [pc, #64]	@ (800aa1c <JoystickControl+0xc8>)
 800a9da:	705a      	strb	r2, [r3, #1]
		gamepadBuff[2] =  joystick_RX;
 800a9dc:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <JoystickControl+0xd0>)
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	@ (800aa1c <JoystickControl+0xc8>)
 800a9e2:	709a      	strb	r2, [r3, #2]
		gamepadBuff[3] =  joystick_RY;
 800a9e4:	4b10      	ldr	r3, [pc, #64]	@ (800aa28 <JoystickControl+0xd4>)
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800aa1c <JoystickControl+0xc8>)
 800a9ea:	70da      	strb	r2, [r3, #3]
		gamepadBuff[4] =  _bt_gamepad[0];
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800aa1c <JoystickControl+0xc8>)
 800a9f2:	711a      	strb	r2, [r3, #4]
		gamepadBuff[5] =  _bt_gamepad[1];
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	785a      	ldrb	r2, [r3, #1]
 800a9f8:	4b08      	ldr	r3, [pc, #32]	@ (800aa1c <JoystickControl+0xc8>)
 800a9fa:	715a      	strb	r2, [r3, #5]
		USBD_HID_SendReport(&hUsbDeviceFS, gamepadBuff, 6);
 800a9fc:	2206      	movs	r2, #6
 800a9fe:	4907      	ldr	r1, [pc, #28]	@ (800aa1c <JoystickControl+0xc8>)
 800aa00:	480a      	ldr	r0, [pc, #40]	@ (800aa2c <JoystickControl+0xd8>)
 800aa02:	f7fe fc3f 	bl	8009284 <USBD_HID_SendReport>
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	200005a0 	.word	0x200005a0
 800aa14:	2000026c 	.word	0x2000026c
 800aa18:	20000256 	.word	0x20000256
 800aa1c:	20000270 	.word	0x20000270
 800aa20:	20000257 	.word	0x20000257
 800aa24:	20000258 	.word	0x20000258
 800aa28:	20000259 	.word	0x20000259
 800aa2c:	20000278 	.word	0x20000278

0800aa30 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
  USBD_Clock_Config();
 800aa34:	f7ff ff54 	bl	800a8e0 <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800aa38:	2200      	movs	r2, #0
 800aa3a:	490e      	ldr	r1, [pc, #56]	@ (800aa74 <MX_USB_Device_Init+0x44>)
 800aa3c:	480e      	ldr	r0, [pc, #56]	@ (800aa78 <MX_USB_Device_Init+0x48>)
 800aa3e:	f7fe fcc5 	bl	80093cc <USBD_Init>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <MX_USB_Device_Init+0x1c>
    Error_Handler();
 800aa48:	f7f5 ff5c 	bl	8000904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800aa4c:	490b      	ldr	r1, [pc, #44]	@ (800aa7c <MX_USB_Device_Init+0x4c>)
 800aa4e:	480a      	ldr	r0, [pc, #40]	@ (800aa78 <MX_USB_Device_Init+0x48>)
 800aa50:	f7fe fcec 	bl	800942c <USBD_RegisterClass>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <MX_USB_Device_Init+0x2e>
    Error_Handler();
 800aa5a:	f7f5 ff53 	bl	8000904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aa5e:	4806      	ldr	r0, [pc, #24]	@ (800aa78 <MX_USB_Device_Init+0x48>)
 800aa60:	f7fe fd1a 	bl	8009498 <USBD_Start>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <MX_USB_Device_Init+0x3e>
    Error_Handler();
 800aa6a:	f7f5 ff4b 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aa6e:	bf00      	nop
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	200000cc 	.word	0x200000cc
 800aa78:	20000278 	.word	0x20000278
 800aa7c:	20000014 	.word	0x20000014

0800aa80 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2212      	movs	r2, #18
 800aa90:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800aa92:	4b03      	ldr	r3, [pc, #12]	@ (800aaa0 <USBD_HID_DeviceDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	200000ec 	.word	0x200000ec

0800aaa4 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2204      	movs	r2, #4
 800aab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aab6:	4b03      	ldr	r3, [pc, #12]	@ (800aac4 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000100 	.word	0x20000100

0800aac8 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4907      	ldr	r1, [pc, #28]	@ (800aafc <USBD_HID_ProductStrDescriptor+0x34>)
 800aade:	4808      	ldr	r0, [pc, #32]	@ (800ab00 <USBD_HID_ProductStrDescriptor+0x38>)
 800aae0:	f7ff fe22 	bl	800a728 <USBD_GetString>
 800aae4:	e004      	b.n	800aaf0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4904      	ldr	r1, [pc, #16]	@ (800aafc <USBD_HID_ProductStrDescriptor+0x34>)
 800aaea:	4805      	ldr	r0, [pc, #20]	@ (800ab00 <USBD_HID_ProductStrDescriptor+0x38>)
 800aaec:	f7ff fe1c 	bl	800a728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf0:	4b02      	ldr	r3, [pc, #8]	@ (800aafc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20000554 	.word	0x20000554
 800ab00:	0800b368 	.word	0x0800b368

0800ab04 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	@ (800ab24 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800ab14:	4804      	ldr	r0, [pc, #16]	@ (800ab28 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800ab16:	f7ff fe07 	bl	800a728 <USBD_GetString>
  return USBD_StrDesc;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	@ (800ab24 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20000554 	.word	0x20000554
 800ab28:	0800b37c 	.word	0x0800b37c

0800ab2c <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	221a      	movs	r2, #26
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab3e:	f000 f843 	bl	800abc8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab42:	4b02      	ldr	r3, [pc, #8]	@ (800ab4c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20000104 	.word	0x20000104

0800ab50 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	@ (800ab84 <USBD_HID_ConfigStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	@ (800ab88 <USBD_HID_ConfigStrDescriptor+0x38>)
 800ab68:	f7ff fdde 	bl	800a728 <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	@ (800ab84 <USBD_HID_ConfigStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	@ (800ab88 <USBD_HID_ConfigStrDescriptor+0x38>)
 800ab74:	f7ff fdd8 	bl	800a728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	@ (800ab84 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20000554 	.word	0x20000554
 800ab88:	0800b394 	.word	0x0800b394

0800ab8c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4907      	ldr	r1, [pc, #28]	@ (800abc0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800aba2:	4808      	ldr	r0, [pc, #32]	@ (800abc4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800aba4:	f7ff fdc0 	bl	800a728 <USBD_GetString>
 800aba8:	e004      	b.n	800abb4 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4904      	ldr	r1, [pc, #16]	@ (800abc0 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800abae:	4805      	ldr	r0, [pc, #20]	@ (800abc4 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800abb0:	f7ff fdba 	bl	800a728 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	@ (800abc0 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000554 	.word	0x20000554
 800abc4:	0800b3a0 	.word	0x0800b3a0

0800abc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abce:	4b0f      	ldr	r3, [pc, #60]	@ (800ac0c <Get_SerialNum+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <Get_SerialNum+0x48>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abda:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <Get_SerialNum+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abee:	2208      	movs	r2, #8
 800abf0:	4909      	ldr	r1, [pc, #36]	@ (800ac18 <Get_SerialNum+0x50>)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f814 	bl	800ac20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abf8:	2204      	movs	r2, #4
 800abfa:	4908      	ldr	r1, [pc, #32]	@ (800ac1c <Get_SerialNum+0x54>)
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f000 f80f 	bl	800ac20 <IntToUnicode>
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	1fff7590 	.word	0x1fff7590
 800ac10:	1fff7594 	.word	0x1fff7594
 800ac14:	1fff7598 	.word	0x1fff7598
 800ac18:	20000106 	.word	0x20000106
 800ac1c:	20000116 	.word	0x20000116

0800ac20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e027      	b.n	800ac88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d80b      	bhi.n	800ac58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3230      	adds	r2, #48	@ 0x30
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e00a      	b.n	800ac6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4619      	mov	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	440b      	add	r3, r1
 800ac68:	3237      	adds	r2, #55	@ 0x37
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3301      	adds	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	7dfa      	ldrb	r2, [r7, #23]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d3d3      	bcc.n	800ac38 <IntToUnicode+0x18>
  }
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <LL_AHB2_GRP1_EnableClock>:
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800aca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800acb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4013      	ands	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800acc2:	68fb      	ldr	r3, [r7, #12]
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <LL_APB1_GRP1_EnableClock>:
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800acd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ace8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800acf4:	68fb      	ldr	r3, [r7, #12]
}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad0c:	f107 030c 	add.w	r3, r7, #12
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	605a      	str	r2, [r3, #4]
 800ad16:	609a      	str	r2, [r3, #8]
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a13      	ldr	r2, [pc, #76]	@ (800ad70 <HAL_PCD_MspInit+0x6c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d120      	bne.n	800ad68 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad26:	2001      	movs	r0, #1
 800ad28:	f7ff ffb9 	bl	800ac9e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ad30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad32:	2302      	movs	r3, #2
 800ad34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800ad3e:	230a      	movs	r3, #10
 800ad40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad42:	f107 030c 	add.w	r3, r7, #12
 800ad46:	4619      	mov	r1, r3
 800ad48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad4c:	f7f7 fc4a 	bl	80025e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad50:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800ad54:	f7ff ffbc 	bl	800acd0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ad58:	2200      	movs	r2, #0
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	2014      	movs	r0, #20
 800ad5e:	f7f7 f998 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ad62:	2014      	movs	r0, #20
 800ad64:	f7f7 f9af 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad68:	bf00      	nop
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	40006800 	.word	0x40006800

0800ad74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe fbd1 	bl	8009532 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800adaa:	78fa      	ldrb	r2, [r7, #3]
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	440b      	add	r3, r1
 800adb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	4619      	mov	r1, r3
 800adc2:	f7fe fc0b 	bl	80095dc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	460b      	mov	r3, r1
 800add8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ade0:	78fa      	ldrb	r2, [r7, #3]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	440b      	add	r3, r1
 800adee:	3324      	adds	r3, #36	@ 0x24
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	4619      	mov	r1, r3
 800adf6:	f7fe fca4 	bl	8009742 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fdde 	bl	80099d2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae26:	2301      	movs	r3, #1
 800ae28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	795b      	ldrb	r3, [r3, #5]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d001      	beq.n	800ae36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae32:	f7f5 fd67 	bl	8000904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae3c:	7bfa      	ldrb	r2, [r7, #15]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fd82 	bl	800994a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fd2a 	bl	80098a6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fd7d 	bl	800996a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7a5b      	ldrb	r3, [r3, #9]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d005      	beq.n	800ae84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae78:	4b04      	ldr	r3, [pc, #16]	@ (800ae8c <HAL_PCD_SuspendCallback+0x30>)
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	4a03      	ldr	r2, [pc, #12]	@ (800ae8c <HAL_PCD_SuspendCallback+0x30>)
 800ae7e:	f043 0306 	orr.w	r3, r3, #6
 800ae82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ae84:	bf00      	nop
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	e000ed00 	.word	0xe000ed00

0800ae90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7a5b      	ldrb	r3, [r3, #9]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d007      	beq.n	800aeb0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aea0:	4b08      	ldr	r3, [pc, #32]	@ (800aec4 <HAL_PCD_ResumeCallback+0x34>)
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	4a07      	ldr	r2, [pc, #28]	@ (800aec4 <HAL_PCD_ResumeCallback+0x34>)
 800aea6:	f023 0306 	bic.w	r3, r3, #6
 800aeaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800aeac:	f000 f9d6 	bl	800b25c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe fd73 	bl	80099a2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	e000ed00 	.word	0xe000ed00

0800aec8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800aed0:	4a23      	ldr	r2, [pc, #140]	@ (800af60 <USBD_LL_Init+0x98>)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a21      	ldr	r2, [pc, #132]	@ (800af60 <USBD_LL_Init+0x98>)
 800aedc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800aee0:	f7f9 fa5e 	bl	80043a0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800aee4:	4b1e      	ldr	r3, [pc, #120]	@ (800af60 <USBD_LL_Init+0x98>)
 800aee6:	4a1f      	ldr	r2, [pc, #124]	@ (800af64 <USBD_LL_Init+0x9c>)
 800aee8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aeea:	4b1d      	ldr	r3, [pc, #116]	@ (800af60 <USBD_LL_Init+0x98>)
 800aeec:	2208      	movs	r2, #8
 800aeee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aef0:	4b1b      	ldr	r3, [pc, #108]	@ (800af60 <USBD_LL_Init+0x98>)
 800aef2:	2202      	movs	r2, #2
 800aef4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aef6:	4b1a      	ldr	r3, [pc, #104]	@ (800af60 <USBD_LL_Init+0x98>)
 800aef8:	2202      	movs	r2, #2
 800aefa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800aefc:	4b18      	ldr	r3, [pc, #96]	@ (800af60 <USBD_LL_Init+0x98>)
 800aefe:	2200      	movs	r2, #0
 800af00:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af02:	4b17      	ldr	r3, [pc, #92]	@ (800af60 <USBD_LL_Init+0x98>)
 800af04:	2200      	movs	r2, #0
 800af06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af08:	4b15      	ldr	r3, [pc, #84]	@ (800af60 <USBD_LL_Init+0x98>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af0e:	4b14      	ldr	r3, [pc, #80]	@ (800af60 <USBD_LL_Init+0x98>)
 800af10:	2200      	movs	r2, #0
 800af12:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af14:	4812      	ldr	r0, [pc, #72]	@ (800af60 <USBD_LL_Init+0x98>)
 800af16:	f7f7 fced 	bl	80028f4 <HAL_PCD_Init>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800af20:	f7f5 fcf0 	bl	8000904 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af2a:	2318      	movs	r3, #24
 800af2c:	2200      	movs	r2, #0
 800af2e:	2100      	movs	r1, #0
 800af30:	f7f9 f9aa 	bl	8004288 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af3a:	2358      	movs	r3, #88	@ 0x58
 800af3c:	2200      	movs	r2, #0
 800af3e:	2180      	movs	r1, #128	@ 0x80
 800af40:	f7f9 f9a2 	bl	8004288 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af4e:	2200      	movs	r2, #0
 800af50:	2181      	movs	r1, #129	@ 0x81
 800af52:	f7f9 f999 	bl	8004288 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	200005a0 	.word	0x200005a0
 800af64:	40006800 	.word	0x40006800

0800af68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af7e:	4618      	mov	r0, r3
 800af80:	f7f7 fd86 	bl	8002a90 <HAL_PCD_Start>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f96e 	bl	800b26c <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	4608      	mov	r0, r1
 800afa8:	4611      	mov	r1, r2
 800afaa:	461a      	mov	r2, r3
 800afac:	4603      	mov	r3, r0
 800afae:	70fb      	strb	r3, [r7, #3]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70bb      	strb	r3, [r7, #2]
 800afb4:	4613      	mov	r3, r2
 800afb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800afc6:	78bb      	ldrb	r3, [r7, #2]
 800afc8:	883a      	ldrh	r2, [r7, #0]
 800afca:	78f9      	ldrb	r1, [r7, #3]
 800afcc:	f7f7 fecd 	bl	8002d6a <HAL_PCD_EP_Open>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 f948 	bl	800b26c <USBD_Get_USB_Status>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	460b      	mov	r3, r1
 800aff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b004:	78fa      	ldrb	r2, [r7, #3]
 800b006:	4611      	mov	r1, r2
 800b008:	4618      	mov	r0, r3
 800b00a:	f7f7 ff0b 	bl	8002e24 <HAL_PCD_EP_Close>
 800b00e:	4603      	mov	r3, r0
 800b010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	4618      	mov	r0, r3
 800b016:	f000 f929 	bl	800b26c <USBD_Get_USB_Status>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	460b      	mov	r3, r1
 800b032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b042:	78fa      	ldrb	r2, [r7, #3]
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f7f7 ff9c 	bl	8002f84 <HAL_PCD_EP_SetStall>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f90a 	bl	800b26c <USBD_Get_USB_Status>
 800b058:	4603      	mov	r3, r0
 800b05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b080:	78fa      	ldrb	r2, [r7, #3]
 800b082:	4611      	mov	r1, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f7f7 ffcf 	bl	8003028 <HAL_PCD_EP_ClrStall>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f8eb 	bl	800b26c <USBD_Get_USB_Status>
 800b096:	4603      	mov	r3, r0
 800b098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da0b      	bge.n	800b0d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	440b      	add	r3, r1
 800b0d2:	3312      	adds	r3, #18
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	e00b      	b.n	800b0f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0d8:	78fb      	ldrb	r3, [r7, #3]
 800b0da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	440b      	add	r3, r1
 800b0ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b0ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b116:	78fa      	ldrb	r2, [r7, #3]
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7f7 fe01 	bl	8002d22 <HAL_PCD_SetAddress>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f8a0 	bl	800b26c <USBD_Get_USB_Status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b130:	7bbb      	ldrb	r3, [r7, #14]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
 800b146:	460b      	mov	r3, r1
 800b148:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b158:	7af9      	ldrb	r1, [r7, #11]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	f7f7 feda 	bl	8002f16 <HAL_PCD_EP_Transmit>
 800b162:	4603      	mov	r3, r0
 800b164:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	4618      	mov	r0, r3
 800b16a:	f000 f87f 	bl	800b26c <USBD_Get_USB_Status>
 800b16e:	4603      	mov	r3, r0
 800b170:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b172:	7dbb      	ldrb	r3, [r7, #22]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	607a      	str	r2, [r7, #4]
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	460b      	mov	r3, r1
 800b18a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b19a:	7af9      	ldrb	r1, [r7, #11]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	f7f7 fe88 	bl	8002eb4 <HAL_PCD_EP_Receive>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f85e 	bl	800b26c <USBD_Get_USB_Status>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
	...

0800b1c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <HAL_PCDEx_LPM_Callback+0x18>
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d013      	beq.n	800b1fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b1d6:	e023      	b.n	800b220 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7a5b      	ldrb	r3, [r3, #9]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b1e0:	f000 f83c 	bl	800b25c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1e4:	4b10      	ldr	r3, [pc, #64]	@ (800b228 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	4a0f      	ldr	r2, [pc, #60]	@ (800b228 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1ea:	f023 0306 	bic.w	r3, r3, #6
 800b1ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fbd3 	bl	80099a2 <USBD_LL_Resume>
    break;
 800b1fc:	e010      	b.n	800b220 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b204:	4618      	mov	r0, r3
 800b206:	f7fe fbb0 	bl	800996a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d005      	beq.n	800b21e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b212:	4b05      	ldr	r3, [pc, #20]	@ (800b228 <HAL_PCDEx_LPM_Callback+0x68>)
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	4a04      	ldr	r2, [pc, #16]	@ (800b228 <HAL_PCDEx_LPM_Callback+0x68>)
 800b218:	f043 0306 	orr.w	r3, r3, #6
 800b21c:	6113      	str	r3, [r2, #16]
    break;
 800b21e:	bf00      	nop
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	e000ed00 	.word	0xe000ed00

0800b22c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b234:	4b03      	ldr	r3, [pc, #12]	@ (800b244 <USBD_static_malloc+0x18>)
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	2000087c 	.word	0x2000087c

0800b248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
void SystemClockConfig_Resume(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b260:	f7f5 f986 	bl	8000570 <SystemClock_Config>
  USBD_Clock_Config();
 800b264:	f7ff fb3c 	bl	800a8e0 <USBD_Clock_Config>
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d817      	bhi.n	800b2b0 <USBD_Get_USB_Status+0x44>
 800b280:	a201      	add	r2, pc, #4	@ (adr r2, 800b288 <USBD_Get_USB_Status+0x1c>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b299 	.word	0x0800b299
 800b28c:	0800b29f 	.word	0x0800b29f
 800b290:	0800b2a5 	.word	0x0800b2a5
 800b294:	0800b2ab 	.word	0x0800b2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	73fb      	strb	r3, [r7, #15]
    break;
 800b29c:	e00b      	b.n	800b2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a2:	e008      	b.n	800b2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a8:	e005      	b.n	800b2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ae:	e002      	b.n	800b2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b4:	bf00      	nop
  }
  return usb_status;
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <memset>:
 800b2c4:	4402      	add	r2, r0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d100      	bne.n	800b2ce <memset+0xa>
 800b2cc:	4770      	bx	lr
 800b2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b2d2:	e7f9      	b.n	800b2c8 <memset+0x4>

0800b2d4 <__libc_init_array>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b30c <__libc_init_array+0x38>)
 800b2d8:	4c0d      	ldr	r4, [pc, #52]	@ (800b310 <__libc_init_array+0x3c>)
 800b2da:	1b64      	subs	r4, r4, r5
 800b2dc:	10a4      	asrs	r4, r4, #2
 800b2de:	2600      	movs	r6, #0
 800b2e0:	42a6      	cmp	r6, r4
 800b2e2:	d109      	bne.n	800b2f8 <__libc_init_array+0x24>
 800b2e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b314 <__libc_init_array+0x40>)
 800b2e6:	4c0c      	ldr	r4, [pc, #48]	@ (800b318 <__libc_init_array+0x44>)
 800b2e8:	f000 f818 	bl	800b31c <_init>
 800b2ec:	1b64      	subs	r4, r4, r5
 800b2ee:	10a4      	asrs	r4, r4, #2
 800b2f0:	2600      	movs	r6, #0
 800b2f2:	42a6      	cmp	r6, r4
 800b2f4:	d105      	bne.n	800b302 <__libc_init_array+0x2e>
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}
 800b2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2fc:	4798      	blx	r3
 800b2fe:	3601      	adds	r6, #1
 800b300:	e7ee      	b.n	800b2e0 <__libc_init_array+0xc>
 800b302:	f855 3b04 	ldr.w	r3, [r5], #4
 800b306:	4798      	blx	r3
 800b308:	3601      	adds	r6, #1
 800b30a:	e7f2      	b.n	800b2f2 <__libc_init_array+0x1e>
 800b30c:	0800b430 	.word	0x0800b430
 800b310:	0800b430 	.word	0x0800b430
 800b314:	0800b430 	.word	0x0800b430
 800b318:	0800b434 	.word	0x0800b434

0800b31c <_init>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	bf00      	nop
 800b320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b322:	bc08      	pop	{r3}
 800b324:	469e      	mov	lr, r3
 800b326:	4770      	bx	lr

0800b328 <_fini>:
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	bf00      	nop
 800b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32e:	bc08      	pop	{r3}
 800b330:	469e      	mov	lr, r3
 800b332:	4770      	bx	lr
